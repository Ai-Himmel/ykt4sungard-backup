// this file is auto-generated. DO NOT modify this file manually.
             // Copyright Kingstargroup 2006 
            // Author: люЁи 
template<typename T0>
SmartPtr Alloc(T0& arg0)
{
T * ret = allocator_.alloc(arg0);
return new_obj(ret);

}
template<typename T0>
SmartPtr Alloc(const T0& arg0)
{
T * ret = allocator_.alloc(arg0);
return new_obj(ret);

}
template<typename T0,typename T1>
SmartPtr Alloc(T0& arg0,T1& arg1)
{
T * ret = allocator_.alloc(arg0,arg1);
return new_obj(ret);

}
template<typename T0,typename T1>
SmartPtr Alloc(const T0& arg0,const T1& arg1)
{
T * ret = allocator_.alloc(arg0,arg1);
return new_obj(ret);

}
template<typename T0,typename T1,typename T2>
SmartPtr Alloc(T0& arg0,T1& arg1,T2& arg2)
{
T * ret = allocator_.alloc(arg0,arg1,arg2);
return new_obj(ret);

}
template<typename T0,typename T1,typename T2>
SmartPtr Alloc(const T0& arg0,const T1& arg1,const T2& arg2)
{
T * ret = allocator_.alloc(arg0,arg1,arg2);
return new_obj(ret);

}
template<typename T0,typename T1,typename T2,typename T3>
SmartPtr Alloc(T0& arg0,T1& arg1,T2& arg2,T3& arg3)
{
T * ret = allocator_.alloc(arg0,arg1,arg2,arg3);
return new_obj(ret);

}
template<typename T0,typename T1,typename T2,typename T3>
SmartPtr Alloc(const T0& arg0,const T1& arg1,const T2& arg2,const T3& arg3)
{
T * ret = allocator_.alloc(arg0,arg1,arg2,arg3);
return new_obj(ret);

}
template<typename T0,typename T1,typename T2,typename T3,typename T4>
SmartPtr Alloc(T0& arg0,T1& arg1,T2& arg2,T3& arg3,T4& arg4)
{
T * ret = allocator_.alloc(arg0,arg1,arg2,arg3,arg4);
return new_obj(ret);

}
template<typename T0,typename T1,typename T2,typename T3,typename T4>
SmartPtr Alloc(const T0& arg0,const T1& arg1,const T2& arg2,const T3& arg3,const T4& arg4)
{
T * ret = allocator_.alloc(arg0,arg1,arg2,arg3,arg4);
return new_obj(ret);

}
