/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Tue Oct 25 11:13:36 CST 2005 by MyEclipse Hibernate Tool.
 */
package com.kingstargroup.form;

import java.io.Serializable;

/**
 * A class that represents a row in the MAP_ANALYSIS_POINT table. 
 * You can customize the behavior of this class by editing the class, {@link MapAnalysisPoint()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractMapAnalysisPoint 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.String analysisname;

    /** The value of the simple analysispoint property. */
    private java.lang.String analysispoint;

    /**
     * Simple constructor of AbstractMapAnalysisPoint instances.
     */
    public AbstractMapAnalysisPoint()
    {
    }

    /**
     * Constructor of AbstractMapAnalysisPoint instances given a simple primary key.
     * @param analysisname
     */
    public AbstractMapAnalysisPoint(java.lang.String analysisname)
    {
        this.setAnalysisname(analysisname);
    }

    /**
     * Return the simple primary key value that identifies this object.
     * @return java.lang.String
     */
    public java.lang.String getAnalysisname()
    {
        return analysisname;
    }

    /**
     * Set the simple primary key value that identifies this object.
     * @param analysisname
     */
    public void setAnalysisname(java.lang.String analysisname)
    {
        this.hashValue = 0;
        this.analysisname = analysisname;
    }

    /**
     * Return the value of the ANALYSISPOINT column.
     * @return java.lang.String
     */
    public java.lang.String getAnalysispoint()
    {
        return this.analysispoint;
    }

    /**
     * Set the value of the ANALYSISPOINT column.
     * @param analysispoint
     */
    public void setAnalysispoint(java.lang.String analysispoint)
    {
        this.analysispoint = analysispoint;
    }

    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof MapAnalysisPoint))
            return false;
        MapAnalysisPoint that = (MapAnalysisPoint) rhs;
        if (this.getAnalysisname() == null || that.getAnalysisname() == null)
            return false;
        return (this.getAnalysisname().equals(that.getAnalysisname()));
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int analysisnameValue = this.getAnalysisname() == null ? 0 : this.getAnalysisname().hashCode();
            result = result * 37 + analysisnameValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
