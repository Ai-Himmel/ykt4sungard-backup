$pojo.getPackageDeclaration()

$secondpassclassimports
#set($declarationName=$pojo.importType($pojo.getDeclarationName()))
#if ($ifType)
/**
 * ${ifType} interface for ${declarationName}Facade.
 * @author MyEclipse Persistence Tools
 */
@$pojo.importType("javax.ejb.${ifType}")
#set($className="${declarationName}Facade${ifType}")
#else
/**
 * Interface for ${declarationName}DAO.
 * @author MyEclipse Persistence Tools
 */
#set($className="I${declarationName}DAO")
#end

public interface $className {
	#set($instance="entity")
	/**
	 Perform an initial save of a previously unsaved $declarationName entity. 
	 All subsequent persist actions of this entity should use the #update() method.
	 #if(!$ejb3)This operation must be performed within the a database transaction context for the entity's data to be permanently saved to the persistence store, i.e., database. 
	 This method uses the {@link javax.persistence.EntityManager#persist(Object) EntityManager#persist} operation.
	 #if(!$springDAO) 
	 
	 * <pre> 
	 *   EntityManagerHelper.beginTransaction();
	 *   ${className}.save($instance);
	 *   EntityManagerHelper.commit();
	 * </pre>
	 #else 
	 <p>
	 User-managed Spring transaction example:
	 	 	 
	 * <pre> 
	 *   TransactionStatus txn = txManager.getTransaction(new DefaultTransactionDefinition());
	 *   ${className}.save($instance);
	 *   txManager.commit(txn);
	 * </pre>
	 @see <a href = "http://www.myeclipseide.com/documentation/quickstarts/jpaspring#containermanaged">Spring container-managed transaction examples</a>
	 #end #end @param $instance $declarationName entity to persist
	  @throws RuntimeException when the operation fails
	 */
    public void save(${declarationName} $instance);
    /**
	 Delete a persistent $declarationName entity.
	 #if(!$ejb3) This operation must be performed 
	 within the a database transaction context for the entity's data to be
	 permanently deleted from the persistence store, i.e., database. 
	 This method uses the {@link javax.persistence.EntityManager#remove(Object) EntityManager#delete} operation.
	 #if(!$springDAO)
	  
	 * <pre>
	 *   EntityManagerHelper.beginTransaction();
	 *   ${className}.delete($instance);
	 *   EntityManagerHelper.commit();
	 *   $instance = null;
	 * </pre>
	 #else 
	 <p>
	 User-managed Spring transaction example:
	 	 	 
	 * <pre> 
	 *   TransactionStatus txn = txManager.getTransaction(new DefaultTransactionDefinition());
	 *   ${className}.delete($instance);
	 *   txManager.commit(txn);
	 *   $instance = null;
	 * </pre>
	 @see <a href = "http://www.myeclipseide.com/documentation/quickstarts/jpaspring#containermanaged">Spring container-managed transaction examples</a>
	 #end #end @param $instance $declarationName entity to delete
	 @throws RuntimeException when the operation fails
	 */
    public void delete(${declarationName} $instance);
   /**
	 Persist a previously saved $declarationName entity and return it or a copy of it to the sender. 
	 A copy of the $declarationName entity parameter is returned when the JPA persistence mechanism has not previously been tracking the updated entity. 
	 #if(!$ejb3)This operation must be performed within the a database transaction context for the entity's data to be permanently saved to the persistence
	 store, i.e., database. This method uses the {@link javax.persistence.EntityManager#merge(Object) EntityManager#merge} operation.
	 #if(!$springDAO)
	 
	 * <pre>
	 *   EntityManagerHelper.beginTransaction();
	 *   $instance = ${className}.update($instance);
	 *   EntityManagerHelper.commit();
	 * </pre>
	 #else 
	 <p>
	 User-managed Spring transaction example:
	 	 	 
	 * <pre> 
	 *   TransactionStatus txn = txManager.getTransaction(new DefaultTransactionDefinition());
	 *   $instance = ${className}.update($instance);
	 *   txManager.commit(txn);
	 * </pre>
	 @see <a href = "http://www.myeclipseide.com/documentation/quickstarts/jpaspring#containermanaged">Spring container-managed transaction examples</a>
	 #end #end @param $instance $declarationName entity to update
	 @return $declarationName the persisted $declarationName entity instance, may not be the same
	 @throws RuntimeException if the operation fails
	 */
	public ${declarationName} update(${declarationName} $instance);
	public ${declarationName} findById( $pojo.getJavaTypeName($clazz.identifierProperty, $jdk5) id);
	 /**
	 * Find all $declarationName entities with a specific property value.  
	 
	  @param propertyName the name of the $declarationName property to query
	  @param value the property value to match
	  #if($paginate)
	  @param rowStartIdxAndCount Optional int varargs. rowStartIdxAndCount[0] specifies the  the row index in the query result-set to begin collecting the results. rowStartIdxAndCount[1] specifies the the maximum count of results to return.  
	  #end
	  @return List<${declarationName}> found by query
	 */
	public $pojo.importType("java.util.List")<${declarationName}> findByProperty(String propertyName, Object value
	#if($paginate)
		, int...rowStartIdxAndCount
	#end
	);
#if ($generatePreciseFindBy)
#foreach($property in $pojo.getFindByIterator())
#if($pojo.getMetaAttribAsBool($property, "gen-property", true)) 
	public List<${declarationName}> findBy$pojo.getPropertyName($property)(Object $property.Name
	#if($paginate)
		, int...rowStartIdxAndCount
	#end
	);
#end
#end   
#end
	/**
	 * Find all $declarationName entities.
	  #if($paginate)
	  @param rowStartIdxAndCount Optional int varargs. rowStartIdxAndCount[0] specifies the  the row index in the query result-set to begin collecting the results. rowStartIdxAndCount[1] specifies the the maximum count of results to return.  
	  #end
	  @return List<${declarationName}> all $declarationName entities
	 */
	public List<${declarationName}> findAll(
	#if($paginate)
		int...rowStartIdxAndCount
	#end
	);	
}