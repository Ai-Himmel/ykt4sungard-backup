/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Sun Oct 09 15:40:24 CST 2005 by MyEclipse Hibernate Tool.
 */
package com.kingstargroup.ecard.hibernate.card;

import java.io.Serializable;

/**
 * A class that represents a row in the T_PIF_SYSKEY table. 
 * You can customize the behavior of this class by editing the class, {@link TPifSyskey()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractTPifSyskey 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.String keyCode;

    /** The value of the simple keyName property. */
    private java.lang.String keyName;

    /** The value of the simple keyValue property. */
    private java.lang.Long keyValue;

    /** The value of the simple maxValue property. */
    private java.lang.Long maxValue;

    /** The value of the simple keyType property. */
    private java.lang.String keyType;

    /**
     * Simple constructor of AbstractTPifSyskey instances.
     */
    public AbstractTPifSyskey()
    {
    }

    /**
     * Constructor of AbstractTPifSyskey instances given a simple primary key.
     * @param keyCode
     */
    public AbstractTPifSyskey(java.lang.String keyCode)
    {
        this.setKeyCode(keyCode);
    }

    /**
     * Return the simple primary key value that identifies this object.
     * @return java.lang.String
     */
    public java.lang.String getKeyCode()
    {
        return keyCode;
    }

    /**
     * Set the simple primary key value that identifies this object.
     * @param keyCode
     */
    public void setKeyCode(java.lang.String keyCode)
    {
        this.hashValue = 0;
        this.keyCode = keyCode;
    }

    /**
     * Return the value of the KEY_NAME column.
     * @return java.lang.String
     */
    public java.lang.String getKeyName()
    {
        return this.keyName;
    }

    /**
     * Set the value of the KEY_NAME column.
     * @param keyName
     */
    public void setKeyName(java.lang.String keyName)
    {
        this.keyName = keyName;
    }

    /**
     * Return the value of the KEY_VALUE column.
     * @return java.lang.Long
     */
    public java.lang.Long getKeyValue()
    {
        return this.keyValue;
    }

    /**
     * Set the value of the KEY_VALUE column.
     * @param keyValue
     */
    public void setKeyValue(java.lang.Long keyValue)
    {
        this.keyValue = keyValue;
    }

    /**
     * Return the value of the MAX_VALUE column.
     * @return java.lang.Long
     */
    public java.lang.Long getMaxValue()
    {
        return this.maxValue;
    }

    /**
     * Set the value of the MAX_VALUE column.
     * @param maxValue
     */
    public void setMaxValue(java.lang.Long maxValue)
    {
        this.maxValue = maxValue;
    }

    /**
     * Return the value of the KEY_TYPE column.
     * @return java.lang.String
     */
    public java.lang.String getKeyType()
    {
        return this.keyType;
    }

    /**
     * Set the value of the KEY_TYPE column.
     * @param keyType
     */
    public void setKeyType(java.lang.String keyType)
    {
        this.keyType = keyType;
    }

    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof TPifSyskey))
            return false;
        TPifSyskey that = (TPifSyskey) rhs;
        if (this.getKeyCode() == null || that.getKeyCode() == null)
            return false;
        return (this.getKeyCode().equals(that.getKeyCode()));
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int keyCodeValue = this.getKeyCode() == null ? 0 : this.getKeyCode().hashCode();
            result = result * 37 + keyCodeValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
