<%
/**
 * Copyright (c) 2000-2008 Liferay, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
%>

var loadingAnimation = new Image();

loadingAnimation.src =  "<%= themeDisplay.getPathThemeImages() %>/progress_bar/loading_animation.gif";

function addPortletHTML(url, placeHolder, returnPortlet) {
	var portletBoundary;

	var addPortletReturn = function(html) {
		var container = placeHolder.parentNode;
		var addDiv = document.createElement("div");

		addDiv.style.display = "none";
		addDiv.innerHTML = html;

		var portletBound = jQuery(".portlet-boundary:first", addDiv).get(0);

		portletBound.parentNode.removeChild(portletBound);

		var portletId = portletBound.id;

		portletId = portletId.replace(/^p_p_id_/,"");
		portletId = portletId.replace(/_$/,"");

		portletBound.portletId = portletId;

		Liferay.Portlet.flagAjax(portletId);

		container.replaceChild(portletBound, placeHolder);

		Liferay.Util.evalScripts(addDiv);

		if (!jQuery.browser.firefox) {
			Liferay.Util.evalScripts(portletBound);
		}

		<c:if test="<%= (layout != null) && (LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.UPDATE)) %>">
			if (!portletBound.isStatic) {
				if (themeDisplay.isFreeformLayout()) {
					Liferay.Freeform.add(portletBound);
				}
				else {
					Liferay.Columns.add(portletBound);
				}
			}
		</c:if>

		if (jQuery.browser.firefox) {
			setTimeout("Liferay.Portlet.process(\"" + portletId + "\")", 0);
		}
		else {
			Liferay.Portlet.process(portletId);
		}

		Liferay.Util.addInputType(portletBound.id);
		Liferay.Util.addInputFocus(portletBound.id);

		if (window.location.hash) {
			window.location.hash = "p_" + portletId;
		}

		portletBoundary = portletBound;

		return portletId;
	};

	var complete = function(xHR) {
		addPortletReturn(xHR.responseText);
	}

	if (!returnPortlet) {
		AjaxUtil.request(url, {
			onComplete: complete
		});
	}
	else {
		jQuery.ajax(
			{
				url: url,
				complete: function(xHR) {
					complete(xHR);
				},
				async: false
			}
		);

		return portletBoundary;
	}
}

function closePortlet(plid, portletId, doAsUserId, skipConfirm) {
	if (skipConfirm || confirm('<%= UnicodeLanguageUtil.get(pageContext, "are-you-sure-you-want-to-remove-this-component") %>')) {
		var curItem = document.getElementById("p_p_id_" + portletId + "_");
		var parent = curItem.parentNode;

		parent.removeChild(curItem);

		if (curItem = document.getElementById(portletId)) {
			parent = curItem.parentNode;

			parent.removeChild(curItem);
		}

		if (LayoutConfiguration) {
			LayoutConfiguration.initialized = false;
		}

		if (themeDisplay.layoutMaximized) {
			self.location = "<%= themeDisplay.getPathMain() %>/portal/update_layout?p_l_id=" + plid + "&p_p_id=" + portletId + "&doAsUserId=" + doAsUserId + "&<%= Constants.CMD %>=<%= Constants.DELETE %>&referer=" + encodeURIComponent("<%= themeDisplay.getPathMain() %>/portal/layout?p_l_id=" + plid + "&doAsUserId=" + doAsUserId) + "&refresh=1";
		}
		else {
			loadPage("<%= themeDisplay.getPathMain() %>/portal/update_layout", "p_l_id=" + plid + "&p_p_id=" + portletId + "&doAsUserId=" + doAsUserId + "&<%= Constants.CMD %>=<%= Constants.DELETE %>");
		}

		Liferay.Portlet.remove(portletId);

		Liferay.Publisher.register('closePortlet');
		Liferay.Publisher.deliver('closePortlet', {plid: plid, portletId: portletId});
	}
	else {
		self.focus();
	}
}

function getRefreshPortletList() {

	<%
	List allPortlets = PortletLocalServiceUtil.getPortlets(company.getCompanyId(), false, false);

	List nonAjaxPortlets = new ArrayList();

	for (int i = 0; i < allPortlets.size(); i++) {
		Portlet portlet = (Portlet)allPortlets.get(i);

		if (!portlet.isAjaxable()) {
			nonAjaxPortlets.add(portlet.getPortletId());
		}
	}

	StringMaker portletList = new StringMaker();

	for (int i = 0; i < nonAjaxPortlets.size(); i++) {
		portletList.append("_");
		portletList.append(nonAjaxPortlets.get(i));
		portletList.append(":true");
		portletList.append((i < nonAjaxPortlets.size() - 1) ? "," : "");
	}
	%>

	var refreshPortletList = { <%= portletList.toString() %> };

	return refreshPortletList;
}

function minimizePortlet(plid, portletId, restore, doAsUserId) {
	if (themeDisplay.layoutMaximized) {
		self.location = "<%= themeDisplay.getPathMain() %>/portal/update_layout?p_l_id=" + plid + "&p_p_id=" + portletId + "&p_p_restore=" + restore + "&doAsUserId=" + doAsUserId + "&<%= Constants.CMD %>=minimize&referer=" + encodeURIComponent("<%= themeDisplay.getPathMain() %>/portal/layout?p_l_id=" + plid + "&doAsUserId=" + doAsUserId) + "&refresh=1";
	}
	else {
		var portlet = jQuery('#p_p_id_' + portletId + '_');
		var portletContentContainer = portlet.find('.portlet-content-container');

		var buttonsEl = jQuery("#p_p_body_" + portletId + "_min_buttons");

		var html = buttonsEl.html();

		if (restore) {
			portletContentContainer.BlindDown('fast');

			html = html.replace(", true", ", false");
			html = html.replace("restore.png", "minimize.png");
			html = html.replace("<liferay-ui:message key="restore" />", "<liferay-ui:message key="minimize" />");

			loadPage("<%= themeDisplay.getPathMain() %>/portal/update_layout", "p_l_id=" + plid + "&p_p_id=" + portletId + "&p_p_restore=" + restore + "&doAsUserId=" + doAsUserId + "&<%= Constants.CMD %>=minimize");
		}
		else {
			portletContentContainer.BlindUp('fast');

			html = html.replace(", false", ", true");
			html = html.replace("minimize.png", "restore.png");
			html = html.replace("<liferay-ui:message key="minimize" />", "<liferay-ui:message key="restore" />");

			loadPage("<%= themeDisplay.getPathMain() %>/portal/update_layout", "p_l_id=" + plid + "&p_p_id=" + portletId + "&p_p_restore=" + restore + "&doAsUserId=" + doAsUserId + "&<%= Constants.CMD %>=minimize");
		}

		buttonsEl.html(html);
	}
}