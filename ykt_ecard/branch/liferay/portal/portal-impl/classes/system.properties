##
## Start your application server with the system property
## "system.properties.load" set to true to load the external file called
## system.properties. This is given as a convenient way to ensure all properties
## are set for deployment. When the server starts, the portal will load
## system.properties and then system-ext.properties.
##
## Start your application server with the system property
## "system.properties.final" set to true if the properties of system.properties
## override all similar command line properties. If set to false, the properties
## of system.properties will be set if and only if those properties are not
## currently set.
##
## Some application servers require you to set the "file.encoding" and
## "user.timezone" on startup regardless of system.properties because the
## application server reads these properties before system.properties is ever
## loaded.
##

##
## Java
##

    #
    # The file encoding must be set to UTF-8 in order for the
    # internationalization to work correctly.
    #
    file.encoding=UTF-8

    #
    # Java uses the underlying operating system to generate images. If you are
    # using Unix and do not start the portal in a X Windows session, then Java
    # will not know how to generate images and you'll get lots of nasty
    # exceptions. Setting this property to true will fix that. Sometimes this
    # property cannot be set dynamically when the server starts and you'll need
    # to edit your start script to include this as a system property.
    #
    java.awt.headless=true

    #
    # Set the default locale used by Liferay. This locale is no longer set at
    # the VM level. See LEP-2584.
    #
    user.country=US
    user.language=en

    #
    # Set the default time zone used by Liferay. This time zone is no longer set
    # at the VM level. See LEP-2584.
    #
    user.timezone=GMT

##
## Servlet Filters
##

    #
    # If the user can unzip compressed HTTP content, the compression filter will
    # zip up the HTTP content before sending it to the user. This will speed up
    # page rendering for users that are on dial up.
    #
    com.liferay.filters.compression.CompressionFilter=true

    #
    # This double click filter will prevent double clicks at the server side.
    # Prevention of double clicks is already in place on the client side.
    # However, some sites requrie a more robust solution. This is turned off by
    # default since most sites will not need it.
    #
    com.liferay.filters.doubleclick.DoubleClickFilter=false

    #
    # The strip filter will remove blank lines from the outputted content. This
    # will speed up page rendering for users that are on dial up.
    #
    com.liferay.filters.strip.StripFilter=true

    #
    # The layout cache filter will cache pages to speed up page rendering for
    # guest users. See ehcache.xml to modify the cache expiration time to live.
    #
    com.liferay.portal.servlet.filters.layoutcache.LayoutCacheFilter=false

    #
    # The session id filter ensure that only one session is created between http
    # and https sessions. This is useful if you want users to login via https
    # but have them view the rest of the site via http. This is disabled by
    # default. Do not enable this unless you thoroughly understand how cookies,
    # http, and https work.
    #
    com.liferay.portal.servlet.filters.sessionid.SessionIdFilter=false

    #
    # The Velocity filter will process */css/main.css as a Velocity template.
    #
    com.liferay.portal.servlet.filters.velocity.VelocityFilter=false

    #
    # The virtual host filter maps hosts to public and private pages. For
    # example, if the public virtual host is www.helloworld.com and the friendly
    # URL is /helloworld, then http://www.helloworld.com is mapped to
    # http://localhost:8080/web/helloworld.
    #
    com.liferay.portal.servlet.filters.virtualhost.VirtualHostFilter=true

##
## Logging
##

    #
    # Set any logger that implements org.apache.commons.logging.Log.
    #
    #org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger

    #
    # Set the following to true if Log4j complains that it was not properly
    # configured.
    #
    log4j.configure.on.startup=true

##
## Encryptor
##

    #
    # Set the security provider class.
    #
    com.liferay.util.Encryptor.provider.class=com.sun.crypto.provider.SunJCE

##
## HTTP
##

    #
    # Set the location of the HTTP proxy that the portal will use to fetch
    # external content.
    #
    # Set http.nonProxyHosts for hosts that will not be proxied. This is useful
    # for proxied environments where you need direct access to internal servers.
    # This should follow the same semantics as the java.net package.
    #
    #http.proxyHost=192.168.0.200
    #http.proxyPort=4480
    #http.nonProxyHosts=192.168.0.250

    #
    # Set the maximum number of connections.
    #
    #com.liferay.util.Http.max.connections.per.host=2
    #com.liferay.util.Http.max.total.connections=20

    #
    # These are read for backwards compatibility and only used if the
    # "http.proxyHost" and "http.proxyPort" settings are not specified.
    #
    #com.liferay.util.Http.proxy.host=192.168.0.200
    #com.liferay.util.Http.proxy.port=4480

    #
    # Set the proxy authentication type.
    #
    #com.liferay.util.Http.proxy.auth.type=username-password
    #com.liferay.util.Http.proxy.auth.type=ntlm

    #
    # Set user name and password used for HTTP proxy authentication.
    #
    #com.liferay.util.Http.proxy.username=
    #com.liferay.util.Http.proxy.password=

    #
    # Set additional properties for NTLM authentication.
    #
    #com.liferay.util.Http.proxy.ntlm.domain=
    #com.liferay.util.Http.proxy.ntlm.host=

    #
    # Set the connection timeout when fetching HTTP content.
    #
    com.liferay.util.Http.timeout=5000

##
## Format
##

    #
    # Set the location of the class that implements
    # com.liferay.format.PhoneNumberFormat. This class will format phone
    # numbers.
    #
    com.liferay.util.format.PhoneNumberFormat=com.liferay.util.format.USAPhoneNumberFormat
    #com.liferay.util.format.PhoneNumberFormat=com.liferay.util.format.IdenticalPhoneNumberFormat

##
## Axis
##

    #
    # Urls that match the specified pattern will use the SimpleHTTPSender. Urls
    # that do not match the specified pattern will use Axis' default HTTPSender.
    #
    com.liferay.util.axis.SimpleHTTPSender.regexp.pattern=.*mappoint\.net.*

##
## XSS (Cross Site Scripting)
##

    #
    # Set the pattern to strip text of XSS hacks.
    #
    com.liferay.util.XSSUtil.regexp.pattern=(?i)<[\\s]*/?script.*?>|<[\\s]*/?embed.*?>|<[\\s]*/?object.*?>|<[\\s]*a[\\s]*href[^>]*javascript[\\s]*:[^(^)^>]*[(][^)]*[)][^>]*>[^<]*(<[\\s]*/[\\s]*a[^>]*>)*

##
## Upload Servlet Request
##

    #
    # Set the maximum file size. Default is 1024 * 1024 * 100.
    #
    com.liferay.util.servlet.UploadServletRequest.max.size=104857600

    #
    # Set the temp directory for uploaded files.
    #
    #com.liferay.util.servlet.UploadServletRequest.temp.dir=C:/Temp

    #
    # Set the threshold size to prevent extraneous serialization of uploaded
    # data.
    #
    com.liferay.util.servlet.fileupload.LiferayFileItem.threshold.size=262144

##
## Session Parameters
##

    #
    # Encrypt session parameters so that browsers cannot remember them.
    #
    com.liferay.util.servlet.SessionParameters=false

##
## Lucene
##

    #
    # Set a timeout to avoid lock errors.
    #
    #org.apache.lucene.writeLockTimeout=30000

##
## Quartz
##

    #
    # Make threads daemon so the JVM exits cleanly.
    #
    org.quartz.threadPool.makeThreadsDaemons=true

##
## UUID
##

    #
    # Set the location of the UUID configuration file used by Commons Id.
    #
    org.apache.commons.id.uuid.config.resource.filename=commons-id-uuid.xml

##
## Java Command Properties
##

    #
    # Note, the following system properties are read by Java before the portal's
    # s system properties loader is executed. That means modifying the changes
    # here will do nothing. It's simply listed here so all system properties are
    # grouped together. You must modify these values at the Java command level.
    # Below is an example.
    #
    # java ... -Dcom.liferay.portal.kernel.util.ByteArrayMaker.initial.size=8000
    #

    ##
    ## Makers
    ##

        #
        # Use our own StringMaker to extend StringBuffer and ByteArrayMaker to
        # extend ByteArrayOutputStream. This will add analytical tracking of our
        # char and byte usage so we can better optimize memory by minimizing
        # unnecessary garbage collecting that comes from unspecified array
        # growth.
        #
        com.liferay.portal.kernel.util.ByteArrayMaker.initial.size=8000
        com.liferay.portal.kernel.util.StringMaker.initial.size=128

        #
        # Set this to true to track usage.
        #
        com.liferay.portal.kernel.util.MakerStats=false