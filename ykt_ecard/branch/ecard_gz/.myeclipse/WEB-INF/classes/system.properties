##
## Start your application server with the system property
## "system.properties.load" set to true to load the external file called
## system.properties. This is given as a convenient way to ensure all properties
## are set for deployment. When the server starts, the portal will load
## system.properties and then system-ext.properties.
##
## Start your application server with the system property
## "system.properties.final" set to true if the properties of system.properties
## override all similar command line properties. If set to false, the properties
## of system.properties will be set if and only if those properties are not
## currently set.
##
## Some application servers require you to set the "file.encoding" and
## "user.timezone" on startup regardless of system.properties because the
## application server reads these properties before system.properties is ever
## loaded.
##

##
## Java
##

    #
    # The file encoding must be set to UTF-8 in order for the
    # internationalization to work correctly.
    #
    file.encoding=UTF-8

    #
    # Java uses the underlying operating system to generate images. If you are
    # using Unix and do not start the portal in a X Windows session, then Java
    # will not know how to generate images and you'll get lots of nasty
    # exceptions. Setting this property to true will fix that. Sometimes this
    # property cannot be set dynamically when the server starts and you'll need
    # to edit your start script to include this as a system property.
    #
    java.awt.headless=true

    #
    # Set the default language.
    #
    user.country=CN
    user.language=zh_CN

    #
    # The time zone must be set GMT so that the portal knows how to properly
    # translate time across time zones.
    #
    user.timezone=GMT

##
## Servlet Filters
##

    #
    # If the user can unzip compressed HTTP content, the compression filter will
    # zip up the HTTP content before sending it to the user. This will speed up
    # page rendering for users that are on dial up. This property defaults to
    # false because the compression filter doesn't work properly on Oracle9iAS.
    #
    com.liferay.filters.compression.CompressionFilter=true

    #
    # Set the compression filter encoding
    #
    com.liferay.filters.compression.CompressionFilter.encoding=UTF-8

##
## Logging
##

    #
    # Set any logger that implements org.apache.commons.logging.Log.
    #
    org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JCategoryLog

    #
    # Set the following to true if Log4j complains that it was not properly
    # configured.
    #
    log4j.configure.on.startup=true

##
## Encryptor
##

    #
    # Set the security provider class.
    #
    com.liferay.util.Encryptor.provider.class=com.sun.crypto.provider.SunJCE

##
## Hibernate
##

    #
    # Input a list of comma delimited Hibernate configurations.
    #
    hibernate.configs=META-INF/counter-hbm.xml,META-INF/mail-hbm.xml,META-INF/portal-hbm.xml,META-INF/ext-hbm.xml,META-INF/ecard-hbm.xml

    #
    # Set the JNDI location of the Liferay datasource.
    #
    hibernate.connection.datasource=jdbc/LiferayPool

    #
    # Use the Liferay connection provider to lookup JNDI datasources because it
    # works across multiple J2EE servers.
    #
    hibernate.connection.provider_class=com.liferay.util.dao.hibernate.DSConnectionProvider

    #
    # Use the Liferay SQL dialect because it will automatically detect the proper
    # SQL dialect based on your connection URL.
    #
    hibernate.dialect=com.liferay.util.dao.hibernate.DynamicDialect

    #
    # Set the Hibernate cache provider.
    #
    #hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
    hibernate.cache.provider_class=com.liferay.util.dao.hibernate.OSCacheProvider

    #
    # Uncomment these properties to disable Hibernate caching.
    #
    #hibernate.cache.provider_class=org.hibernate.cache.NoCacheProvider
    #hibernate.cache.use_second_level_cache=false
    #hibernate.cache.use_query_cache=false

    #
    # Set other miscellaneous Hibernate properties.
    #
    hibernate.statement_cache.size=0
    hibernate.jdbc.batch_size=0
    hibernate.jdbc.fetch_size=20
    hibernate.jdbc.use_scrollable_resultset=true
    hibernate.cglib.use_reflection_optimizer=false
    hibernate.show_sql=true
    
    # support db2
    hibernate.default_schema=ykt_web
    #
    # Use the classic query factory until WebLogic and Hibernate 3 can get
    # along. See http://www.hibernate.org/250.html#A23 for more information.
    #
    #hibernate.query.factory_class=org.hibernate.hql.classic.ClassicQueryTranslatorFactory
    #
    # Support JTA Transaction
    #
    #hibernate.transaction.factory_class=org.hibernate.transaction.JTATransactionFactory
    #hibernate.transaction.manager_lookup_class=org.hibernate.transaction.JNDITransactionManagerLookup

##
## OSCache
##

    #
    # Consult the OSCache and JGroups documentation on how to configure
    # the cache in a cluster.
    #
    cache.memory=true
    cache.capacity=10000
    cache.algorithm=com.opensymphony.oscache.base.algorithm.LRUCache
    cache.blocking=true
    #cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener
    #cache.cluster.multicast.ip=231.12.21.132

##
## Service Locator
##

    #
    # Set the service locator implementation.
    #
    com.objectparadigms.framework.locator.ServiceLocator.class=com.objectparadigms.framework.locator.impl.CachedServiceLocator
    #com.objectparadigms.framework.locator.ServiceLocator.class=com.objectparadigms.framework.locator.impl.DefaultServiceLocator

##
## HTTP
##

    #
    # Set the location of the HTTP proxy that the portal will use to fetch
    # external content.
    #
    #com.liferay.util.Http.proxy.host=192.168.0.200
    #com.liferay.util.Http.proxy.port=4480

    #
    # Set the connection timeout when fetching HTTP content.
    #
    com.liferay.util.Http.timeout=5000

##
## Format
##

    #
    # Set the location of the class that implements
    # com.liferay.format.PhoneNumberFormat. This class will format phone
    # numbers.
    #
    com.liferay.util.format.PhoneNumberFormat=com.liferay.util.format.USAPhoneNumberFormat
    #com.liferay.util.format.PhoneNumberFormat=com.liferay.util.format.IdenticalPhoneNumberFormat

##
## Axis
##

    #
    # Urls that match the specified pattern will use the SimpleHTTPSender. Urls
    # that do not match the specified pattern will use Axis' default HTTPSender.
    #
    com.liferay.util.axis.SimpleHTTPSender.regexp.pattern=.*mappoint\.net.*

##
## XSS (Cross Site Scripting)
##

    #
    # Set the pattern to strip text of XSS hacks.
    #
    com.liferay.util.Xss.regexp.pattern=(?i)<[\\s]*/?script.*?>|<[\\s]*/?embed.*?>|<[\\s]*/?object.*?>|<[\\s]*a[\\s]*href[^>]*javascript[\\s]*:[^(^)^>]*[(][^)]*[)][^>]*>[^<]*(<[\\s]*/[\\s]*a[^>]*>)*

##
## Upload Servlet Request
##

    #
    # Set the maximum file size. Default is 1024 * 1024 * 1000.
    #
    com.liferay.util.servlet.UploadServletRequest.max.size=5000000

    #
    # Set the temp directory for uploaded files.
    #
    #com.liferay.util.servlet.UploadServletRequest.temp.dir=C:/Temp

##
## Session Parameters
##

    #
    # Encrypt session parameters so that browsers cannot remember them.
    #
    com.liferay.util.servlet.SessionParameters=true

##
## Quartz
##

    #
    # Make threads daemon so the JVM exits cleanly.
    #
    org.quartz.threadPool.makeThreadsDaemons=true