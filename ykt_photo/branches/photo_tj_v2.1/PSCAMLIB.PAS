unit PSCAMLIB;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 2002-01-06                                            }
{    Generated Time: 12:45:49                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows, Sysutils;
{$ELSE}
  Wintypes, WinProcs
{$ENDIF}

const
  ERROR_STR_SIZE = 50;
type
  RegisterReturnType =
  record
    StiLoadResult    : Cardinal;
    StiRegisterResult: Cardinal;
  end {RegisterReturnType};
  PointerRegisterReturnType = ^RegisterReturnType;

  //Object contents data type
  ObjectContentType=
  record
    NumThumbnail : integer;
    NumPicture   : integer;
    NumMovie     : integer;
    NumSound     : integer;
  end;

  PicturePropertiesType =
  record
    FileName             : array[0..19] of char;
    ShutterSpeed         : single;
    Aperture             : single;
    ExposureCompensation : single;
    Flash                : bytebool;
    Macro                : bytebool;
    Picprotected         : bytebool;
    CaptureTimeInTimeT   : Cardinal;
    Width                : integer;
    Height               : integer;
    FileSize             : integer;
    Rotation             : integer;
    FolderNo             : integer;
    FileNo               : integer;
  end;

  psMoviesPropertiesType =
  record
    FileName             : array[0..19] of char;
    CaptureTimeInTimeT   : Cardinal;
    Width                : integer;
    Height               : integer;
    FileSize             : integer;
    FolderNo             : integer;
    FileNo               : integer;
  end;

  ErrorStructType =
  record
    ErrorCode    : integer;
    FunctionName : array[0..ERROR_STR_SIZE - 1] of char;
  end;
  PointerErrorStructType = ^ErrorStructType;

  psSupportedImageSizeType =
  record
    Width : integer;
    Height : integer;
  end;
  PointerSupportedImageSizeType = ^psSupportedImageSizeType;

  UploadPicType =
  record
    Width    : integer;
    Height   : integer;
    Rotation : smallint;
    Quality  : integer;
    FileName : PChar;
  end;

type psReleaseModeType =
 (psRelModeOnlyToPC,        //The picture will only be sent to the PC. No picture is stored in the camera.
  psRelModeBothPCAndCamera, //The picture will be stored both on PC and Camera.
  psRelModeOnlyToCamera);   //The picture will only be stored on Camera.

type psReleaseDataKindType =
 (psRelDataKindTakeOnlyThumbnail,  //Only a thumbnail picture will be taken
  psRelDataKindTakeOnlyPicture,    //Only the full size picture will be taken
  psRelDataKingTakeBothThumbAndPic //Both the full size and thumbnail picture will ba taken.
                                   //Remember to receive the thumbnail picture first!!
 );

type psPicFormatType =
       (psFormatNative,
        psFormatRGB,
        psFormatTIFF);

type psReleaseViewFinderOutputType =
       (psRelViewFinderLCD,
        psRelViewFinderVideo,
        psRelViewFinderOff);

type psOpenSourceType =
       (psOpenCameraPictures,     //Opens the camera as source with only pictures
        psOpenCameraMovies,       //Opens the camera as source with only movies
        psOpenCameraPicMovies,    //Opens the camera as source with pictures and movies
        psOpenHarddrivePicture);  //Opens the harddrive as source with only pictures. TBD do not work!!

type psGetZoomPostionType = record
                              CurrentPos     : cardinal;
                              MaxDigitalZoom : cardinal;
                              MaxOpticalZoom : cardinal;
                            end;


//Remote Format Quality
type psRemoteFormatQualityType =
  (psRemoteFormatQualityNotUsed,
   psRemoteFormatQualityNormal,
   psRemoteFormatQualityFine,
   psRemoteFormatQualityLossless,
   psRemoteFormatQualitySuperfine,
   psRemoteFormatQualityRAW);       

//Remote Format Size
type psRemoteFormatSizeType =
  (psRemoteFormatSizeNotUsed,
   psRemoteFormatSizeLarge,
   psRemoteFormatSizeMedium,
   psRemoteFormatSizeSmall,
   psRemoteFormatSizeMedium2,
   psRemoteFormatSizeMedium1);

//Remote Shooting mode拍摄模式
type psRemoteFormatShootingModeType =
 (psRemoteFormatShootingNotUsed,
  psRemoteFormatShootingModeAuto,
  psRemoteFormatShootingModeManual,
  psRemoteFormatShootingModeFarScene,
  psRemoteFormatShootingModeFastShutter,
  psRemoteFormatShootingModeSlowShutter,
  psRemoteFormatShootingModeNightScene,
  psRemoteFormatShootingModeGrayScene,
  psRemoteFormatShootingModeSepia,
  psRemoteFormatShootingModePortrait,
  psRemoteFormatShootingModeSport,
  psRemoteFormatShootingModeMacro,
  psRemoteFormatShootingModeBW,
  psRemoteFormatShootingModePanFocus,
  psRemoteFormatShootingModeVivid,
  psRemoteFormatShootingModeNeutral,
  psRemoteFormatShootingModeProgram,
  psRemoteFormatShootingModeTV,
  psRemoteFormatShootingModeAV);

//Remote Exposure Compensation自动曝光模式
type psRemoteFormatExposureCompType =
 (psRemoteFormatExposureCompNotUsed,
  psRemoteFormatExposureComp200Plus,
  psRemoteFormatExposureComp166Plus,
  psRemoteFormatExposureComp133Plus,
  psRemoteFormatExposureComp100Plus,
  psRemoteFormatExposureComp066Plus,
  psRemoteFormatExposureComp033Plus,
  psRemoteFormatExposureComp0,
  psRemoteFormatExposureComp033Minus,
  psRemoteFormatExposureComp066Minus,
  psRemoteFormatExposureComp100Minus,
  psRemoteFormatExposureComp133Minus,
  psRemoteFormatExposureComp166Minus,
  psRemoteFormatExposureComp200Minus);

//Remote White Balance白平衡
type psRemoteFormatWBType =
 (psRemoteFormatWBNotUsed,
  psRemoteFormatWBAuto,
  psRemoteFormatWBDaylight,
  psRemoteFormatWBCloudy,
  psRemoteFormatWBTungsten,
  psRemoteFormatWBFluorscent,
  psRemoteFormatWBFlash,
  psRemoteFormatWBPreset,
  psRemoteFormatWBFluorescentLight,
  psRemoteFormatWBCustom);

//Remote Autofocus Distance
type psRemoteFormatAFDistType =
 (psRemoteFormatAFDistNotUsed,
  psRemoteFormatAFDistManual,
  psRemoteFormatAFDistAuto,
  psRemoteFormatAFDistUnknown,
  psRemoteFormatAFDistZFCloseUp,
  psRemoteFormatAFDistZFShortestDistance,
  psRemoteFormatAFDistZFShortDistance,
  psRemoteFormatAFDistZFMediumDistance,
  psRemoteFormatAFDistZFFarDistance);

//Remote Flash setting闪光灯设置
type psRemoteFormatFlashType =
 (psRemoteFormatFlashNotUsed,
  psRemoteFormatFlashOff,
  psRemoteFormatFlashAuto,
  psRemoteFormatFlashOn,
  psRemoteFormatFlashRedEye,
  psRemoteFormatFlashSlowSync,
  psRemoteFormatFlashAutoRedEye,
  psRemoteFormatFlashOnRedEye);

//Remote Flash Compensation setting曝光补偿
type psRemoteFormatFlashCompType =
 (psRemoteFormatFlashCompNotUsed,
  psRemoteFormatFlashComp200Plus,
  psRemoteFormatFlashComp166Plus,
  psRemoteFormatFlashComp133Plus,
  psRemoteFormatFlashComp100Plus,
  psRemoteFormatFlashComp066Plus,
  psRemoteFormatFlashComp033Plus,
  psRemoteFormatFlashComp0,
  psRemoteFormatFlashComp033Minus,
  psRemoteFormatFlashComp066Minus,
  psRemoteFormatFlashComp100Minus,
  psRemoteFormatFlashComp133Minus,
  psRemoteFormatFlashComp166Minus,
  psRemoteFormatFlashComp200Minus);

//Remote ML Weighting
type psRemoteFormatMLWeiType =
 (psRemoteFormatMLWeiNotUsed,
  psRemoteFormatMLWeiCenterWeighted,
  psRemoteFormatMLWeiSpot,
  psRemoteFormatMLWeiAveraging,
  psRemoteFormatMLWeiEvaluative,
  psRemoteFormatMLWeiPartial,
  psRemoteFormatMLWeiCenterwWeightedAveraging);

//Remote Contrast
type psRemoteFormatContrastType =
 (psRemoteFormatContrastNotUsed,
  psRemoteFormatContrastLow,
  psRemoteFormatContrastDefault,
  psRemoteFormatContrastHigh);

//Remote Color Gain
type psRemoteFormatColorGainType =
 (psRemoteFormatColorGainNotUsed,
  psRemoteFormatColorGainLow,
  psRemoteFormatColorGainDefault,
  psRemoteFormatColorGainHigh);

//Remote Sharpness
type psRemoteFormatSharpnessType =
 (psRemoteFormatSharpnessNotUsed,
  psRemoteFormatSharpnessLow,
  psRemoteFormatSharpnessDefault,
  psRemoteFormatSharpnessHigh);

//Remote ISO感光模式
type psRemoteFormatISOType =
 (psRemoteFormatISONotUsed,
  psRemoteFormatISOAuto,
  psRemoteFormatISO50,
  psRemoteFormatISO100,
  psRemoteFormatISO200,
  psRemoteFormatISO400);

//Remote TV
type psRemoteFormatTVType =
       (psRemoteFormatTVNotUsed,
        psRemoteFormatTV30sec,
	psRemoteFormatTV15sec,
	psRemoteFormatTV8sec,
	psRemoteFormatTV4sec,
	psRemoteFormatTV2sec,
	psRemoteFormatTV1sec,
	psRemoteFormatTV0sec5,
	psRemoteFormatTV1_4,
	psRemoteFormatTV1_8,
	psRemoteFormatTV1_15,
	psRemoteFormatTV1_30,
	psRemoteFormatTV1_60,
	psRemoteFormatTV1_125,
	psRemoteFormatTV1_250,
	psRemoteFormatTV1_500,
	psRemoteFormatTV1_1000,
	psRemoteFormatTV1_2000,
	psRemoteFormatTV1_4000,
	psRemoteFormatTV1_8000,
	psRemoteFormatTV1_16000);

//Remote AV
type psRemoteFormatAVType =
       (psRemoteFormatAVNotUsed,
        psRemoteFormatAV1_0,
	psRemoteFormatAV1_4,
	psRemoteFormatAV2_0,
	psRemoteFormatAV2_8,
	psRemoteFormatAV4_0,
	psRemoteFormatAV5_6,
	psRemoteFormatAV8_0,
	psRemoteFormatAV11_0,
	psRemoteFormatAV16_0,
	psRemoteFormatAV22_0,
	psRemoteFormatAV32_0,
	psRemoteFormatAV45_0,
	psRemoteFormatAV64_0,
	psRemoteFormatAV91_0);

//Remote Photo effect照片效果
type psRemoteFormatPhotoEffectType =
 (psRemoteFormatPhotoEffectNotUsed,
  psRemoteFormatPhotoEffectOff,
  psRemoteFormatPhotoEffectVivid,
  psRemoteFormatPhotoEffectNeutral,
  psRemoteFormatPhotoEffectLowSharpening,
  psRemoteFormatPhotoEffectSepia,
  psRemoteFormatPhotoEffectBW);

//Remote Beep
type psRemoteFormatBeepType =
 (psRemoteFormatBeepNotUsed,
  psRemoteFormatBeepOn,
  psRemoteFormatBeepOff);

type psRemoteReleaseLongIntParameters =
  record
    CompQuality          : longint;
    ImageSize            : longint;
    StrobeSetting        : longint;
    StrobeCompSetting    : longint;
    ImageMode            : longint;
    MLWeiMode            : longint;
    AFDistance           : longint;
    WhiteBalanceSetting  : longint;
    Contrast             : longint;
    ColorGain            : longint;
    Sharpness            : longint;
    ISO                  : longint;
    AV                   : longint;
    TV                   : longint;
    ExposureCompensation : longint;
    PhotoEffect          : longint;
    Beep                 : longint;
  end;

type psRemoteReleaseParameters =
  record
    CompQuality          : psRemoteFormatQualityType;
    ImageSize            : psRemoteFormatSizeType;
    StrobeSetting        : psRemoteFormatFlashType;
    StrobeCompSetting    : psRemoteFormatFlashCompType;
    ImageMode            : psRemoteFormatShootingModeType;
    MLWeiMode            : psRemoteFormatMLWeiType;
    AFDistance           : psRemoteFormatAFDistType;
    WhiteBalanceSetting  : psRemoteFormatWBType;
    Contrast             : psRemoteFormatContrastType;
    ColorGain            : psRemoteFormatColorGainType;
    Sharpness            : psRemoteFormatSharpnessType;
    ISO                  : psRemoteFormatISOType;
    AV                   : psRemoteFormatAVType;
    TV                   : psRemoteFormatTVType;
    ExposureCompensation : psRemoteFormatExposureCompType;
    PhotoEffect          : psRemoteFormatPhotoEffectType;
    Beep                 : psRemoteFormatBeepType;
  end;

procedure register_app(const pctitle : PWideChar;
                       const pcpath  : PWideChar;
                       pReturnResult : PointerRegisterReturnType) cdecl;
procedure unregister_app(const pctitle : PWideChar;
                         pReturnResult : PointerRegisterReturnType) cdecl;
function  psStartSDK()       : PointerErrorStructType; cdecl;
function  psFinishSDK()      : PointerErrorStructType; cdecl;
function  psConnect()        : PointerErrorStructType; cdecl;
function  psDisconnect()     : PointerErrorStructType; cdecl;
function  psGetModel(pReturnModel : PChar) : PointerErrorStructType; cdecl;
function  psGetPort(var pReturnPort : integer)  : PointerErrorStructType; cdecl;
function  psGetOwnerName(pReturnOwner : PChar) : PointerErrorStructType; cdecl;
function  psGetNrOfImageSizeSupported(var ReturnNrOfImageSizeSupported : integer) : PointerErrorStructType; cdecl;
function  psGetImageSizeSupported(ImageSizeArrayIndex : integer;
                                  var ReturnImageSize : psSupportedImageSizeType) : PointerErrorStructType; cdecl;
function  psDoSupportUppload(var SupportUppload : bytebool) : PointerErrorStructType; cdecl;
function  psUploadPicture(UploadProperties : UploadPicType) : PointerErrorStructType; cdecl;
function  psGetObjectContents(ObjectNumber     : integer;
                              var pPicContents : ObjectContentType )  : PointerErrorStructType; cdecl;
function  psGetPictureProperties(PicNumber         : integer;
                                 var ReturnPicProp : PicturePropertiesType) : PointerErrorStructType; cdecl;
function  psGetNrOfPicturesOnCamera(var ReturnNrOfPic : integer) : PointerErrorStructType; cdecl;
function  psGetThumbnail(PicNumber : integer; FileName : PChar) : PointerErrorStructType; cdecl;
function  psGetPicture(PicNumber : integer;
                       FileName : PChar;
                       Format : longint) : PointerErrorStructType; cdecl;
function  psDeletePicture(PicNumber : integer) : PointerErrorStructType; cdecl;
function  psTotalPCVolumes(var ReturnTotVol : integer) : PointerErrorStructType; cdecl;
function  psGetPCVolumeName(VolNumber    : integer;
                            var DriveName : char) : PointerErrorStructType; cdecl;
function  psTotalVolumes(var ReturnTotVol : integer) : PointerErrorStructType; cdecl;
function  psGetVolume(VolNumber : integer) : PointerErrorStructType; cdecl;
function  psOpenPicCollection(PCVolumeNumber : integer;
                              searchDepth : integer;
                              source : longint) : PointerErrorStructType; cdecl;
function  psClosePicCollection() : PointerErrorStructType; cdecl;
function  psGetMovieProperties(MovieNumber            : integer;
                               var psMoviesProperties : psMoviesPropertiesType) : PointerErrorStructType; cdecl;
function  psGetNrOfMoviesCamera(var ReturnNrOfMovies : integer) : PointerErrorStructType; cdecl;
function  psGetMovie(MovieNumber : integer; pFileName : PChar) : PointerErrorStructType; cdecl;
function  psDeleteMovie(MovieNumber : integer) : PointerErrorStructType; cdecl;
function  psReleaseDoSupportRemote(var SuppportRemote : bytebool) : PointerErrorStructType; cdecl;
function  psReleaseStart(relMode : longint; dataKind : longint) : PointerErrorStructType; cdecl;
function  psReleaseEnd() : PointerErrorStructType; cdecl;
function  psRelease(useSyncMode : bytebool) : PointerErrorStructType; cdecl;
function  psReleaseGetThumbnail(pFileName : PChar) : PointerErrorStructType; cdecl;
function  psReleaseGetPicture(pFileName : PChar) : PointerErrorStructType; cdecl;
function  psReleaseGetParams(var ReleaseParams : psRemoteReleaseLongIntParameters) : PointerErrorStructType; cdecl;
function  psReleaseSetParams(ReleaseParams : psRemoteReleaseLongIntParameters) : PointerErrorStructType; cdecl;
function  psReleaseGetZoomPosition(var ZoomPos           : cardinal;
                                   var MaxOpticalZoomPos : cardinal;
                                   var MaxZoomPos        : cardinal) : PointerErrorStructType; cdecl;
function  psReleaseSetZoomPosition(ZoomPos : cardinal) : PointerErrorStructType; cdecl;
function  psReleaseDoSupportZoom(var SuppportZoom : bytebool) : PointerErrorStructType; cdecl;
function  psReleaseDoSupportViewFinder(var SuppportViewFinder : bytebool) : PointerErrorStructType; cdecl;
function  psReleaseStartViewFinder() : PointerErrorStructType; cdecl;
function  psReleaseStopViewFinder() : PointerErrorStructType; cdecl;
function  psReleaseSetViewFinderOutput(Output : longint) : PointerErrorStructType; cdecl;
function  psReleaseActivateViewFinderAuto() : PointerErrorStructType; cdecl;
function  psRegisterEventCallbackFunction(fp: Pointer): boolean; cdecl;
function  psRegisterRemoteEventCallbackFunction(fp: Pointer): boolean; cdecl;
function  psRegisterProgressCallbackFunction(fp: Pointer): boolean; cdecl;
function  psRegisterViewfinderCallbackFunction(fp: Pointer): boolean; cdecl;

procedure psTStartSDK();
procedure psTFinishSDK();
function psTConnect(): boolean; cdecl;
procedure psTDisconnect();
function  psTGetModel : string;
function  psTGetPort : string;
function  psTGetOwnerName : string;
function  psTGetNrOfImageSizeSupported : integer;
function  psTGetImageSizeSupported(ImageSizeArrayIndex : integer) : psSupportedImageSizeType;
function  psTDoSupportUppload : boolean;
procedure psTUploadPicture(UploadProperties : UploadPicType);
function  psTGetObjectContents(ObjectNumber : integer) : ObjectContentType;
function  psTGetPictureProperties(PicNumber : integer) : PicturePropertiesType;
function  psTGetNrOfPicturesOnCamera : integer;
procedure psTGetThumbnail(PicNumber : integer; FileName : PChar);
procedure psTGetPicture(PicNumber : integer; FileName : PChar; Format : psPicFormatType);
procedure psTDeletePicture(PicNumber : integer);
function  psTTotalPCVolumes : integer;
function  psTGetPCVolumeName(VolNumber : integer) : char;
function  psTTotalVolumes : integer;
procedure psTGetVolume(VolNumber : integer);
procedure psTOpenPicCollection(PCVolumeNumber : integer; searchDepth : integer; sourceType : psOpenSourceType);
procedure psTClosePicCollection();
function  psTGetMovieProperties(MovieNumber : integer) : psMoviesPropertiesType;
function  psTGetNrOfMoviesCamera() : integer;
procedure psTGetMovie(MovieNumber : integer; pFileName : PChar);
procedure psTDeleteMovie(MovieNumber : integer);
function  psTReleaseDoSupportRemote : boolean;
procedure psTReleaseStart(relMode : psReleaseModeType; dataKind : psReleaseDataKindType);
procedure psTReleaseEnd();
procedure psTRelease(useSyncMode : boolean);
procedure psTReleaseGetThumbnail(pFileName : PChar);
procedure psTReleaseGetPicture(pFileName : PChar);
function  psTReleaseGetParams() : psRemoteReleaseParameters;
procedure psTReleaseSetParams(ReleaseParams : psRemoteReleaseParameters);
procedure psTReleaseSetImageSizeParams(ReleaseParams : psRemoteReleaseParameters);
function  psTReleaseGetZoomPosition : psGetZoomPostionType;
procedure psTReleaseSetZoomPosition(ZoomPos : cardinal);
function  psTReleaseDoSupportZoom : boolean;
function  psTReleaseDoSupportViewFinder : boolean;
procedure psTReleaseStartViewFinder();
procedure psTReleaseStopViewFinder();
procedure psTReleaseSetViewFinderOutput(Output : psReleaseViewFinderOutputType);
procedure psTReleaseActivateViewFinderAuto();

implementation

procedure register_app;                         external 'PSCAMLIB.DLL';
procedure unregister_app;                       external 'PSCAMLIB.DLL';
function  psStartSDK;                           external 'PSCAMLIB.DLL';
function  psFinishSDK;                          external 'PSCAMLIB.DLL';
function  psConnect;                            external 'PSCAMLIB.DLL';
function  psDisconnect;                         external 'PSCAMLIB.DLL';
function  psGetModel;                           external 'PSCAMLIB.DLL';
function  psGetPort;                            external 'PSCAMLIB.DLL';
function  psGetOwnerName;                       external 'PSCAMLIB.DLL';
function  psGetNrOfImageSizeSupported;          external 'PSCAMLIB.DLL';
function  psGetImageSizeSupported;              external 'PSCAMLIB.DLL';
function  psDoSupportUppload;                   external 'PSCAMLIB.DLL';
function  psUploadPicture;                      external 'PSCAMLIB.DLL';
function  psGetNrOfPicturesOnCamera;            external 'PSCAMLIB.DLL';
function  psGetObjectContents;                  external 'PSCAMLIB.DLL';
function  psGetPictureProperties;               external 'PSCAMLIB.DLL';
function  psGetThumbnail;                       external 'PSCAMLIB.DLL';
function  psGetPicture;                         external 'PSCAMLIB.DLL';
function  psDeletePicture;                      external 'PSCAMLIB.DLL';
function  psTotalPCVolumes;                     external 'PSCAMLIB.DLL';
function  psGetPCVolumeName;                    external 'PSCAMLIB.DLL';
function  psTotalVolumes;                       external 'PSCAMLIB.DLL';
function  psGetVolume;                          external 'PSCAMLIB.DLL';
function  psOpenPicCollection;                  external 'PSCAMLIB.DLL';
function  psClosePicCollection;                 external 'PSCAMLIB.DLL';
function  psGetMovieProperties;                 external 'PSCAMLIB.DLL';
function  psGetNrOfMoviesCamera;                external 'PSCAMLIB.DLL';
function  psGetMovie;                           external 'PSCAMLIB.DLL';
function  psDeleteMovie;                        external 'PSCAMLIB.DLL';
function  psReleaseDoSupportRemote;             external 'PSCAMLIB.DLL';
function  psReleaseStart;                       external 'PSCAMLIB.DLL';
function  psReleaseEnd;                         external 'PSCAMLIB.DLL';
function  psRelease;                            external 'PSCAMLIB.DLL';
function  psReleaseGetThumbnail;                external 'PSCAMLIB.DLL';
function  psReleaseGetPicture;                  external 'PSCAMLIB.DLL';
function  psRegisterEventCallbackFunction;      external 'PSCAMLIB.DLL';
function  psRegisterRemoteEventCallbackFunction;external 'PSCAMLIB.DLL';
function  psRegisterProgressCallbackFunction;   external 'PSCAMLIB.DLL';
function  psRegisterViewfinderCallbackFunction; external 'PSCAMLIB.DLL';
function  psReleaseGetParams;                   external 'PSCAMLIB.DLL';
function  psReleaseSetParams;                   external 'PSCAMLIB.DLL';
function  psReleaseGetZoomPosition;             external 'PSCAMLIB.DLL';
function  psReleaseSetZoomPosition;             external 'PSCAMLIB.DLL';
function  psReleaseDoSupportZoom;               external 'PSCAMLIB.DLL';
function  psReleaseDoSupportViewFinder;         external 'PSCAMLIB.DLL';
function  psReleaseStartViewFinder;             external 'PSCAMLIB.DLL';
function  psReleaseStopViewFinder;              external 'PSCAMLIB.DLL';
function  psReleaseSetViewFinderOutput;         external 'PSCAMLIB.DLL';
function  psReleaseActivateViewFinderAuto;      external 'PSCAMLIB.DLL';

procedure handle_error_from_powershot(error : PointerErrorStructType);
begin
  if error^.ErrorCode <> 0 then
  begin
    raise Exception.Create('Canon drivers error. Errorcode 0x'+
                           inttohex(error^.ErrorCode, 8) +
                           ', function ' + error^.FunctionName);

  end;
end;

procedure psTStartSDK();
var error : PointerErrorStructType;
begin
  error := psStartSDK();
  handle_error_from_powershot(error);
end;

procedure psTFinishSDK();
var error : PointerErrorStructType;
begin
  error := psFinishSDK();
  handle_error_from_powershot(error);
end;

function psTConnect():boolean;
var error : PointerErrorStructType;
begin
  error := psConnect();
  if error^.ErrorCode=0 then result:=true
  else result:=false;
 // handle_error_from_powershot(error)
 // else result:=true;
end;

procedure psTDisconnect();
var error : PointerErrorStructType;
begin
  error := psDisconnect();
  handle_error_from_powershot(error);
end;

function  psTGetModel : string;
var error  : PointerErrorStructType;
    pmodel : array [0..254] of char;
begin
  error := psGetModel(@pmodel);
  handle_error_from_powershot(error);
  result := pmodel;
end;

function  psTGetPort : string;
var error : PointerErrorStructType;
    pport : integer;
begin
  error := psGetPort(pport);
  case pport of
    0 : result := 'No port';
    1 : result := 'USB';
    2 : result := 'IEEE1394';
  else
    result := 'Unknown port';
  end;
  handle_error_from_powershot(error);
end;

function  psTGetOwnerName : string;
var error      : PointerErrorStructType;
    pownername : array [0..254] of char;
begin
  error := psGetOwnerName(@pownername);
  handle_error_from_powershot(error);
  result := pownername;
end;

function  psTGetNrOfImageSizeSupported : integer;
var error        : PointerErrorStructType;
    nr_supported : integer;
begin
  error := psGetNrOfImageSizeSupported(nr_supported);
  handle_error_from_powershot(error);
  result := nr_supported;
end;

function  psTGetImageSizeSupported(ImageSizeArrayIndex : integer) : psSupportedImageSizeType;
var error       : PointerErrorStructType;
    size_image  : psSupportedImageSizeType;
begin
  error := psGetImageSizeSupported(ImageSizeArrayIndex,
                                   size_image);
  handle_error_from_powershot(error);
  result := size_image;
end;

function  psTDoSupportUppload : boolean;
var error          : PointerErrorStructType;
    upload_support : bytebool;
begin
  error := psDoSupportUppload(upload_support);
  handle_error_from_powershot(error);
  result := upload_support;
end;

procedure psTUploadPicture(UploadProperties : UploadPicType);
var error : PointerErrorStructType;
begin
  error := psUploadPicture(UploadProperties);
  handle_error_from_powershot(error);
end;

function  psTGetObjectContents(ObjectNumber : integer) : ObjectContentType;
var error          : PointerErrorStructType;
    object_content : ObjectContentType;
begin
  error := psGetObjectContents(ObjectNumber, object_content);
  handle_error_from_powershot(error);
  result := object_content;
end;

function  psTGetPictureProperties(PicNumber : integer) : PicturePropertiesType;
var error    : PointerErrorStructType;
    pic_prop : PicturePropertiesType;
begin
  error := psGetPictureProperties(PicNumber, pic_prop);
  handle_error_from_powershot(error);
  result := pic_prop;
end;

function  psTGetNrOfPicturesOnCamera : integer;
var error     : PointerErrorStructType;
    nr_of_pic : integer;
begin
  error := psGetNrOfPicturesOnCamera(nr_of_pic);
  handle_error_from_powershot(error);
  result := nr_of_pic;
end;

procedure psTGetThumbnail(PicNumber : integer; FileName : PChar);
var error : PointerErrorStructType;
begin
  error := psGetThumbnail(PicNumber, FileName);
  handle_error_from_powershot(error);
end;

procedure psTGetPicture(PicNumber : integer; FileName : PChar; Format : psPicFormatType);
var error : PointerErrorStructType;
begin
  error := psGetPicture(PicNumber, FileName, ord(Format));
  handle_error_from_powershot(error);
end;

procedure psTDeletePicture(PicNumber : integer);
var error : PointerErrorStructType;
begin
  error := psDeletePicture(PicNumber);
  handle_error_from_powershot(error);
end;

function psTTotalPCVolumes : integer;
var error   : PointerErrorStructType;
    tot_vol : integer;
begin
  error := psTotalPCVolumes(tot_vol);
  handle_error_from_powershot(error);
  result := tot_vol;
end;

function psTGetPCVolumeName(VolNumber : integer) : char;
var error    : PointerErrorStructType;
    vol_name : char;
begin
  error := psGetPCVolumeName(VolNumber, vol_name);
  handle_error_from_powershot(error);
  result := vol_name;
end;

function psTTotalVolumes : integer;
var error   : PointerErrorStructType;
    tot_vol : integer;
begin
  error := psTotalVolumes(tot_vol);
  handle_error_from_powershot(error);
  result := tot_vol;
end;

procedure psTGetVolume(VolNumber : integer);
var error : PointerErrorStructType;
begin
  error := psGetVolume(VolNumber);
  handle_error_from_powershot(error);
end;

procedure psTOpenPicCollection(PCVolumeNumber : integer; searchDepth : integer; sourceType : psOpenSourceType);
var error : PointerErrorStructType;
begin
  error := psOpenPicCollection(PCVolumeNumber, searchDepth, ord(sourceType));
  handle_error_from_powershot(error);
end;

procedure psTClosePicCollection();
var error : PointerErrorStructType;
begin
  error := psClosePicCollection();
  handle_error_from_powershot(error);
end;

function  psTGetMovieProperties(MovieNumber : integer) : psMoviesPropertiesType;
var error      : PointerErrorStructType;
    movie_prop : psMoviesPropertiesType;
begin
  error := psGetMovieProperties(MovieNumber, movie_prop);
  handle_error_from_powershot(error);
  result := movie_prop;
end;

function  psTGetNrOfMoviesCamera() : integer;
var error        : PointerErrorStructType;
    nr_of_movies : integer;
begin
  error := psGetNrOfMoviesCamera(nr_of_movies);
  handle_error_from_powershot(error);
  result := nr_of_movies;
end;

procedure psTGetMovie(MovieNumber : integer; pFileName : PChar);
var error : PointerErrorStructType;
begin
  error := psGetMovie(MovieNumber, pFileName);
  handle_error_from_powershot(error);
end;

procedure psTDeleteMovie(MovieNumber : integer);
var error : PointerErrorStructType;
begin
  error := psDeleteMovie(MovieNumber);
  handle_error_from_powershot(error);
end;

function  psTReleaseDoSupportRemote : boolean;
var error          : PointerErrorStructType;
    remote_support : bytebool;
begin
  error := psReleaseDoSupportRemote(remote_support);
  handle_error_from_powershot(error);
  result := remote_support;
end;

procedure psTReleaseStart(relMode : psReleaseModeType; dataKind : psReleaseDataKindType);
var error : PointerErrorStructType;
begin
  error := psReleaseStart(ord(relMode), ord(dataKind));
  handle_error_from_powershot(error);
end;

procedure psTReleaseEnd();
var error : PointerErrorStructType;
begin
  error := psReleaseEnd();
  handle_error_from_powershot(error);
end;

procedure psTRelease(useSyncMode : boolean);
var error : PointerErrorStructType;
begin
  error := psRelease(bytebool(useSyncMode));
  handle_error_from_powershot(error);
end;

procedure psTReleaseGetThumbnail(pFileName : PChar);
var error : PointerErrorStructType;
begin
  error := psReleaseGetThumbnail(pFileName);
  handle_error_from_powershot(error);
end;

procedure psTReleaseGetPicture(pFileName : PChar);
var error : PointerErrorStructType;
begin
  error := psReleaseGetPicture(pFileName);
  handle_error_from_powershot(error);
end;

function  psTReleaseGetParams() : psRemoteReleaseParameters;
var error                 : PointerErrorStructType;
    release_param_longint : psRemoteReleaseLongIntParameters;
begin
  error := psReleaseGetParams(release_param_longint);
  handle_error_from_powershot(error);
  result.ImageSize            := psRemoteFormatSizeSmall;
  error := psReleaseGetParams(release_param_longint);
  handle_error_from_powershot(error);
  result.CompQuality          := psRemoteFormatQualityType(release_param_longint.CompQuality);
  result.ImageSize            := psRemoteFormatSizeType(release_param_longint.ImageSize);
  result.StrobeSetting        := psRemoteFormatFlashType(release_param_longint.StrobeSetting);
  result.StrobeCompSetting    := psRemoteFormatFlashCompType(release_param_longint.StrobeCompSetting);
  result.ImageMode            := psRemoteFormatShootingModeType(release_param_longint.ImageMode);
  result.MLWeiMode            := psRemoteFormatMLWeiType(release_param_longint.MLWeiMode);
  result.AFDistance           := psRemoteFormatAFDistType(release_param_longint.AFDistance);
  result.WhiteBalanceSetting  := psRemoteFormatWBType(release_param_longint.WhiteBalanceSetting);
  result.Contrast             := psRemoteFormatContrastType(release_param_longint.Contrast);
  result.ColorGain            := psRemoteFormatColorGainType(release_param_longint.ColorGain);
  result.Sharpness            := psRemoteFormatSharpnessType(release_param_longint.Sharpness);
  result.ISO                  := psRemoteFormatISOType(release_param_longint.ISO);
  result.AV                   := psRemoteFormatAVType(release_param_longint.AV);
  result.TV                   := psRemoteFormatTVType(release_param_longint.TV);
  result.ExposureCompensation := psRemoteFormatExposureCompType(release_param_longint.ExposureCompensation);
  result.PhotoEffect          := psRemoteFormatPhotoEffectType(release_param_longint.PhotoEffect);
  result.Beep                 := psRemoteFormatBeepType(release_param_longint.Beep);
end;

procedure psTReleaseSetParams(ReleaseParams : psRemoteReleaseParameters);
var error                 : PointerErrorStructType;
    relase_params_longint : psRemoteReleaseLongIntParameters;
begin
  relase_params_longint.CompQuality          := ord(ReleaseParams.CompQuality);
  relase_params_longint.ImageSize            := ord(ReleaseParams.ImageSize);
  relase_params_longint.StrobeSetting        := ord(ReleaseParams.StrobeSetting);
  relase_params_longint.StrobeCompSetting    := ord(ReleaseParams.StrobeCompSetting);
  relase_params_longint.ImageMode            := ord(ReleaseParams.ImageMode);
  relase_params_longint.MLWeiMode            := ord(ReleaseParams.MLWeiMode);
  relase_params_longint.AFDistance           := ord(ReleaseParams.AFDistance);
  relase_params_longint.WhiteBalanceSetting  := ord(ReleaseParams.WhiteBalanceSetting);
  relase_params_longint.Contrast             := ord(ReleaseParams.Contrast);
  relase_params_longint.ColorGain            := ord(ReleaseParams.ColorGain);
  relase_params_longint.Sharpness            := ord(ReleaseParams.Sharpness);
  relase_params_longint.ISO                  := ord(ReleaseParams.ISO);
  relase_params_longint.AV                   := ord(ReleaseParams.AV);
  relase_params_longint.TV                   := ord(ReleaseParams.TV);
  relase_params_longint.ExposureCompensation := ord(ReleaseParams.ExposureCompensation);
  relase_params_longint.PhotoEffect          := ord(ReleaseParams.PhotoEffect);
  relase_params_longint.Beep                 := ord(ReleaseParams.Beep);

  error := psReleaseSetParams(relase_params_longint);
  handle_error_from_powershot(error);
end;

procedure psTReleaseSetImageSizeParams(ReleaseParams : psRemoteReleaseParameters);
var error                 : PointerErrorStructType;
    relase_params_longint : psRemoteReleaseLongIntParameters;
begin
  relase_params_longint.ImageSize            := ord(ReleaseParams.ImageSize);
  error := psReleaseSetParams(relase_params_longint);
  handle_error_from_powershot(error);
end;

function  psTReleaseGetZoomPosition : psGetZoomPostionType;
var error            : PointerErrorStructType;
    zoom_position    : cardinal;
    zoom_max_digital : cardinal;
    zoom_max_optical : cardinal;
begin
  error := psReleaseGetZoomPosition(zoom_position,
                                    zoom_max_optical,
                                    zoom_max_digital);
  handle_error_from_powershot(error);
  result.CurrentPos := zoom_position;
  result.MaxDigitalZoom := zoom_max_digital;
  result.MaxOpticalZoom := zoom_max_optical;
end;

procedure psTReleaseSetZoomPosition(ZoomPos : cardinal);
var error : PointerErrorStructType;
begin
  error := psReleaseSetZoomPosition(ZoomPos);
  handle_error_from_powershot(error);
end;

function  psTReleaseDoSupportZoom : boolean;
var error        : PointerErrorStructType;
    zoom_support : bytebool;
begin
  error := psReleaseDoSupportZoom(zoom_support);
  handle_error_from_powershot(error);
  result := zoom_support;
end;

function  psTReleaseDoSupportViewFinder : boolean;
var error              : PointerErrorStructType;
    viewfinder_support : bytebool;
begin
  error := psReleaseDoSupportViewFinder(viewfinder_support);
  handle_error_from_powershot(error);
  result := viewfinder_support;
end;

procedure psTReleaseStartViewFinder();
var error : PointerErrorStructType;
begin
  error := psReleaseStartViewFinder;
  handle_error_from_powershot(error);
end;

procedure psTReleaseStopViewFinder();
var error : PointerErrorStructType;
begin
  error := psReleaseStopViewFinder;
  handle_error_from_powershot(error);
end;

procedure psTReleaseSetViewFinderOutput(Output : psReleaseViewFinderOutputType);
var error : PointerErrorStructType;
begin
  error := psReleaseSetViewFinderOutput(ord(Output));
  handle_error_from_powershot(error);
end;

procedure psTReleaseActivateViewFinderAuto();
var error : PointerErrorStructType;
begin
  error := psReleaseActivateViewFinderAuto;
  handle_error_from_powershot(error);
end;

end.
