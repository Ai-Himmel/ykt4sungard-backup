/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Thu Mar 30 09:57:05 CST 2006 by MyEclipse Hibernate Tool.
 */
package com.kingstargroup.conference.hibernate.form;

import java.io.Serializable;

/**
 * A class that represents a row in the T_CONFERENCE_TYPE table. 
 * You can customize the behavior of this class by editing the class, {@link TConferenceType()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractTConferenceType 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.Integer typeId;

    /** The value of the simple typeName property. */
    private java.lang.String typeName;

    /** The value of the simple comments property. */
    private java.lang.String comments;

    /**
     * Simple constructor of AbstractTConferenceType instances.
     */
    public AbstractTConferenceType()
    {
    }

    /**
     * Constructor of AbstractTConferenceType instances given a simple primary key.
     * @param typeId
     */
    public AbstractTConferenceType(java.lang.Integer typeId)
    {
        this.setTypeId(typeId);
    }

    /**
     * Return the simple primary key value that identifies this object.
     * @return java.lang.Integer
     */
    public java.lang.Integer getTypeId()
    {
        return typeId;
    }

    /**
     * Set the simple primary key value that identifies this object.
     * @param typeId
     */
    public void setTypeId(java.lang.Integer typeId)
    {
        this.hashValue = 0;
        this.typeId = typeId;
    }

    /**
     * Return the value of the TYPE_NAME column.
     * @return java.lang.String
     */
    public java.lang.String getTypeName()
    {
        return this.typeName;
    }

    /**
     * Set the value of the TYPE_NAME column.
     * @param typeName
     */
    public void setTypeName(java.lang.String typeName)
    {
        this.typeName = typeName;
    }

    /**
     * Return the value of the COMMENTS column.
     * @return java.lang.String
     */
    public java.lang.String getComments()
    {
        return this.comments;
    }

    /**
     * Set the value of the COMMENTS column.
     * @param comments
     */
    public void setComments(java.lang.String comments)
    {
        this.comments = comments;
    }

    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof TConferenceType))
            return false;
        TConferenceType that = (TConferenceType) rhs;
        if (this.getTypeId() == null || that.getTypeId() == null)
            return false;
        return (this.getTypeId().equals(that.getTypeId()));
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int typeIdValue = this.getTypeId() == null ? 0 : this.getTypeId().hashCode();
            result = result * 37 + typeIdValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
