<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<!-- DO NOT EDIT: This is a generated file that is synchronized -->
<!-- by MyEclipse Hibernate tool integration.                   -->
<!-- Created Fri Dec 09 14:17:05 CST 2005                         -->
<hibernate-mapping package="com.kingstargroup.advquery.reportshopbalance" schema="ykt_cur" >

    <class name="TTifReportShopBalance" table="T_TIF_REPORT_SHOP_BALANCE">
        <composite-id name="id" class="TTifReportShopBalanceKey">
            <key-property name="balanceDate" column="BALANCE_DATE" type="string"/>
            <key-property name="shopId" column="SHOP_ID" type="integer"/>
        </composite-id>
 
        <property name="shopName" column="SHOP_NAME" type="string" />
        <property name="deptId" column="DEPT_ID" type="integer" />
        <property name="tradeNum" column="TRADE_NUM" type="integer" />
        <property name="tradeAmt" column="TRADE_AMT" type="double" />
        <property name="mngAmt" column="MNG_AMT" type="double" />
        <property name="totalAmt" column="TOTAL_AMT" type="double" />
        <property name="dataSign" column="DATA_SIGN" type="string" />
        <property name="reserve1" column="RESERVE1" type="string" />
        <property name="reserve2" column="RESERVE2" type="string" />
    </class>
  <!--商户整体账户变动情况:营业额，管理费金额 (按日期范围统计)--> 
  <class entity-name="ShopAccountChangeStatResult">
  	<id name="balance_date" type="string">
  		<generator class="assigned"></generator>
  	</id>
  	<property name="tradeamt" type="float"></property>
  	<property name="mngamt" type="float"></property>
  </class>
  
  <!--商户整体账户变动情况:营业额，管理费金额 (按月份范围统计)--> 
  <class entity-name="ShopAccountChangeStatMonthResult">
  	<id name="balance_date" type="string">
  		<generator class="assigned"></generator>
  	</id>
  	<property name="tradeamt" type="float"></property>
  	<property name="mngamt" type="float"></property>
  </class>
  
  
  <!--各商户营业情况统计:营业额，管理费金额按日期范围统计 --> 
  <class entity-name="OneShopAccountChangeStatResult">
  	<id name="balance_date" type="string">
  		<generator class="assigned"></generator>
  	</id>
  	<property name="tradeamt" type="float"></property>
 	<property name="mngamt" type="float"></property>
 	<property name="totalamt" type="float"></property>
  </class>
  
  <!--各商户营业情况统计:营业额，管理费金额按月份范围统计 --> 
  <class entity-name="OneShopAccountChangeStatMonthResult">
  	<id name="balance_date" type="string">
  		<generator class="assigned"></generator>
  	</id>
  	<property name="tradeamt" type="float"></property>
 	<property name="mngamt" type="float"></property>
 	<property name="totalamt" type="float"></property>
  </class>
  
  <!-- 各商户营业情况对比-->
  <class entity-name="ShopCompareStat">
  	<id name="shopid" type="string">
  		<generator class="assigned"></generator>
  	</id>
  	<property name="shopname" type="string"></property>
 	<property name="tradenum" type="integer"></property>
 	<property name="tradeamt" type="float"></property>
 	<property name="mngamt" type="float"></property>
 	<property name="totalamt" type="float"></property>
  </class>
  
  <!--商户整体账户变动情况:营业额，管理费金额（按日期范围统计）--> 
  <sql-query name="ShopAccountChangeStatSQL">
  	<return entity-name="ShopAccountChangeStatResult"></return>
  	<!-- return-scalar type="string" column="balance_date"/>
  	<return-scalar type="float" column="tradeamt"/>
  	<return-scalar type="float" column="mngamt"/-->
	  	select balance_date,
		<!--发生金额-->
			   sum(trade_amt)tradeamt,
		<!--管理费金额-->	   
			   sum(mng_amt)mngamt
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE
		where balance_date>=:begindate and not(balance_date>:enddate) and shop_id=1
		group by balance_date
  		order by balance_date
  </sql-query>
  
  <!--商户整体账户变动情况:营业额，管理费金额（按月份范围统计） --> 
  <sql-query name="ShopAccountChangeStatMonthSQL">
  	<return entity-name="ShopAccountChangeStatMonthResult"></return>
  	<!-- return-scalar type="string" column="balance_date"/>
  	<return-scalar type="float" column="tradeamt"/>
  	<return-scalar type="float" column="mngamt"/-->
	  	select substr(balance_date,1,6)balance_date,
		<!--发生金额-->
			   sum(trade_amt)tradeamt,
		<!--管理费金额-->	   
			   sum(mng_amt)mngamt
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE
		where substr(balance_date,1,6)>=:begindate 
		and not(substr(balance_date,1,6)>:enddate)  and shop_id=1
		group by substr(balance_date,1,6)
  		order by substr(balance_date,1,6)
  </sql-query>
  <!--各商户营业情况统计:营业额，管理费金额按日期范围统计 --> 
  <sql-query name="OneShopAccountChangeStatSQL">
  	<return entity-name="OneShopAccountChangeStatResult"></return>
  	<!-- return-scalar type="string" column="balance_date"/>
  	<return-scalar type="float" column="tradeamt"/>
  	<return-scalar type="float" column="mngamt"/>
  	<return-scalar type="float" column="totalamt"/-->
		select balance_date,
		<!--发生次数-->
			   sum(trade_num)tradenum,
		<!--发生金额-->
			   sum(trade_amt)tradeamt,
		<!--管理费金额-->	   
			   sum(mng_amt)mngamt,
		<!--总金额-->
			   sum(total_amt)totalamt
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE
		where shop_id=:shopid and balance_date>=:begindate and not(balance_date>:endate)
		group by balance_date
		order by balance_date
  </sql-query>
  
  <!--各商户营业情况统计:营业额，管理费金额按月份范围统计 --> 
  <sql-query name="OneShopAccountChangeStatMonthSQL">
  	<return entity-name="OneShopAccountChangeStatMonthResult"></return>
  	<!-- return-scalar type="string" column="balance_date"/>
  	<return-scalar type="float" column="tradeamt"/>
  	<return-scalar type="float" column="mngamt"/>
  	<return-scalar type="float" column="totalamt"/-->
		select substr(balance_date,1,6)balance_date,
		<!--发生次数-->
			   sum(trade_num)tradenum,
		<!--发生金额-->
			   sum(trade_amt)tradeamt,
		<!--管理费金额-->	   
			   sum(mng_amt)mngamt,
		<!--总金额-->
			   sum(total_amt)totalamt
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE
		where shop_id=:shopid and substr(balance_date,1,6)>=:begindate 
		and not(substr(balance_date,1,6)>:endate)
		group by substr(balance_date,1,6)  	
		order by substr(balance_date,1,6)
  </sql-query>
  <!--消费情况总体统计 (按日期范围统计)-->
  <sql-query name="AllConsumeStatSQL">
  	<return entity-name="AllConsumeStatResult"></return>
  <!-- return-scalar type="string" column="balance_date"/>
  <return-scalar type="float" column="tradeamt"/>
  <return-scalar type="float" column="mngamt"/>
  <return-scalar type="integer" column="tradenum"/-->
		select balance_date,
		<!--发生次数-->
			   sum(trade_num)tradenum,
		<!--总交易发生金额-->
			   sum(total_amt)tradeamt,
		<!--管理费金额-->
			   sum(mng_amt)mngamt
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE
		where balance_date>=:begindate and not(balance_date>:enddate) and shop_id=1
		group by balance_date
		order by balance_date
  </sql-query>
  
  <!--消费情况总体统计 (按月份范围统计)-->
  <sql-query name="AllConsumeStatMonthSQL">
  	<return entity-name="AllConsumeStatMonthResult"></return>
  <!-- return-scalar type="string" column="balance_date"/>
  <return-scalar type="float" column="tradeamt"/>
  <return-scalar type="float" column="mngamt"/>
  <return-scalar type="integer" column="tradenum"/-->
		select substr(balance_date,1,6) balance_date,
		<!--发生次数-->
			   sum(trade_num)tradenum,
		<!--总交易发生金额-->
			   sum(total_amt)tradeamt,
		<!--管理费金额-->
			   sum(mng_amt)mngamt
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE
		where substr(balance_date,1,6)>=:begindate 
		and not(substr(balance_date,1,6)>:enddate)and shop_id=1
		group by substr(balance_date,1,6)
		
  </sql-query>
  <!--各校区营业情况对比（笔数） (安日期范围统计)-->
  <sql-query name="AreaSalesNumCompareSQL">
  <return-scalar type="string" column="balance_date"/>
  <return-scalar type="integer" column="hd"/>
  <return-scalar type="integer" column="fl"/>
  <return-scalar type="integer" column="zj"/>
  <return-scalar type="integer" column="jw"/>
		select balance_date,sum(hd)hd,sum(fl)fl,sum(zj)zj,sum(jw)jw
		from
		(Select balance_date,
		<!--邯郸后勤集体-->
			   (case when shop_id=25 then 1 else 0 end)*(trade_num) hd,
		<!--枫林-->
			   (case when shop_id=26 then 1 else 0 end)*(trade_num) fl,
		<!--张江-->
			   (case when shop_id=110 then 1 else 0 end)*(trade_num) zj,
		<!--江湾-->	   
			   (case when shop_id=126 then 1 else 0 end)*(trade_num) jw
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE where dept_id=1 
		and balance_date>=:begindate and not(balance_date>:enddate))t
		group by balance_date
		order by balance_date
  </sql-query>
  
  <!--各校区营业情况对比（笔数） (安月份范围统计)-->
  <sql-query name="AreaSalesNumCompareMonthSQL">
  <return-scalar type="string" column="balance_date"/>
  <return-scalar type="integer" column="hd"/>
  <return-scalar type="integer" column="fl"/>
  <return-scalar type="integer" column="zj"/>
  <return-scalar type="integer" column="jw"/>
		select balance_date,sum(hd)hd,sum(fl)fl,sum(zj)zj,sum(jw)jw
		from
		(Select substr(balance_date,1,6)balance_date,
		<!--邯郸后勤集体-->
			   (case when shop_id=25 then 1 else 0 end)*(trade_num) hd,
		<!--枫林-->
			   (case when shop_id=26 then 1 else 0 end)*(trade_num) fl,
		<!--张江-->
			   (case when shop_id=110 then 1 else 0 end)*(trade_num) zj,
		<!--江湾-->	   
			   (case when shop_id=126 then 1 else 0 end)*(trade_num) jw
		from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE where dept_id=1 
		and substr(balance_date,1,6)>=:begindate 
		and not(substr(balance_date,1,6)>:enddate))t
		group by balance_date
  </sql-query>
  
  <!--各校区营业情况对比（金额） -->
  <sql-query name="AreaSalesMoneyCompareSQL">
  <return-scalar type="string" column="balance_date"/>
  <return-scalar type="float" column="hd"/>
  <return-scalar type="float" column="fl"/>
  <return-scalar type="float" column="zj"/>
  <return-scalar type="float" column="jw"/>
		select balance_date,sum(hd)hd,sum(fl)fl,sum(zj)zj,sum(jw)jw
		from
			(Select balance_date,
			<!--邯郸后勤集体-->
				   (case when shop_id=25 then 1 else 0 end)*(trade_amt) hd,
			<!--枫林-->
				   (case when shop_id=26 then 1 else 0 end)*(trade_amt) fl,
			<!--张江-->
				   (case when shop_id=110 then 1 else 0 end)*(trade_amt) zj,
			<!--江湾-->	   
				   (case when shop_id=126 then 1 else 0 end)*(trade_amt) jw
			from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE where dept_id=1 
			and balance_date>=:begindate and not(balance_date>:enddate))t
		group by balance_date
  </sql-query>
  
  <!--各校区营业情况对比（金额）(按月份统计) -->
  <sql-query name="AreaSalesMoneyCompareMonthSQL">
  <return-scalar type="string" column="balance_date"/>
  <return-scalar type="float" column="hd"/>
  <return-scalar type="float" column="fl"/>
  <return-scalar type="float" column="zj"/>
  <return-scalar type="float" column="jw"/>
		select balance_date,sum(hd)hd,sum(fl)fl,sum(zj)zj,sum(jw)jw
		from
			(Select substr(balance_date,1,6)balance_date,
			<!--邯郸后勤集体-->
				   (case when shop_id=25 then 1 else 0 end)*(trade_amt) hd,
			<!--枫林-->
				   (case when shop_id=26 then 1 else 0 end)*(trade_amt) fl,
			<!--张江-->
				   (case when shop_id=110 then 1 else 0 end)*(trade_amt) zj,
			<!--江湾-->	   
				   (case when shop_id=126 then 1 else 0 end)*(trade_amt) jw
			from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE where dept_id=1 
			and substr(balance_date,1,6)>=:begindate 
			and not(substr(balance_date,1,6)>:enddate))t
		group by balance_date
  </sql-query>
  
  <!--各校区营业情况对比（金额和笔数） -->
  <sql-query name="AreaSalesCompareSQL">
  <return-scalar type="string" column="balance_date"/>
  <return-scalar type="float" column="hdamt"/>
  <return-scalar type="float" column="flamt"/>
  <return-scalar type="float" column="zjamt"/>
  <return-scalar type="float" column="jwamt"/>
  <return-scalar type="integer" column="hdnum"/>
  <return-scalar type="integer" column="flnum"/>
  <return-scalar type="integer" column="zjnum"/>
  <return-scalar type="integer" column="jwnum"/>
		select balance_date,sum(hdnum)hdnum,sum(flnum)flnum,sum(zjnum)zjnum,sum(jwnum)jwnum,
				sum(hdamt)hdamt,sum(flamt)flamt,sum(zjamt)zjamt,sum(jwamt)jwamt
		from
			(Select balance_date,
			<!--邯郸后勤集体-->
				   (case when shop_id=25 then 1 else 0 end)*(trade_amt) hdamt,
			<!--枫林-->
				   (case when shop_id=26 then 1 else 0 end)*(trade_amt) flamt,
			<!--张江-->
				   (case when shop_id=110 then 1 else 0 end)*(trade_amt) zjamt,
			<!--江湾-->	   
				   (case when shop_id=126 then 1 else 0 end)*(trade_amt) jwamt,
			<!--邯郸后勤集体-->
				   (case when shop_id=25 then 1 else 0 end)*(trade_num) hdnum,
			<!--枫林-->
				   (case when shop_id=26 then 1 else 0 end)*(trade_num) flnum,
			<!--张江-->
				   (case when shop_id=110 then 1 else 0 end)*(trade_num) zjnum,
			<!--江湾-->	   
				   (case when shop_id=126 then 1 else 0 end)*(trade_num) jwnum
			from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE where dept_id=1 
			and balance_date>=:begindate and not(balance_date>:enddate))t
		group by balance_date
  </sql-query>
  
  <!--各校区营业情况对比（金额和笔数）(按月份统计) -->
  <sql-query name="AreaSalesCompareMonthSQL">
  <return-scalar type="string" column="balance_date"/>
  <return-scalar type="float" column="hdamt"/>
  <return-scalar type="float" column="flamt"/>
  <return-scalar type="float" column="zjamt"/>
  <return-scalar type="float" column="jwamt"/>
  <return-scalar type="integer" column="hdnum"/>
  <return-scalar type="integer" column="flnum"/>
  <return-scalar type="integer" column="zjnum"/>
  <return-scalar type="integer" column="jwnum"/>
		select balance_date,sum(hdnum)hdnum,sum(flnum)flnum,sum(zjnum)zjnum,sum(jwnum)jwnum,
				sum(hdamt)hdamt,sum(flamt)flamt,sum(zjamt)zjamt,sum(jwamt)jwamt
		from
			(Select substr(balance_date,1,6)balance_date,
			<!--邯郸后勤集体-->
				   (case when shop_id=25 then 1 else 0 end)*(trade_amt) hdamt,
			<!--枫林-->
				   (case when shop_id=26 then 1 else 0 end)*(trade_amt) flamt,
			<!--张江-->
				   (case when shop_id=110 then 1 else 0 end)*(trade_amt) zjamt,
			<!--江湾-->	   
				   (case when shop_id=126 then 1 else 0 end)*(trade_amt) jwamt,
			<!--邯郸后勤集体-->
				   (case when shop_id=25 then 1 else 0 end)*(trade_num) hdnum,
			<!--枫林-->
				   (case when shop_id=26 then 1 else 0 end)*(trade_num) flnum,
			<!--张江-->
				   (case when shop_id=110 then 1 else 0 end)*(trade_num) zjnum,
			<!--江湾-->	   
				   (case when shop_id=126 then 1 else 0 end)*(trade_num) jwnum
			from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE where dept_id=1 
			and substr(balance_date,1,6)>=:begindate 
			and not(substr(balance_date,1,6)>:enddate))t
		group by balance_date
  </sql-query>

  <!--各商户营业情况对比(按日期)-->
  <sql-query name="ShopCompareSQL">
  	<return entity-name="ShopCompareStat"></return>
		select rsb.shop_id shopid,rsb.shop_name shopname,
		       sum(rsb.trade_Num)tradenum,
		       sum(rsb.trade_Amt)tradeamt,
		       sum(rsb.mng_Amt)mngamt,
		       sum(rsb.total_Amt)totalamt      
		from ykt_cur.T_Tif_Report_Shop_Balance rsb 
		where rsb.balance_Date>=:begindate and not(rsb.balance_Date>:enddate) and rsb.shop_Id in :shopid
		group by rsb.shop_Id,rsb.shop_Name		
  </sql-query>
  
  
  <!-- Pos营业情况分天汇总-->
  <!--有设备，有分餐 -->
  <sql-query name="ShopPosDevMeal">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="string" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="string" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
   <return-scalar type="integer" column="dflag"/>
     select * from ( 
				select shop_id,shop_name,dept_id,device_id,device_name, 
				meal_id,meal_name,sum(trade_count) trade_count ,sum(trade_amt) trade_amt,sum(mng_amt) mng_amt ,sum(total_amt) total_amt, 
				case device_id when 0 then 1 else 2 end dflag from ( 
				select operate_date,shop_id,shop_name,dept_id,0 as device_id,'' as device_name,-1 as meal_id 
				,'' as meal_name,sum(trade_num) as trade_count,sum(trade_amt) trade_amt,sum(mng_amt) mng_amt,
				sum(total_amt) as total_amt 
				from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE_01 B LEFT JOIN YKT_CUR.T_PIF_TRADECODE T ON (T.TRADECODE=B.SERI_TYPE) 
				where operate_date>=:begindate and not( operate_date >:enddate ) AND (T.ACCOUNT_FLAG=1 OR T.ACCOUNT_FLAG IS NULL) 
				group by operate_date,shop_id,shop_name,dept_id 
				union all 
				select operate_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name,  
				sum(trade_count),sum(trade_fee) as trade_amt,sum(mng_fee) as mng_amt,sum(total_fee) as total_amt  
				from YKT_CUR.T_TIF_REPORT_DEVICE_MEAL_01 a 
				left join ykt_cur.t_cif_shop b 
				on a.shop_id=b.shop_id 
				where a.operate_date>=:begindate and not(a.operate_date >:enddate)
				group by operate_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name ) t 
				where (t.Dept_id in (:deptid) or t.Shop_id in (:shopid) )
				group by t.shop_id,t.shop_name,t.device_id,t.device_name,t.meal_id,t.meal_name,t.dept_id ) t 
				order by shop_id,dflag,device_name,meal_id
	</sql-query>			
	
	<!--无设备无分餐 -->
	<sql-query name="ShopPos">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="integer" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="integer" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
     SELECT shop_id,shop_name,dept_id,0 as device_id,'' as  device_name ,-1 as  meal_id ,'' as  meal_name ,sum(Trade_num) as trade_count, 
				sum(Trade_amt) as  trade_amt,sum(Mng_amt) as   mng_amt,sum(Total_amt) as  total_amt 
				from 
				( 
				  SELECT a.Shop_id,b.Shop_name,a.Dept_id, 
				  sum(trade_num) trade_num,sum(Trade_amt) Trade_amt, 
				  sum(Mng_amt) Mng_amt, sum(Total_amt) Total_amt,
				  operate_date,''  FROM YKT_CUR.T_TIF_Report_shop_balance_01 a 
				  left join YKT_CUR.T_PIF_TRADECODE T on (T.TRADECODE=a.SERI_TYPE )  
				  ,ykt_cur.t_cif_shop b 
				  WHERE  operate_date>=? and not(operate_date >?) and a.shop_id=b.shop_id 
				  AND (T.ACCOUNT_FLAG=1 or T.ACCOUNT_FLAG IS NULL) 
				  and  (a.Dept_id in (?) or a.Shop_id in (?) ) 
				  group by a.operate_date,a.shop_id,b.shop_name,a.dept_id 
				) T group by shop_id,shop_name,dept_id order by dept_id,shop_name
	</sql-query>			
	
	
  <!--有设备无分餐 -->
	<sql-query name="ShopPosDev">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="string" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="string" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
   <return-scalar type="integer" column="dflag"/>
     select * from ( 
				select shop_id,shop_name,dept_id,device_id,device_name, 
				-1,'',sum(trade_count) trade_count,sum(trade_amt) trade_amt,sum(mng_amt)mng_amt,sum(total_amt) total_amt, 
				case device_id when 0 then 1 else 2 end dflag from 
				(
				 select operate_date,shop_id,shop_name,dept_id,0 as device_id,'' as device_name,-1 as meal_id 
				 ,'' as meal_name,sum(trade_num) as trade_count,sum(trade_amt) trade_amt,sum(mng_amt) mng_amt,
				 sum(total_amt) total_amt from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE_01 B LEFT JOIN YKT_CUR.T_PIF_TRADECODE T 
				 ON (T.TRADECODE=B.SERI_TYPE ) 
				 where operate_date >=:begindate and not(operate_date >:enddate) AND (T.ACCOUNT_FLAG=1 OR T.ACCOUNT_FLAG IS NULL) 
				 group by operate_date,shop_id,shop_name,dept_id 
				 union all 
				 select operate_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name,  
				 sum(trade_count) trade_count,sum(trade_fee) as trade_amt,sum(mng_fee) as mng_amt,
				 sum(total_fee) as total_amt from YKT_CUR.T_TIF_REPORT_DEVICE_MEAL_01 a 
				 left join ykt_cur.t_cif_shop b on a.shop_id=b.shop_id 
				 where a.operate_date>=:begindate and not(a.operate_date >:enddate)
				 group by operate_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name 
				) t 
				where (t.Dept_id in (:deptid) or t.Shop_id in (:shopid)) 
				group by t.shop_id,t.shop_name,t.device_id,t.device_name,t.dept_id ) t 
				order by shop_id,dflag,device_name
	</sql-query>			
	
	 <!--无设备有分餐 -->
	<sql-query name="ShopPosMeal">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="string" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="string" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
    select shop_id,shop_name,dept_id,0,'' 
				,meal_id,meal_name,sum(trade_count) trade_count,sum(trade_amt) trade_amt,sum(mng_amt) mng_amt,sum(total_amt)total_amt from 
				(
				 select operate_date,shop_id,shop_name,dept_id,0 as device_id,'' as device_name,-1 as meal_id 
				 ,'' as meal_name,sum(trade_num) as trade_count,sum(trade_amt) trade_amt,sum(mng_amt) mng_amt,
				 sum(total_amt) total_amt 
				 from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE_01 B LEFT JOIN YKT_CUR.T_PIF_TRADECODE T 
				 ON (T.TRADECODE=B.SERI_TYPE) 
				 where operate_date>=:begindate and not(operate_date >:enddate) AND (T.ACCOUNT_FLAG=1 OR T.ACCOUNT_FLAG IS NULL) 
				 group by operate_date,shop_id,shop_name,dept_id 
				 union all 
				 select operate_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name,  
				 sum(trade_count) trade_count,sum(trade_fee) as trade_amt,sum(mng_fee) as mng_amt,
				 sum(total_fee) as total_amt from YKT_CUR.T_TIF_REPORT_DEVICE_MEAL_01 a 
				 left join ykt_cur.t_cif_shop b on a.shop_id=b.shop_id 
				 where a.operate_date>=:begindate and not(a.operate_date >:enddate )
				 group by operate_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name 
				) t 
				where (t.Dept_id in (:deptid) or t.Shop_id in (:shopid)) 
				group by t.shop_id,t.shop_name,t.meal_id,t.meal_name,t.dept_id 
				order by shop_id,meal_id
	</sql-query>			
	
	
	<!--商户营业结算表 -->
	<!--有设备有分餐 -->
   <sql-query name="ShopBalanceDevMeal">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="string" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="string" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
   <return-scalar type="integer" column="dflag"/>
	select * from (
				select shop_id,shop_name,dept_id,device_id,device_name,  
				meal_id,meal_name,sum(trade_count) trade_count,sum(trade_amt) trade_amt ,sum(mng_amt) mng_amt ,sum(total_amt) total_amt, 
				case device_id when 0 then 1 else 2 end dflag from  
				( 
				 select balance_date,shop_id,shop_name,dept_id,0 as device_id,'' as device_name,-1 as meal_id  
				 ,'' as meal_name,trade_num as trade_count,trade_amt,mng_amt,total_amt  
				 from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE B LEFT JOIN YKT_CUR.T_PIF_TRADECODE T ON (T.TRADECODE=B.SERI_TYPE)  
				 where balance_date>=:begindate and not (balance_date >:enddate)  AND (T.ACCOUNT_FLAG=1 OR T.ACCOUNT_FLAG IS NULL)  
				 union all  
				 select balance_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name,   
				 trade_count,trade_fee as trade_amt,mng_fee as mng_amt,total_fee as total_amt   
				 from YKT_CUR.T_TIF_REPORT_DEVICE_MEAL a  
				 left join ykt_cur.t_cif_shop b  
				 on a.shop_id=b.shop_id  
				 where a.balance_date>=:begindate and not(a.balance_date>:enddate)
				) t  
				where (t.Dept_id in (:deptid)   or t.Shop_id in (:shopid))  
				group by t.shop_id,t.shop_name,t.device_id,t.device_name,t.meal_id,t.meal_name,t.dept_id ) t  
				order by shop_id,dflag,device_name,meal_id
	</sql-query>
	
   <!--有设备无分餐 -->
   <sql-query name="ShopBalanceDev">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="string" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="string" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
   <return-scalar type="integer" column="dflag"/>
	select * from (  
				select shop_id,shop_name,dept_id,device_id,device_name,  
				-1,'',sum(trade_count) trade_count,sum(trade_amt) trade_amt ,sum(mng_amt) mng_amt,sum(total_amt) total_amt,  
				case device_id when 0 then 1 else 2 end dflag from  
				( 
				 select balance_date,shop_id,shop_name,dept_id,0 as device_id,'' as device_name,-1 as meal_id  
				 ,'' as meal_name,trade_num as trade_count,trade_amt,mng_amt,total_amt  
				 from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE B LEFT JOIN YKT_CUR.T_PIF_TRADECODE T ON (T.TRADECODE=B.SERI_TYPE )  
				 where balance_date>=:begindate and  not(balance_date>:enddate) AND (T.ACCOUNT_FLAG=1 OR T.ACCOUNT_FLAG IS NULL)  
				 union all  
				 select balance_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name,   
				 trade_count,trade_fee as trade_amt,mng_fee as mng_amt,total_fee as total_amt   
				 from YKT_CUR.T_TIF_REPORT_DEVICE_MEAL a  
				 left join ykt_cur.t_cif_shop b  
				 on a.shop_id=b.shop_id  
				 where a.balance_date>=:begindate and not(a.balance_date>:enddate)  
				) t  
				where (t.Dept_id in (:deptid) or t.Shop_id in (:shopid))  
				group by t.shop_id,t.shop_name,t.device_id,t.device_name,t.dept_id ) t  
				order by shop_id,dflag,device_name
	</sql-query>
	
	<!--无设备有分餐 -->
   <sql-query name="ShopBalanceMeal">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="string" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="string" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
  
	select shop_id,shop_name,dept_id,0,'' 
				,meal_id,meal_name,sum(trade_count) trade_count,sum(trade_amt) trade_amt,sum(mng_amt) mng_amt,sum(total_amt) total_amt from  
				( 
				 select balance_date,shop_id,shop_name,dept_id,0 as device_id,'' as device_name,-1 as meal_id  
				 ,'' as meal_name,trade_num as trade_count,trade_amt,mng_amt,total_amt  
				 from YKT_CUR.T_TIF_REPORT_SHOP_BALANCE B LEFT JOIN YKT_CUR.T_PIF_TRADECODE T ON (T.TRADECODE=B.SERI_TYPE)  
				 where balance_date>=:begindate and not(balance_date>:enddate) AND (T.ACCOUNT_FLAG=1 OR T.ACCOUNT_FLAG IS NULL)  
				 union all 
				 select balance_date,a.shop_id,b.shop_name,b.dept_id,a.device_id,a.device_name,a.meal_id,a.meal_name,   
				 trade_count,trade_fee as trade_amt,mng_fee as mng_amt,total_fee as total_amt   
				 from YKT_CUR.T_TIF_REPORT_DEVICE_MEAL a  
				 left join ykt_cur.t_cif_shop b  
				 on a.shop_id=b.shop_id  
				 where a.balance_date>=:begindate and not(a.balance_date>:enddate)  
				) t  
				where (t.Dept_id in (:deptid) or t.Shop_id in (:shopid))  
				group by t.shop_id,t.shop_name,t.meal_id,t.meal_name,t.dept_id  
				order by shop_id,meal_id
	</sql-query>
	
	
	<!--无设备无分餐 -->
   <sql-query name="ShopBalance">
   <return-scalar type="string" column="shop_id"/>
   <return-scalar type="string" column="shop_name"/>
   <return-scalar type="string" column="dept_id"/>
   <return-scalar type="string" column="device_id"/>
   <return-scalar type="string" column="device_name"/>
   <return-scalar type="string" column="meal_id"/>
   <return-scalar type="string" column="meal_name"/>
   <return-scalar type="integer" column="trade_count"/>
   <return-scalar type="float" column="trade_amt"/>
   <return-scalar type="float" column="mng_amt"/>
   <return-scalar type="float" column="total_amt"/>
 
	SELECT Shop_id,Shop_name,Dept_id,0,'',-1,'',sum(Trade_num) trade_num,  
				sum(Trade_amt) trade_amt,sum(Mng_amt) mng_amt,sum(Total_amt) total_amt  
				from  
				(  
				  SELECT a.Shop_id,b.Shop_name,a.Dept_id,  
				  case when t.account_flag=1 then Trade_num else 0 end trade_num,  
				  case when t.account_flag=1 then Trade_amt else 0 end Trade_amt,  
				  case when t.account_flag=1 then Mng_amt else 0 end Mng_amt,  
				  case when t.account_flag=1 then Total_amt else 0 end Total_amt, 
				  Balance_date,Data_sign  FROM YKT_CUR.T_TIF_Report_shop_balance a  
				  left join YKT_CUR.T_PIF_TRADECODE T on (T.TRADECODE=a.SERI_TYPE )   
				  ,ykt_cur.t_cif_shop b  
				  WHERE  Balance_date>=:begindate and not(Balance_date>:enddate) and a.shop_id=b.shop_id  
				  AND (T.ACCOUNT_FLAG=1 or T.ACCOUNT_FLAG IS NULL)  
				  and  (a.Dept_id in (:deptid) or a.Shop_id in (:shopid))  
				) T  
				group by shop_id,shop_name,dept_id order by dept_id,shop_name
	</sql-query>
    
    
</hibernate-mapping>
