<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<!-- DO NOT EDIT: This is a generated file that is synchronized -->
<!-- by MyEclipse Hibernate tool integration.                   -->
<!-- Created Wed Oct 19 14:11:59 CST 2005                         -->
<hibernate-mapping package="com.kingstargroup.advquery.tradeserial" schema="ykt_cur">

    <class name="TTifTradeserial" table="T_TIF_TRADESERIAL">
        <id name="serialNo" column="SERIAL_NO" type="integer">
            <generator class="assigned"/>
        </id>
 
        <property name="otherSeriNo" column="OTHER_SERI_NO" type="integer" />
        <property name="serialType" column="SERIAL_TYPE" type="integer" />
        <property name="serialState" column="SERIAL_STATE" type="integer" />
        <property name="operateDate" column="OPERATE_DATE" type="string" />
        <property name="operateTime" column="OPERATE_TIME" type="string" />
        <property name="collectDate" column="COLLECT_DATE" type="string" />
        <property name="collectTime" column="COLLECT_TIME" type="string" />
        <property name="enteractDate" column="ENTERACT_DATE" type="string" />
        <property name="enteractTime" column="ENTERACT_TIME" type="string" />
        <property name="maindeviceId" column="MAINDEVICE_ID" type="integer" />
        <property name="deviceId" column="DEVICE_ID" type="integer" />
        <property name="devphy999Id" column="DEVPHY999_ID" type="string" />
        <property name="showid" column="SHOWID" type="string" />
        <property name="cardId" column="CARD_ID" type="integer" />
        <property name="purseId" column="PURSE_ID" type="integer" />
        <property name="tradeCount" column="TRADE_COUNT" type="integer" />
        <property name="tradeFee" column="TRADE_FEE" type="double" />
        <property name="inBalance" column="IN_BALANCE" type="double" />
        <property name="outBalance" column="OUT_BALANCE" type="double" />
        <property name="depositFee" column="DEPOSIT_FEE" type="double" />
        <property name="inFee" column="IN_FEE" type="double" />
        <property name="costFee" column="COST_FEE" type="double" />
        <property name="boardfee" column="BOARDFEE" type="double" />
        <property name="oldpwd" column="OLDPWD" type="string" />
        <property name="newpwd" column="NEWPWD" type="string" />
        <property name="customerId" column="CUSTOMER_ID" type="integer" />
        <property name="operCode" column="OPER_CODE" type="string" />
        <property name="outAccountId" column="OUT_ACCOUNT_ID" type="string" />
        <property name="inAccountId" column="IN_ACCOUNT_ID" type="string" />
        <property name="bactId" column="B_ACT_ID" type="string" />
        <property name="sysId" column="SYS_ID" type="integer" />
        <property name="conditionId" column="CONDITION_ID" type="integer" />
        <property name="isOnline" column="IS_ONLINE" type="string" />
        <property name="tmark" column="TMARK" type="integer" />
        <property name="devAuth" column="DEV_AUTH" type="string" />
        <property name="comuVer" column="COMU_VER" type="integer" />
        <property name="runReason" column="RUN_REASON" type="integer" />
        <property name="crc" column="CRC" type="string" />
        <property name="ecode" column="ECODE" type="integer" />
        <property name="reviseserialNo" column="REVISESERIAL_NO" type="integer" />
        <property name="reserve1" column="RESERVE_1" type="string" />
        <property name="reserve2" column="RESERVE_2" type="string" />
        <property name="reserve3" column="RESERVE_3" type="string" />
    </class>
    
    <!--镆愪竴鍙貌os链哄湪涓€娈垫椂闂村唴镄勬秷璐规儏鍐?(镌夋棩链熻寖锲寸稗璁?-->
    <class entity-name="ConsumeStatByPosResult">
    	<id name="balance_date" type="string">
    		<generator class="assigned"></generator>
    	</id>
    	<property name="tradefee" type="float"></property>
    </class>
    
    <!--镆愪竴鍙貌os链哄湪涓€娈垫椂闂村唴镄勬秷璐规儏鍐?(镌夋棩链熻寖锲寸稗璁?-->
    <class entity-name="ConsumeStatByPosMonthResult">
    	<id name="balance_date" type="string">
    		<generator class="assigned"></generator>
    	</id>
    	<property name="tradefee" type="float"></property>
    </class>
    
    <!--涓汉榔呭喌宁愬垓鍙桦姩榔呭喌 (镌夋棩链熻寖锲存煡璇?-->
    <class entity-name="AllAccountChangeStatByNoResult">
    	<id name="balance_date" type="string">
    		<generator class="assigned"></generator>
    	</id>
    	<property name="saving" type="float"></property>
    	<property name="consume" type="float"></property>
    	<property name="ensure" type="float"></property>
    </class>
    
    <!--涓汉榔呭喌宁愬垓鍙桦姩榔呭喌 (镌夋湀浠借寖锲存煡璇?-->
    <class entity-name="AllAccountChangeStatByNoMonthResult">
    	<id name="balance_date" type="string">
    		<generator class="assigned"></generator>
    	</id>
    	<property name="saving" type="float"></property>
    	<property name="consume" type="float"></property>
    	<property name="ensure" type="float"></property>
    </class>
    
    <!--锏规畩浜哄忐镆ユ垒锛堟辉娈垫椂闂村唴骞冲潎娑堣垂阅战澶т簬锛屽皬浜庯纴骞冲潎娑堣垂娆℃暟澶т簬锛屽皬浜庯级-->
    <class entity-name="SpecialListResult">
    	<id name="stuemp_no" type="string">
    		<generator class="assigned"></generator>
    	</id>
    	<property name="cut_name" type="string"></property>
    	<property name="dept_name" type="string"></property>
    	<property name="s_name" type="string"></property>
    	<property name="tradefee" type="float"></property>
    	<property name="tradenum" type="integer"></property>
    	<property name="avgnum" type="float"></property>
    	<property name="avgfee" type="float"></property>
    </class>
    
    
    <!--镆愪竴鍙貌os链哄湪涓€娈垫椂闂村唴镄勬秷璐规儏鍐?(镌夋棩链熻寖锲寸稗璁?-->
    <sql-query name="ConsumeStatByPosSQL">
    	<return entity-name="ConsumeStatByPosResult"></return>
    <!-- return-scalar type="string" column="operate_date"/>
    <return-scalar type="float" column="tradefee"/-->
		select  operate_date as balance_date,tradefee from(select operate_date,sum(trade_fee) tradefee
		from YKT_CUR.T_TIF_TRADESERIAL 
		where serial_type=930031 and devphy999_id=:posid 
		and operate_date>=:begindate and not (operate_date>:enddate)
		group by operate_date
		union
		select operate_date,sum(trade_fee) tradefee
		from YKT_HIS.T_TIF_TRADESERIAL_HIS
		where serial_type=930031 and devphy999_id=:posid
		and operate_date>=:begindate and not (operate_date>:enddate)
		group by operate_date)t
		order by operate_date    
    </sql-query>
    
    <!--镆愪竴鍙貌os链哄湪涓€娈垫椂闂村唴镄勬秷璐规儏鍐?(镌夋湀浠借寖锲寸稗璁?-->
    <sql-query name="ConsumeStatByPosMonthSQL">
    	<return entity-name="ConsumeStatByPosMonthResult"></return>
    <!-- return-scalar type="string" column="operate_date"/>
    <return-scalar type="float" column="tradefee"/-->
		select  operate_date as balance_date,tradefee from(select substr(operate_date,1,6)operate_date,sum(trade_fee) tradefee
		from YKT_CUR.T_TIF_TRADESERIAL 
		where serial_type=930031 and devphy999_id=:posid 
		and substr(operate_date,1,6)>=:begindate and not (substr(operate_date,1,6)>:enddate)
		group by substr(operate_date,1,6)
		union
		select substr(operate_date,1,6)operate_date,sum(trade_fee) tradefee
		from YKT_HIS.T_TIF_TRADESERIAL_HIS
		where serial_type=930031 and devphy999_id=:posid
		and substr(operate_date,1,6)>=:begindate and not (substr(operate_date,1,6)>:enddate)
		group by substr(operate_date,1,6))t
		order by operate_date    
    </sql-query>
    
    <!--涓汉榔呭喌宁愬垓鍙桦姩榔呭喌 (镌夋棩链熻寖锲存煡璇?-->
    <sql-query name="AllAccountChangeStatByNoSQL">
    	<return entity-name="AllAccountChangeStatByNoResult"></return>
    <!-- return-scalar type="string" column="operate_date"/>
    <return-scalar type="float" column="saving"/>
    <return-scalar type="float" column="consume"/>
    <return-scalar type="float" column="ensure"/-->
		select * from (select operate_date as balance_date,
			    (sum(transfer)+sum(cash)+sum(Pos)+sum(outlay)+sum(ticket)) as saving,
				sum(consume) consume,
				sum(ensure)ensure
		from
			(Select a.operate_date,
			<!--鍦埚瓨杞处-->
			(case when a.serial_type =240001 then 1 else 0 end )*(a.trade_fee) transfer,	
			<!--鐜伴噾鍏呭€?->	   
			(case when a.serial_type =847106 then 1 else 0 end )*(a.trade_fee) cash, 
			<!--Pos鍏呭€?->
			(case when a.serial_type =930034 then 1 else 0 end )*(a.trade_fee) Pos,
			<!--缁忚垂链厖炼?->
			(case when a.serial_type =8471062 then 1 else 0 end )*(a.trade_fee) outlay, 
			<!--鏀エ鍏呭€?->
			(case when a.serial_type =8471063 then 1 else 0 end )*(a.trade_fee) ticket,
			<!--娑堣垂-->
			(case when a.serial_type =930031 then 1 else 0 end )*(a.trade_fee) consume,
			<!--鎶奸噾-->
			(case when a.serial_type =9003 then 1 else 0 end)*(a.trade_fee) ensure
			from YKT_CUR.T_TIF_TRADESERIAL a,YKT_CUR.T_PIF_CARD b,YKT_CUR.T_CIF_CUSTOMER cust
			where a.card_id=b.card_id and cust.cut_id=b.cosumer_id and cust.cut_id=:custid
			and operate_date>=:begindate and not(operate_date>:enddate))t
		group by operate_date
    	union
		select operate_date as balance_date,
			    (sum(transfer)+sum(cash)+sum(Pos)+sum(outlay)+sum(ticket)) as saving,
				sum(consume) consume,
				sum(ensure)ensure
		from
			(Select a.operate_date,
			<!--鍦埚瓨杞处-->
			(case when a.serial_type =240001 then 1 else 0 end )*(a.trade_fee) transfer,	
			<!--鐜伴噾鍏呭€?->	   
			(case when a.serial_type =847106 then 1 else 0 end )*(a.trade_fee) cash, 
			<!--Pos鍏呭€?->
			(case when a.serial_type =930034 then 1 else 0 end )*(a.trade_fee) Pos,
			<!--缁忚垂链厖炼?->
			(case when a.serial_type =8471062 then 1 else 0 end )*(a.trade_fee) outlay, 
			<!--鏀エ鍏呭€?->
			(case when a.serial_type =8471063 then 1 else 0 end )*(a.trade_fee) ticket,
			<!--娑堣垂-->
			(case when a.serial_type =930031 then 1 else 0 end )*(a.trade_fee) consume,
			<!--鎶奸噾-->
			(case when a.serial_type =9003 then 1 else 0 end)*(a.trade_fee) ensure
			from ykt_his.t_tif_TRADESERIAL_his a,YKT_CUR.T_PIF_CARD b,YKT_CUR.T_CIF_CUSTOMER cust
			where a.card_id=b.card_id and cust.cut_id=b.cosumer_id and cust.cut_id=:custid
			and operate_date>=:begindate and not(operate_date>:enddate))t
		group by operate_date) ss
		order by balance_date

    </sql-query>
    <!--涓汉榔呭喌宁愬垓鍙桦姩榔呭喌 (镌夋湀浠借寖锲存煡璇?-->
    <sql-query name="AllAccountChangeStatByNoMonthSQL">
    	<return entity-name="AllAccountChangeStatByNoMonthResult"></return>
    <!-- return-scalar type="string" column="operate_date"/>
    <return-scalar type="float" column="saving"/>
    <return-scalar type="float" column="consume"/>
    <return-scalar type="float" column="ensure"/-->
		select * from (select operate_date as balance_date,
			    (sum(transfer)+sum(cash)+sum(Pos)+sum(outlay)+sum(ticket)) as saving,
				sum(consume) consume,
				sum(ensure)ensure
		from
			(Select substr(a.operate_date,1,6)operate_date,
			<!--鍦埚瓨杞处-->
			(case when a.serial_type =240001 then 1 else 0 end )*(a.trade_fee) transfer,	
			<!--鐜伴噾鍏呭€?->	   
			(case when a.serial_type =847106 then 1 else 0 end )*(a.trade_fee) cash, 
			<!--Pos鍏呭€?->
			(case when a.serial_type =930034 then 1 else 0 end )*(a.trade_fee) Pos,
			<!--缁忚垂链厖炼?->
			(case when a.serial_type =8471062 then 1 else 0 end )*(a.trade_fee) outlay, 
			<!--鏀エ鍏呭€?->
			(case when a.serial_type =8471063 then 1 else 0 end )*(a.trade_fee) ticket,
			<!--娑堣垂-->
			(case when a.serial_type =930031 then 1 else 0 end )*(a.trade_fee) consume,
			<!--鎶奸噾-->
			(case when a.serial_type =9003 then 1 else 0 end)*(a.trade_fee) ensure
			from YKT_CUR.T_TIF_TRADESERIAL a,YKT_CUR.T_PIF_CARD b,YKT_CUR.T_CIF_CUSTOMER cust
			where a.card_id=b.card_id and cust.cut_id=b.cosumer_id and cust.cut_id=:custid
			and substr(a.operate_date,1,6)>=:begindate and not(substr(a.operate_date,1,6)>:enddate))t
		group by operate_date
		union
		select operate_date as balance_date,
			    (sum(transfer)+sum(cash)+sum(Pos)+sum(outlay)+sum(ticket)) as saving,
				sum(consume) consume,
				sum(ensure)ensure
		from
			(Select substr(a.operate_date,1,6)operate_date,
			<!--鍦埚瓨杞处-->
			(case when a.serial_type =240001 then 1 else 0 end )*(a.trade_fee) transfer,	
			<!--鐜伴噾鍏呭€?->	   
			(case when a.serial_type =847106 then 1 else 0 end )*(a.trade_fee) cash, 
			<!--Pos鍏呭€?->
			(case when a.serial_type =930034 then 1 else 0 end )*(a.trade_fee) Pos,
			<!--缁忚垂链厖炼?->
			(case when a.serial_type =8471062 then 1 else 0 end )*(a.trade_fee) outlay, 
			<!--鏀エ鍏呭€?->
			(case when a.serial_type =8471063 then 1 else 0 end )*(a.trade_fee) ticket,
			<!--娑堣垂-->
			(case when a.serial_type =930031 then 1 else 0 end )*(a.trade_fee) consume,
			<!--鎶奸噾-->
			(case when a.serial_type =9003 then 1 else 0 end)*(a.trade_fee) ensure
			from ykt_his.t_tif_TRADESERIAL_his a,YKT_CUR.T_PIF_CARD b,YKT_CUR.T_CIF_CUSTOMER cust
			where a.card_id=b.card_id and cust.cut_id=b.cosumer_id and cust.cut_id=:custid
			and substr(a.operate_date,1,6)>=:begindate and not(substr(a.operate_date,1,6)>:enddate))t
		group by operate_date)ss
		order by balance_date
		
    
    </sql-query>
    
    <!--锏规畩浜哄忐镆ユ垒锛堟辉娈垫椂闂村唴骞冲潎娑堣垂阅战澶т簬锛屽皬浜庯纴骞冲潎娑堣垂娆℃暟澶т簬锛屽皬浜庯级-->
    <sql-query name="SpecialListSQL">
    	<return entity-name="SpecialListResult"></return>
		Select cust.STUEMP_NO,
			   cust.CUT_NAME,
			   dept.DEPT_NAME,
			   spec.S_NAME,
			   tradefee,
			   tradenum,
			   avgnum,
			   avgfee
		from(
			 Select customer_id,
			 		sum(trade_fee)tradefee,
					count(*) tradenum,
					count(*)/:daterange avgnum,
					(sum(trade_fee)/count(*)) avgfee
			 from YKT_HIS.T_TIF_TRADESERIAL_HIS
			 where serial_type=930031 
			  	   and serial_state=2
			  	   and bak_date>=:begindate
			  	   and not(bak_date>:enddate)
				   group by customer_id
				   having sum(trade_fee)/count(*)>=:bfee
				   		and not(sum(trade_fee)/count(*)>:efee)
				   		and (count(*)/:daterange)>=:bnum
				   		and not((count(*)/:daterange)>:enum)) his,
				   YKT_CUR.T_CIF_CUSTOMER cust,
				   YKT_CUR.T_CIF_SPECIALITY spec,
				   YKT_CUR.T_CIF_DEPT dept
		where cust.cut_id=his.customer_id
			  and cust.s_code=spec.s_code
			  and cust.CLASSDEPT_NO=dept.DEPT_CODE
    </sql-query>
    
</hibernate-mapping>
