/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Tue Nov 22 13:58:51 CST 2005 by MyEclipse Hibernate Tool.
 */
package com.kingstargroup.advquery.hibernate.user;

import java.io.Serializable;

/**
 * A class that represents a row in the T_LEADQUERY_FUNCLIST table. 
 * You can customize the behavior of this class by editing the class, {@link TLeadqueryFunclist()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractTLeadqueryFunclist 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.String funcCode;

    /** The value of the simple funcName property. */
    private java.lang.String funcName;

    /** The value of the simple funcUrl property. */
    private java.lang.String funcUrl;

    /**
     * Simple constructor of AbstractTLeadqueryFunclist instances.
     */
    public AbstractTLeadqueryFunclist()
    {
    }

    /**
     * Constructor of AbstractTLeadqueryFunclist instances given a simple primary key.
     * @param funcCode
     */
    public AbstractTLeadqueryFunclist(java.lang.String funcCode)
    {
        this.setFuncCode(funcCode);
    }

    /**
     * Return the simple primary key value that identifies this object.
     * @return java.lang.String
     */
    public java.lang.String getFuncCode()
    {
        return funcCode;
    }

    /**
     * Set the simple primary key value that identifies this object.
     * @param funcCode
     */
    public void setFuncCode(java.lang.String funcCode)
    {
        this.hashValue = 0;
        this.funcCode = funcCode;
    }

    /**
     * Return the value of the FUNC_NAME column.
     * @return java.lang.String
     */
    public java.lang.String getFuncName()
    {
        return this.funcName;
    }

    /**
     * Set the value of the FUNC_NAME column.
     * @param funcName
     */
    public void setFuncName(java.lang.String funcName)
    {
        this.funcName = funcName;
    }

    /**
     * Return the value of the FUNC_URL column.
     * @return java.lang.String
     */
    public java.lang.String getFuncUrl()
    {
        return this.funcUrl;
    }

    /**
     * Set the value of the FUNC_URL column.
     * @param funcUrl
     */
    public void setFuncUrl(java.lang.String funcUrl)
    {
        this.funcUrl = funcUrl;
    }

    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof TLeadqueryFunclist))
            return false;
        TLeadqueryFunclist that = (TLeadqueryFunclist) rhs;
        if (this.getFuncCode() == null || that.getFuncCode() == null)
            return false;
        return (this.getFuncCode().equals(that.getFuncCode()));
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int funcCodeValue = this.getFuncCode() == null ? 0 : this.getFuncCode().hashCode();
            result = result * 37 + funcCodeValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
