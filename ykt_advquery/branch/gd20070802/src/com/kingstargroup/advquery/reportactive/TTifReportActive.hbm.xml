<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<!-- DO NOT EDIT: This is a generated file that is synchronized -->
<!-- by MyEclipse Hibernate tool integration.                   -->
<!-- Created Wed Oct 19 14:01:02 CST 2005                         -->
<hibernate-mapping package="com.kingstargroup.advquery.reportactive">

    <class name="TTifReportActive" table="T_TIF_REPORT_ACTIVE">
        <composite-id name="id" class="TTifReportActiveKey">
            <key-property name="balanceDate" column="BALANCE_DATE" type="string"/>
            <key-property name="seriType" column="SERI_TYPE" type="integer"/>
        </composite-id>
 
        <property name="tradeNumber" column="TRADE_NUMBER" type="integer" />
        <property name="tradeAmt" column="TRADE_AMT" type="double" />
        <property name="accAddnum" column="ACC_ADDNUM" type="integer" />
        <property name="accAmt" column="ACC_AMT" type="double" />
        <property name="shopAddnum" column="SHOP_ADDNUM" type="integer" />
        <property name="shopAmt" column="SHOP_AMT" type="double" />
        <property name="depAmt" column="DEP_AMT" type="double" />
        <property name="earnAmt" column="EARN_AMT" type="double" />
        <property name="mngAmt" column="MNG_AMT" type="double" />
        <property name="costAmt" column="COST_AMT" type="double" />
        <property name="ensureAmt" column="ENSURE_AMT" type="double" />
        <property name="bankAmt" column="BANK_AMT" type="double" />
        <property name="cashAmt" column="CASH_AMT" type="double" />
        <property name="operatorCode" column="OPERATOR_CODE" type="string" />
        <property name="dataSign" column="DATA_SIGN" type="string" />
        <property name="reserve1" column="RESERVE1" type="string" />
        <property name="reserve2" column="RESERVE2" type="string" />
    </class>
    <!--卡片的发行，挂失，补办，收回数量统计(按日期范围统计) -->
	<class entity-name="CardOpenLoseBackResult">
		<id name = "balance_date" type="string">
			<generator class="assigned"></generator>
		</id>
    	<property name="opencard" type="integer"></property>
    	<property name="lose" type="integer"></property>
    	<property name="receive" type="integer"></property>
    	<property name="repair" type="integer"></property>
	</class>    
	
    <!--卡片的发行，挂失，补办，收回数量统计(按月份范围统计) -->
	<class entity-name="CardOpenLoseBackMonthResult">
		<id name = "balance_date" type="string">
			<generator class="assigned"></generator>
		</id>
    	<property name="opencard" type="integer"></property>
    	<property name="lose" type="integer"></property>
    	<property name="receive" type="integer"></property>
    	<property name="repair" type="integer"></property>
	</class>   
	
	<!--开户，销户情况统计－按日期范围统计-->
	<class entity-name="CardOpenDestroyStatResult">
		<id name="balance_date" type="string">
			<generator class="assigned"></generator>
		</id>
		<property name="opencard" type="integer"></property>
		<property name="destorycard" type="integer"></property>
	</class>
	 
	<!--开户，销户情况统计－按月份范围统计-->
	<class entity-name="CardOpenDestroyStatMonthResult">
		<id name="balance_date" type="string">
			<generator class="assigned"></generator>
		</id>
		<property name="opencard" type="integer"></property>
		<property name="destorycard" type="integer"></property>
	</class>
	 
	    	
    <!--整体帐务变动情况统计，包括存款，消费，押金。(按日期范围统计) -->
    <class entity-name="AllAccountChangeDayResult">
    	<id name="balance_date" type="string">
    		<generator class="assigned"></generator>
    	</id>
    	<property name="saving" type="float"></property>
    	<property name="consume" type="float"></property>
    	<property name="ensure" type="float"></property>
    </class>
    
    <!--整体帐务变动情况统计，包括存款，消费，押金。(按月份范围统计) -->
    <class entity-name="AllAccountChangeMonthResult">
    	<id name="balance_date" type="string">
    		<generator class="assigned"></generator>
    	</id>
    	<property name="saving" type="float"></property>
    	<property name="consume" type="float"></property>
    	<property name="ensure" type="float"></property>
    </class>
    
    <!--卡片的发行，挂失，补办，收回数量统计(按日期范围统计) -->
    <sql-query name="CardOpenLoseBackSQl">
    	<return entity-name="CardOpenLoseBackResult"></return>
    	<!-- return-scalar type="string" column="balance_date"/>
    	<return-scalar type="integer" column="opencard"/>
    	<return-scalar type="integer" column="lose"/>
    	<return-scalar type="integer" column="receive"/>
    	<return-scalar type="integer" column="repair"/-->
		Select balance_date,
			sum(opencard) opencard,
			sum(lose) lose,
			sum(receive)receive,
			sum(repair)repair
		from (Select balance_date,
			<!--发行卡数量 -->
			(case when seri_type 
				  in(847101,847116,847124,847125,847126,8471012,8471013,
				  8471014,8471242,8471243,8471244,8471262,8471263,8471264) 
				  then 1 else 0 end )*(trade_number) opencard,	
			<!--挂失卡数量-->
			(case when seri_type =930001 then 1 else 0 end )*(trade_number) lose, 
			<!--收回卡数量-->
			(case when seri_type =847105 then 1 else 0 end )*(trade_number) receive,
			<!--补办正式卡数量-->
			(case when seri_type 
				  in(847104,8471040) then 1 else 0 end )*(trade_number) repair 
			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where balance_date>=:begindate and not(balance_date>:enddate)) t
		group by balance_date
		order by balance_date
    	
    </sql-query>
    
    <!--卡片的发行，挂失，补办，收回数量统计(按月份范围统计) -->
    <sql-query name="CardOpenLoseBackMonthSQl">
    	<return entity-name="CardOpenLoseBackResult"></return>
    	<!-- return-scalar type="string" column="balance_date"/>
    	<return-scalar type="integer" column="opencard"/>
    	<return-scalar type="integer" column="lose"/>
    	<return-scalar type="integer" column="receive"/>
    	<return-scalar type="integer" column="repair"/-->
		Select balance_date,
			sum(opencard) opencard,
			sum(lose) lose,
			sum(receive)receive,
			sum(repair)repair
		from (Select substr(balance_date,1,6) balance_date,
			<!--发行卡数量 -->
			(case when seri_type 
				  in(847101,847116,847124,847125,847126,8471012,8471013,
				  8471014,8471242,8471243,8471244,8471262,8471263,8471264) 
				  then 1 else 0 end )*(trade_number) opencard,	
			<!--挂失卡数量-->
			(case when seri_type =930001 then 1 else 0 end )*(trade_number) lose, 
			<!--收回卡数量-->
			(case when seri_type =847105 then 1 else 0 end )*(trade_number) receive,
			<!--补办正式卡数量-->
			(case when seri_type 
				  in(847104,8471040) then 1 else 0 end )*(trade_number) repair 
			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where substr(balance_date,1,6)>=:begindate 
			and not(substr(balance_date,1,6)>:enddate)) t
		group by balance_date
		order by balance_date
    	
    </sql-query>
    
    <!--存款总体情况统计（笔数）按日期范围统计 -->
    <sql-query name="TotleSavingNumStatSQL">
    	<return-scalar type="string" column="balance_date"/>
    	<return-scalar type="integer" column="transfer"/>
    	<return-scalar type="integer" column="cash"/>
    	<return-scalar type="integer" column="pos"/>
    	
		select balance_date,
			sum(transfer) transfer,
			sum(cash) cash,
			sum(Pos) pos
		from (Select balance_date,
				<!--圈存转账-->
				(case when seri_type =240001 then 1 else 0 end )*(trade_number) transfer,	
				<!--现金充值,经费本，支票-->
				(case when seri_type in(847106,8471063,8471062) then 1 else 0 end )*(trade_number) cash, 
				<!--Pos充值-->
				(case when seri_type =930034 then 1 else 0 end )*(trade_number) Pos
				from YKT_CUR.T_TIF_REPORT_ACTIVE 
				where balance_date>=:begindate and not(balance_date>:enddate))t
		group by balance_date
		order by balance_date
    </sql-query>
    
    <!--存款总体情况统计（笔数）按月份范围统计 -->
    <sql-query name="TotleSavingNumStatMonthSQL">
    	<return-scalar type="string" column="balance_date"/>
    	<return-scalar type="integer" column="transfer"/>
    	<return-scalar type="integer" column="cash"/>
    	<return-scalar type="integer" column="pos"/>
     	
		select balance_date,
			sum(transfer) transfer,
			sum(cash) cash,
			sum(Pos) pos
		from (Select substr(balance_date,1,6)balance_date,
				<!--圈存转账-->
				(case when seri_type =240001 then 1 else 0 end )*(trade_number) transfer,	
				<!--现金充值，经费本，支票-->
				(case when seri_type in(847106,8471062,8471063) then 1 else 0 end )*(trade_number) cash, 
				<!--Pos充值-->
				(case when seri_type =930034 then 1 else 0 end )*(trade_number) Pos
				from YKT_CUR.T_TIF_REPORT_ACTIVE 
				where substr(balance_date,1,6)>=:begindate
				and not(substr(balance_date,1,6)>:enddate))	t
		group by balance_date
		order by balance_date
    	   
    </sql-query>
    
    <!--存款情况统计（金额统计）按日期范围统计 -->
    <sql-query name="TotleMoneySavingStatSQL">
    	<return-scalar type="string" column="balance_date"/>
    	<return-scalar type="float" column="transfer"/>
    	<return-scalar type="float" column="cash"/>
    	<return-scalar type="float" column="pos"/>
    	<return-scalar type="float" column="outlay"/>    	    	
    	<return-scalar type="float" column="ticket"/>    	
		select balance_date,
			sum(transfer) transfer,
			sum(cash) cash,
			sum(Pos) pos,
			sum(outlay) outlay,
			sum(ticket) ticket
		from (Select balance_date,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(bank_amt) transfer,	
			<!--现金充值-->	   
			(case when seri_type =847106 then 1 else 0 end )*(cash_amt) cash, 
			<!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(cash_amt) Pos,
			<!--支票充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(CHECK_ADD_AMT,0))ticket , 
			<!--经费本充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(OUTLAY_ADD_AMT,0))outlay 

			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where balance_date>=:begindate and not(balance_date>:enddate))t
		group by balance_date    	
		order by balance_date
    </sql-query>
    
    <!--存款情况统计（金额统计）按月份范围统计 -->
    <sql-query name="TotleMoneySavingStatMonthSQL">
    	<return-scalar type="string" column="balance_date"/>
    	<return-scalar type="float" column="transfer"/>
    	<return-scalar type="float" column="cash"/>
    	<return-scalar type="float" column="pos"/>
    	<return-scalar type="float" column="outlay"/>    	    	
    	<return-scalar type="float" column="ticket"/>    	
		select balance_date,
			sum(transfer) transfer,
			sum(cash) cash,
			sum(Pos) pos,
			sum(outlay) outlay,
			sum(ticket) ticket
		from (Select substr(balance_date,1,6) balance_date,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(bank_amt) transfer,	
			<!--现金充值-->	   
			(case when seri_type =847106 then 1 else 0 end )*(cash_amt) cash, 
			<!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(cash_amt) Pos,
			<!--支票充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(CHECK_ADD_AMT,0))ticket , 
			<!--经费本充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(OUTLAY_ADD_AMT,0))outlay 

			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where substr(balance_date,1,6)>=:begindate
			and not(substr(balance_date,1,6)>:enddate))	t
		group by balance_date
		order by balance_date
    	
    </sql-query>
    
    <!--存款情况统计按日期范围统计（金额和笔数） -->
    <sql-query name="TotleSavingStatSQL">
    	<return-scalar type="string" column="balance_date"/>
    	<return-scalar type="float" column="transferamt"/>
    	<return-scalar type="float" column="cashamt"/>
    	<return-scalar type="float" column="posamt"/>
    	<return-scalar type="float" column="outlayamt"/>    	    	
    	<return-scalar type="float" column="ticketamt"/>    	
    	<return-scalar type="integer" column="transfernum"/>
    	<return-scalar type="integer" column="cashnum"/>
    	<return-scalar type="integer" column="posnum"/>
		select balance_date,
			sum(transferamt) transferamt,
			sum(cashamt) cashamt,
			sum(Posamt) posamt,
			sum(outlayamt) outlayamt,
			sum(ticketamt) ticketamt,
			sum(transfernum) transfernum,
			sum(cashnum) cashnum,
			sum(Posnum) posnum
		from (Select balance_date,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(bank_amt) transferamt,	
			<!--现金充值-->	   
			(case when seri_type =847106 then 1 else 0 end )*(cash_amt) cashamt, 
			<!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(cash_amt) Posamt,
			<!--支票充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(CHECK_ADD_AMT,0))ticketamt , 
			<!--经费本充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(OUTLAY_ADD_AMT,0))outlayamt ,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(trade_number) transfernum,	
			<!--现金充值，经费本，支票-->
			(case when seri_type in(847106,8471062,8471063) then 1 else 0 end )*(trade_number) cashnum, 
			<!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(trade_number) Posnum

			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where balance_date>=:begindate and not(balance_date>:enddate))t
		group by balance_date   
		order by balance_date 	
    </sql-query>
    
    <!--存款情况统计按月份范围统计 -->
    <sql-query name="TotleSavingStatMonthSQL">
    	<return-scalar type="string" column="balance_date"/>
    	<return-scalar type="float" column="transferamt"/>
    	<return-scalar type="float" column="cashamt"/>
    	<return-scalar type="float" column="posamt"/>
    	<return-scalar type="float" column="outlayamt"/>    	    	
    	<return-scalar type="float" column="ticketamt"/>    	
    	<return-scalar type="integer" column="transfernum"/>
    	<return-scalar type="integer" column="cashnum"/>
    	<return-scalar type="integer" column="posnum"/>
		select balance_date,
			sum(transferamt) transferamt,
			sum(cashamt) cashamt,
			sum(Posamt) posamt,
			sum(outlayamt) outlayamt,
			sum(ticketamt) ticketamt,
			sum(transfernum) transfernum,
			sum(cashnum) cashnum,
			sum(Posnum) posnum
		from (Select substr(balance_date,1,6) balance_date,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(bank_amt) transferamt,	
			<!--现金充值-->	   
			(case when seri_type =847106 then 1 else 0 end )*(cash_amt) cashamt, 
			<!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(cash_amt) Posamt,
			<!--支票充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(CHECK_ADD_AMT,0))ticketamt , 
			<!--经费本充值-->
			(case when seri_type =847106 then 1 else 0 end )*(COALESCE(OUTLAY_ADD_AMT,0))outlayamt ,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(trade_number) transfernum,	
			<!--现金充值，经费本，支票-->
			(case when seri_type in(847106,8471062,8471063) then 1 else 0 end )*(trade_number) cashnum, 
			<!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(trade_number) Posnum

			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where substr(balance_date,1,6)>=:begindate
			and not(substr(balance_date,1,6)>:enddate))	t
		group by balance_date
		order by balance_date
    	
    </sql-query>
    
    <!--存款情况统计(经费本和支票)按日统计 -->
    <sql-query name="BillTotleSavingStatSQL">
    	<return-scalar type="string" column="balance_date"/>
     	<return-scalar type="integer" column="ticketnum"/>
    	<return-scalar type="integer" column="outlaynum"/>
     	<return-scalar type="float" column="ticketmoney"/>    	    	
    	<return-scalar type="float" column="outlaymoney"/>    	
		select tx_date as balance_date,
			   sum(ticketnum)ticketnum,
			   sum(outlaynum)outlaynum,
			   sum(ticketmoney)ticketmoney,
			   sum(outlaymoney)outlaymoney
		from(
		select TX_DATE, 
			   (case when bill_type=2 then 1 else 0 end) ticketnum,
			   (case when bill_type=3 then 1 else 0 end) outlaynum,
			   (case when bill_type=2 then 1 else 0 end)*amount ticketmoney,
			   (case when bill_type=3 then 1 else 0 end)*amount outlaymoney    
		from YKT_CUR.T_TIF_SAVDTL
		where tx_date>=:begindate and not(tx_date>:enddate)
		)t
		where tx_date>=:begindate and not(tx_date>:enddate)
		group by tx_date   
		order by tx_date 	
    </sql-query>
    
    <!--存款情况统计(经费本和支票)按月统计 -->
    <sql-query name="BillTotleSavingStatMonthSQL">
    	<return-scalar type="string" column="balance_date"/>
     	<return-scalar type="integer" column="ticketnum"/>
    	<return-scalar type="integer" column="outlaynum"/>
     	<return-scalar type="float" column="ticketmoney"/>    	    	
    	<return-scalar type="float" column="outlaymoney"/>    	
		select tx_date as balance_date,
			   sum(ticketnum)ticketnum,
			   sum(outlaynum)outlaynum,
			   sum(ticketmoney)ticketmoney,
			   sum(outlaymoney)outlaymoney
		from(
		select substr(TX_DATE,1,6)tx_date, 
			   (case when bill_type=2 then 1 else 0 end) ticketnum,
			   (case when bill_type=3 then 1 else 0 end) outlaynum,
			   (case when bill_type=2 then 1 else 0 end)*amount ticketmoney,
			   (case when bill_type=3 then 1 else 0 end)*amount outlaymoney    
		from YKT_CUR.T_TIF_SAVDTL
		where substr(tx_date,1,6)>=:begindate and not(substr(tx_date,1,6)>:enddate)
		)t
		where substr(tx_date,1,6)>=:begindate and not(substr(tx_date,1,6)>:enddate)
		group by tx_date
		order by tx_date

    </sql-query>
    
    <!--开户，销户情况统计按日期范围统计-->
    <sql-query name="CardOpenDestroyStatSQL">
    	<return entity-name="CardOpenDestroyStatResult"></return>
    	<!-- return-scalar type="string" column="balance_date"/>
    	<return-scalar type="integer" column="opencard"/>
    	<return-scalar type="integer" column="destorycard"/-->
		select balance_date,
			sum(opencard)opencard,
			sum(destorycard)destorycard
		from
			(select balance_date,
		<!--开户情况-->
			(case when seri_type 
			in(847101,847116,847124,847125,847126,8471012,8471013,
			8471014,8471242,8471243,8471244,8471262,8471263,8471264) 
			then 1 else 0 end)*(trade_number)opencard,
		<!--销户情况-->
			(case when seri_type=847105 then 1 else 0 end)*(trade_number)destorycard
			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where balance_date>=:begindate and not(balance_date>:enddate)) t
		group by balance_date
    	
    </sql-query>
    
    <!--开户，销户情况统计按月份范围统计-->
    <sql-query name="CardOpenDestroyStatMonthSQL">
    	<return entity-name="CardOpenDestroyStatMonthResult"></return>
    	<!-- return-scalar type="string" column="balance_date"/>
    	<return-scalar type="integer" column="opencard"/>
    	<return-scalar type="integer" column="destorycard"/-->
		select balance_date,
			sum(opencard)opencard,
			sum(destorycard)destorycard
		from
			(select substr(balance_date,1,6) balance_date,
		<!--开户情况-->
			(case when seri_type 
			in(847101,847116,847124,847125,847126,8471012,8471013,
			8471014,8471242,8471243,8471244,8471262,8471263,8471264) 
			then 1 else 0 end)*(trade_number)opencard,
		<!--销户情况-->
			(case when seri_type=847105 then 1 else 0 end)*(trade_number)destorycard
			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where substr(balance_date,1,6)>=:begindate 
			and not(substr(balance_date,1,6)>:enddate)) t
		group by balance_date
    	
    </sql-query>
    
    <!--整体帐务变动情况统计，包括存款，消费，押金。(按日期范围统计) -->
    <sql-query name="AllAccountChangeStatSQL">
    	<return entity-name="AllAccountChangeDayResult"></return>
    	<!-- return-scalar column="balance_date" type="string"/>
    	<return-scalar column="saving" type="float"/>
    	<return-scalar column="consume" type="float"/>
    	<return-scalar column="ensure" type="float"/-->
		select balance_date,
			(sum(transfer)+sum(cash)+sum(Pos)+sum(outlay)+sum(ticket)) saving,
			abs(sum(consume)) consume,
			sum(ensure)ensure
		from (Select balance_date,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(acc_amt) transfer,	
			<!--现金充值-->	   
			(case when seri_type =847106 then 1 else 0 end )*(acc_amt) cash, 
			 <!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(acc_amt) Pos,
			<!--经费本充值-->
			(case when seri_type =8471062 then 1 else 0 end )*(acc_amt) outlay, 
			<!--支票充值-->
			(case when seri_type =8471063 then 1 else 0 end )*(acc_amt) ticket,
			<!--消费-->
			(case when seri_type =930031 then 1 else 0 end )*(acc_amt) consume,
			<!--押金-->
			(case when seri_type =9003 then 1 else 0 end)*(ensure_amt) ensure
			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where balance_date>=:begindate and not(balance_date>:enddate))	t
		group by balance_date
    
    </sql-query>
    
    <!--整体帐务变动情况统计，包括存款，消费，押金。(按月份范围统计) -->
    <sql-query name="AllAccountChangeMonthSQL">
    	<return entity-name="AllAccountChangeMonthResult"></return>
		select balance_date,
			(sum(transfer)+sum(cash)+sum(Pos)+sum(outlay)+sum(ticket)) saving,
			abs(sum(consume)) consume,
			sum(ensure)ensure
		from (Select substr(balance_date,1,6) balance_date,
			<!--圈存转账-->
			(case when seri_type =240001 then 1 else 0 end )*(acc_amt) transfer,	
			<!--现金充值-->	   
			(case when seri_type =847106 then 1 else 0 end )*(acc_amt) cash, 
			 <!--Pos充值-->
			(case when seri_type =930034 then 1 else 0 end )*(acc_amt) Pos,
			<!--经费本充值-->
			(case when seri_type =8471062 then 1 else 0 end )*(acc_amt) outlay, 
			<!--支票充值-->
			(case when seri_type =8471063 then 1 else 0 end )*(acc_amt) ticket,
			<!--消费-->
			(case when seri_type =930031 then 1 else 0 end )*(acc_amt) consume,
			<!--押金-->
			(case when seri_type =9003 then 1 else 0 end)*(ensure_amt) ensure
			from YKT_CUR.T_TIF_REPORT_ACTIVE 
			where substr(balance_date,1,6)>=:begindate 
			and not(substr(balance_date,1,6)>:enddate))t
		group by balance_date
    
    </sql-query>
    
    <!--圈存成功率 按日期范围统计 -->
    <sql-query name="TransferSuccessRateSQL_DB2">
    <return-scalar type="string" column="balance_date"/>
    <return-scalar type="integer" column="account"/>
    <return-scalar type="integer" column="inaccount"/>
    <return-scalar type="float" column="rate"/>
		Select COALESCE(a.cmp_date,b.date) balance_date,
			   <!--圈存总数 -->
			   COALESCE(a.localself_num,0) account,
			   <!--入帐数 -->
			   b.inaccount,
			   <!--成功率 -->
			   (case when int((double((COALESCE(a.localself_num,0)))/double((b.inaccount)))*100)>100 then 100 else
			   	int((double((COALESCE(a.localself_num,0)))/double((b.inaccount)))*100) end) rate
		from YKT_CUR.T_TIF_REPORT_TRANS_COMP a 
		full outer join  
		(select balance_date date,trade_number inaccount 
				from YKT_CUR.T_TIF_REPORT_ACTIVE where seri_type=240001) b 
		on a.cmp_date=b.date
		where date>=:begindate and not(date>:enddate)
		order by balance_date    
    </sql-query>
    <!--圈存成功率 按月份范围统计 -->
    <sql-query name="TransferSuccessRateMonthSQL_DB2">
    <return-scalar type="string" column="balance_date"/>
    <return-scalar type="integer" column="account"/>
    <return-scalar type="integer" column="inaccount"/>
    <return-scalar type="float" column="rate"/>
		select balance_date,account,
			   inaccount,
			   int(double((account))*100/double((inaccount))) rate	
		from
			   (select substr(operate_date,1,6)balance_date,
			   		   sum(account)account,
			   		   sum(inaccount) inaccount
					   from (Select COALESCE(a.cmp_date,b.date) operate_date,
					   				COALESCE(a.localself_num,0) account,
									b.inaccount
							from YKT_CUR.T_TIF_REPORT_TRANS_COMP a 
							full outer join  
							(select balance_date date,trade_number inaccount 
							from YKT_CUR.T_TIF_REPORT_ACTIVE where seri_type=240001) b 
							on a.cmp_date=b.date
							where date>=:begindate and not(date>:enddate))t
				group by substr(operate_date,1,6)) sb
	</sql-query>

    <!--圈存成功率 按日期范围统计 -->
    <sql-query name="TransferSuccessRateSQL_ORACLE">
    <return-scalar type="string" column="balance_date"/>
    <return-scalar type="integer" column="account"/>
    <return-scalar type="integer" column="inaccount"/>
    <return-scalar type="float" column="rate"/>
		Select COALESCE(a.cmp_date,b.date1) balance_date,
			   <!--圈存总数 -->
			   COALESCE(a.localself_num,0) account,
			   <!--入帐数 -->
			   b.inaccount,
			   <!--成功率 -->
			   (case when to_number((to_number((COALESCE(a.localself_num,0)))/to_number((b.inaccount)))*100)>100 then 100 else
			   	to_number((to_number((COALESCE(a.localself_num,0)))/to_number((b.inaccount)))*100) end) rate
		from YKT_CUR.T_TIF_REPORT_TRANS_COMP a 
		full outer join  
		(select balance_date date1,trade_number inaccount 
				from YKT_CUR.T_TIF_REPORT_ACTIVE where seri_type=240001) b 
		on a.cmp_date=b.date1
		where date1>=:begindate and not(date1>:enddate)
		order by balance_date    
    </sql-query>
    <!--圈存成功率 按月份范围统计 -->
    <sql-query name="TransferSuccessRateMonthSQL_ORACLE">
    <return-scalar type="string" column="balance_date"/>
    <return-scalar type="integer" column="account"/>
    <return-scalar type="integer" column="inaccount"/>
    <return-scalar type="float" column="rate"/>
		select balance_date,account,
			   inaccount,
			   to_number(to_number((account))*100/to_number((inaccount))) rate	
		from
			   (select substr(operate_date,1,6)balance_date,
			   		   sum(account)account,
			   		   sum(inaccount) inaccount
					   from (Select COALESCE(a.cmp_date,b.date1) operate_date,
					   				COALESCE(a.localself_num,0) account,
									b.inaccount
							from YKT_CUR.T_TIF_REPORT_TRANS_COMP a 
							full outer join  
							(select balance_date date1,trade_number inaccount 
							from YKT_CUR.T_TIF_REPORT_ACTIVE where seri_type=240001) b 
							on a.cmp_date=b.date1
							where date1>=:begindate and not(date1>:enddate))t
				group by substr(operate_date,1,6)) sb
	</sql-query>

</hibernate-mapping>
