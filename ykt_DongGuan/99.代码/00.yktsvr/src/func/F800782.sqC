/* --------------------------------------------
 * 程序名称: F800782.sqc
 * 创建日期: Sep 29 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: query t_mif_alarmop
 * --------------------------------------------
 * 修改日期: 
 * 修改人员: 
 * 修改描述: 
 * 版本信息: 
 * 备注信息: 
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "busqc.h"

EXEC SQL INCLUDE SQLCA;

int F800782(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	serial_no=0;                  	//报警流水号
	sqlint32	serial_state=0;               	//报警流水状态
	sqlint32	alarmtype=0;                  	//报警方式
	char    	alarm_time[26+1]="";          	//报警时间
	sqlint32	serial_type=0;                	//交易代码
	sqlint32	serial_no2=0;                 	//异常流水号
	sqlint32	serial_state2=0;              	//异常流水状态
	char    	op_time[26+1]="";             	//心跳时间
	sqlint32	alarmno=0;                    	//警戒号
	char    	opercode[10+1]="";           	//操作员代码
	char    	oper_name[150+1]="";           	//操作员名称
	char    	phone[40+1]="";               	//电话
	char    	mobile[40+1]="";              	//手机
	char    	addr[150+1]="";                	//地址
	char    	zip[6+1]="";                  	//邮编
	char    	email[60+1]="";               	//Email
	char    	finish_time[26+1]="";         	//处理完成时间
	char    	opresult[100+1]="";           	//处理结果     
	sqlint16	indicator=0;
	char    	h_sqlcmd[1024]="";
	EXEC SQL END DECLARE SECTION;

	int    ret=0;
	int    row=0;
	int    first=0;
	char sqltmp[500]="";
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

#ifdef DEBUG
	writelog(LOG_DEBUG,"serial_no      :lvol0          [%d]",rPack->lvol0);
	writelog(LOG_DEBUG,"serial_state   :lvol1          [%d]",rPack->lvol1);
	writelog(LOG_DEBUG,"alarmtype      :lvol2          [%d]",rPack->lvol2);
	writelog(LOG_DEBUG,"alarm_time     :spager         [%s]",rPack->spager);
	writelog(LOG_DEBUG,"serial_type    :lvol3          [%d]",rPack->lvol3);
	writelog(LOG_DEBUG,"serial_no2     :lvol4          [%d]",rPack->lvol4);
	writelog(LOG_DEBUG,"serial_state2  :lvol5          [%d]",rPack->lvol5);
	writelog(LOG_DEBUG,"op_time        :sphone         [%s]",rPack->sphone);
	writelog(LOG_DEBUG,"alarmno        :lvol6          [%d]",rPack->lvol6);
	writelog(LOG_DEBUG,"opercode      :scust_no       [%s]",rPack->scust_no);
	writelog(LOG_DEBUG,"oper_name      :scust_limit    [%s]",rPack->scust_limit);
	writelog(LOG_DEBUG,"phone          :sbank_acc      [%s]",rPack->sbank_acc);
	writelog(LOG_DEBUG,"mobile         :sbank_acc2     [%s]",rPack->sbank_acc2);
	writelog(LOG_DEBUG,"email          :semail         [%s]",rPack->semail);
	writelog(LOG_DEBUG,"finish_time    :sphone2        [%s]",rPack->sphone2);
#endif

	ResetNormalCPack(&aPack,0,1);
	serial_no=rPack->lvol0;
	serial_state=rPack->lvol1;
	alarmtype=rPack->lvol2;
	Strncpy_t(alarm_time,rPack->spager,sizeof(alarm_time));
	serial_type=rPack->lvol3;
	serial_no2=rPack->lvol4;
	serial_state2=rPack->lvol5;
	Strncpy_t(op_time,rPack->sphone,sizeof(op_time));
	alarmno=rPack->lvol6;
	Strncpy_t(opercode,rPack->scust_no,sizeof(opercode));
	Strncpy_t(oper_name,rPack->scust_limit,sizeof(oper_name));
	Strncpy_t(phone,rPack->sbank_acc,sizeof(phone));
	Strncpy_t(mobile,rPack->sbank_acc2,sizeof(mobile));
	Strncpy_t(email,rPack->semail,sizeof(email));
	Strncpy_t(finish_time,rPack->sphone2,sizeof(finish_time));

	strcpy(h_sqlcmd,"select  serial_no, serial_state, alarmtype, alarm_time, serial_type, serial_no2, serial_state2, op_time, alarmno, opercode, oper_name, phone, mobile, addr, zip, email, finish_time, opresult  from ykt_cur.t_mif_alarmop ");
	if(serial_no!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  serial_no =%d ",serial_no);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and serial_no =%d ",serial_no);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(serial_state!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  serial_state =%d ",serial_state);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and serial_state =%d ",serial_state);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(alarmtype!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  alarmtype =%d ",alarmtype);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and alarmtype =%d ",alarmtype);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(alarm_time))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  alarm_time ='%s' ",alarm_time);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and alarm_time ='%s' ",alarm_time);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(serial_type!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  serial_type =%d ",serial_type);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and serial_type =%d ",serial_type);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(serial_no2!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  serial_no2 =%d ",serial_no2);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and serial_no2 =%d ",serial_no2);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(serial_state2!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  serial_state2 =%d ",serial_state2);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and serial_state2 =%d ",serial_state2);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(op_time))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  op_time ='%s' ",op_time);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and op_time ='%s' ",op_time);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(alarmno!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  alarmno =%d ",alarmno);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and alarmno =%d ",alarmno);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(opercode))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  opercode ='%s' ",opercode);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and opercode ='%s' ",opercode);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(oper_name))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  oper_name ='%s' ",oper_name);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and oper_name ='%s' ",oper_name);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(phone))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  phone ='%s' ",phone);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and phone ='%s' ",phone);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(mobile))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  mobile ='%s' ",mobile);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and mobile ='%s' ",mobile);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(email))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  email ='%s' ",email);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and email ='%s' ",email);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(finish_time))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  finish_time ='%s' ",finish_time);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and finish_time ='%s' ",finish_time);
			strcat(h_sqlcmd,sqltmp);
		}
	}

	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
		*pRetCode=E_DB_ALARMOP_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  DECLARE alarmop_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		*pRetCode=E_DB_ALARMOP_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN alarmop_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_ALARMOP_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	SetCol(handle,0);
	SetCol(handle,F_LVOL0,F_LVOL1,F_LVOL2,F_SPAGER,F_LVOL3,F_LVOL4,F_LVOL5,F_SPHONE,F_LVOL6,F_SCUST_NO,F_SCUST_LIMIT,F_SBANK_ACC,F_SBANK_ACC2,F_SADDR,F_SBANK_CODE,F_SEMAIL,F_SPHONE2,F_SCUSTTYPES,0);
	while(1)
	{
		serial_no=0;
		serial_state=0;
		alarmtype=0;
		memset(alarm_time,0,sizeof(alarm_time));
		serial_type=0;
		serial_no2=0;
		serial_state2=0;
		memset(op_time,0,sizeof(op_time));
		alarmno=0;
		memset(opercode,0,sizeof(opercode));
		memset(oper_name,0,sizeof(oper_name));
		memset(phone,0,sizeof(phone));
		memset(mobile,0,sizeof(mobile));
		memset(addr,0,sizeof(addr));
		memset(zip,0,sizeof(zip));
		memset(email,0,sizeof(email));
		memset(finish_time,0,sizeof(finish_time));
		memset(opresult,0,sizeof(opresult));

		EXEC SQL  FETCH alarmop_cur INTO 
		:serial_no:indicator,
		:serial_state:indicator,
		:alarmtype:indicator,
		:alarm_time:indicator,
		:serial_type:indicator,
		:serial_no2:indicator,
		:serial_state2:indicator,
		:op_time:indicator,
		:alarmno:indicator,
		:opercode:indicator,
		:oper_name:indicator,
		:phone:indicator,
		:mobile:indicator,
		:addr:indicator,
		:zip:indicator,
		:email:indicator,
		:finish_time:indicator,
		:opresult:indicator;
		ret=SQLCODE;
		if(ret)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL  CLOSE alarmop_cur;
			if(DB_NOTFOUND==ret)
			{
				if(row)
					break;
				else
					*pRetCode=E_DB_ALARMOP_N;
			}
			else
				*pRetCode=E_DB_ALARMOP_R;
			goto L_RETU;
		}

		out_pack->lvol0=serial_no;
		out_pack->lvol1=serial_state;
		out_pack->lvol2=alarmtype;
		Strncpy_t(out_pack->spager,alarm_time,sizeof(out_pack->spager));
		out_pack->lvol3=serial_type;
		out_pack->lvol4=serial_no2;
		out_pack->lvol5=serial_state2;
		Strncpy_t(out_pack->sphone,op_time,sizeof(out_pack->sphone));
		out_pack->lvol6=alarmno;
		Strncpy_t(out_pack->scust_no,opercode,sizeof(out_pack->scust_no));
		Strncpy_t(out_pack->scust_limit,oper_name,sizeof(out_pack->scust_limit));
		Strncpy_t(out_pack->sbank_acc,phone,sizeof(out_pack->sbank_acc));
		Strncpy_t(out_pack->sbank_acc2,mobile,sizeof(out_pack->sbank_acc2));
		Strncpy_t(out_pack->saddr,addr,sizeof(out_pack->saddr));
		Strncpy_t(out_pack->sbank_code,zip,sizeof(out_pack->sbank_code));
		Strncpy_t(out_pack->semail,email,sizeof(out_pack->semail));
		Strncpy_t(out_pack->sphone2,finish_time,sizeof(out_pack->sphone2));
		Strncpy_t(out_pack->scusttypes,opresult,sizeof(out_pack->scusttypes));
		row++;
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(row%9==0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
}
