/* --------------------------------------------
 * 创建日期: 2011-01-14
 * 程序作者: 闻剑
 * 版本信息: 3.0.0.0
 * 程序功能: 提交补卡申请
 * --------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cpack.h"
#include "errdef.h"
#include "pubdef.h"
#include "pubdb.h"
#include "pubfunc.h"
#include "dbfunc.h"
#include "dbfunc_foo.h"
#include "acctrans.h"
#include "busqc.h"
#include <string>
#include <sstream>
#include "checkcardstatus.h"
using namespace std;
EXEC SQL INCLUDE SQLCA;
int F2023(TRUSERID *handle, int iRequest, ST_PACK *rPack, int *pRetCode, char *szMsg)
{
	int ret=0;
	CAccTrans& ats=CAccTrans::GetInst();
	des2src(ats.trans.opercode,rPack->semp);
	ats.trans.transcode=TC_RENEWCARDAPPLY;
	ret=ats.ChkOper();
	if(ret)
		return ret; 		
	TRANS& trans=ats.trans;
	ST_CPACK aPack;
	ST_PACK *outPack = &(aPack.pack);	

	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	des2src(trans.cardasno,rPack->scard0); 
	ret=ats.SaveOperdtl();
	if(ret)
		return ret;
	T_t_card card;
	memset(&card,0,sizeof(card));	
	strcpy(card.cardasno,rPack->scard0);
	ret=DB_t_card_read_lock_by_c1_and_cardasno(card.cardasno,&card);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_CARD_N;
		else
			return E_DB_CARD_R;
	}
	int applycard_status=card.status;
	CCheckCardStatus CCS(card);
	if(!CCS.VerifyApplyType(APPLYTYPE_RENEWCARD))
	{
		DB_t_card_free_lock_by_c1();
		ERRTIP(CCS.GetCheckMsg());
		return E_COMMON_ERR;
	}
	card.status=CARDSTATUS_RENEW;
	ret=DB_t_card_update_lock_by_c1(&card);
	if(ret)
	{
		return E_DB_CARD_U;
	}
	T_t_apply apply;
	memset(&apply,0,sizeof(apply));

	ret = getNewUniqNo(KEYTYPE_APPLYID,&apply.applyid);
	if (ret)
	{
		return ret;
	}
	ret = GetNewCardid(&apply.newcardid);
	if(ret)
	{
		return ret;
	}
	apply.cardno=card.cardno;
	apply.oldcardid=card.cardid;
	apply.cardstatus= applycard_status;
	apply.applytype=APPLYTYPE_RENEWCARD;
	des2src(apply.applyreason,rPack->snote);
	apply.applydate=ats.hostdate;
	apply.status=APPLYSTATUS_ACCEPT;
	des2src(apply.updtime,ats.hostdatetime);
//	des2src(apply.remark,remark);
	ret=DB_t_apply_add(&apply);
	if(ret)
	{
	  if(DB_REPEAT==ret)
		return E_DB_APPLY_E;
	  else
		return E_DB_APPLY_I;
	}
	T_t_cardmadeinfo  cardmadeinfo;
	memset(&cardmadeinfo, 0, sizeof(cardmadeinfo));
	cardmadeinfo.cardid = apply.newcardid;
	cardmadeinfo.applyid = apply.applyid;
	cardmadeinfo.applytype = APPLYTYPE_RENEWCARD;
	cardmadeinfo.issueunit = card.issueunit;
	cardmadeinfo.applydate = ats.hostdate;
	cardmadeinfo.expdate = card.expdate;
	cardmadeinfo.cardtype = card.cardtype;
	cardmadeinfo.custid = card.custid;
	cardmadeinfo.cardno = card.cardno;
	strcpy(cardmadeinfo.crtbatno,ats.hostdatetime);
	strcpy(cardmadeinfo.updtime, ats.hostdatetime);
	cardmadeinfo.madestatus=MADESTATUS_WAITAPROVE;
	ret = DB_t_cardmadeinfo_add(&cardmadeinfo);
	if(ret)
	{
		return E_DB_CARDMADEINFO_I;
	}
	T_t_customer customer;
	memset(&customer,0,sizeof(customer));
	ret=DB_t_customer_read_lock_by_c0_and_custid(card.custid,&customer);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_CUSTOMER_N;
		else
			return E_DB_CUSTOMER_R;
	}
	customer.cardid=cardmadeinfo.cardid;
	ret=DB_t_customer_update_lock_by_c0(&customer);
	if(ret)
	{
		return E_DB_CUSTOMER_U;
	}
	char cardtypename[61]={0};
	ret=GetCardtypename(card.cardtype,cardtypename);
	if(ret)
		return ret;
	char custname[91]={0};
	char mobile[31]={0};
	ret=GetCustBaseInfo(card.custid,custname,mobile);
	if(ret)
	{
		return ret;
	}
	SetCol(handle,F_LVOL0,F_SDATE1,F_STIME1,F_SCARD0,F_SEMP,F_LWITHDRAW_FLAG,F_LBANK_ACC_TYPE2,F_LSERIAL0,F_SALL_NAME,F_SPHONE,F_SNAME2,F_VSMESS,F_SDATE3,F_SCERT_NO,0);	
	sprintf(outPack->sdate3,"%d",ats.accdate);
	strcpy(outPack->scert_no,ats.trans.refno);
	outPack->lvol0=card.cardno;
	des2src(outPack->scard0,card.cardasno);
	des2src(outPack->semp,ats.trans.opercode);
	des2src(outPack->sname2,cardtypename);
	des2src(outPack->sall_name,custname);
	des2src(outPack->sphone,mobile);
	sprintf(outPack->sdate1,"%d",ats.hostdate);
	sprintf(outPack->stime1,"%06d",ats.hosttime);
	outPack->lwithdraw_flag=ats.trans.termid;
	outPack->lbank_acc_type2=ats.trans.operid;
	outPack->lserial0=ats.trans.operseqno;
	strcpy(outPack->vsmess,"申请已受理");
	PutRow(handle,outPack,pRetCode,szMsg);
	return 0;
}
