
#define _IN_SQC_

ESQL #include "busqc.h"
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "acctrans.h"


/* ----------------------------------------------------------
 * 程序名称：F820502.sqc
 * 创建日期：2004-08-07
 * 程序作者：耿刚
 * 版本信息：1.0.0.0
 * 程序功能：登陆时数据字典查询 
 * ----------------------------------------------------------*/


/*
820501	查询数据字典		in	条目名称（字典大类）		lcert_code
				out	条目名称（字典大类）		lcert_code
				out	子项代码（字典单元代码）	sname
				out	子项名称（字典单元内容）	sall_name

*/

EXEC SQL INCLUDE sqlca;

// {300402 ,F300402,"登陆时数据字典查询" ,"!author!"       ,1,     false,0,0,0,0,0}, 

int F820502(TRUSERID * handle, int iRequest, ST_PACK * in_pack, int *pRetCode, char *szMsg)
{
	int bRet = 0;
	char tmpStr[200]  = "";
	EXEC SQL BEGIN DECLARE SECTION;
		sqlint32 hI_lcert_code = 0; 
		sqlint32 ho_dicttype = 0;
		char dictval[150 + 1]  = "";
		char dictcaption[150 + 1]  = "";
		sqlint16 h_indicator = 0;

	EXEC SQL END DECLARE SECTION;

	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	int nrows = 0;

	/** 用于根据请求包整理本CPACK包的头清空包头位图和包体中的数据 */
	ResetNormalCPack(&aPack, 0, 1);

	/* 准备处理结果中在ST_PACK中使用的字段名 */
	hI_lcert_code = in_pack->lcert_code;

	/*设置CPACK位图 */
	SetCol(handle, F_VSMESS, F_LCERT_CODE, F_SNAME, F_SALL_NAME, 0);

	/* 执行sql语句 */
	SQLCODE=0;
	EXEC SQL DECLARE C1 CURSOR FOR SELECT dicttype, dictval, dictcaption FROM ykt_cur.v_dictionary WHERE(:hI_lcert_code = 0 or dicttype =:hI_lcert_code) AND dictval <> '!' order by dicttype,dictval;
	if(0 != SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_DICTIONARY_R;
	}
	EXEC SQL OPEN C1;
	if(0 != SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_DICTIONARY_R;
	}
	while (1)
	{
		ho_dicttype=0;
		dictval[0]=0;
		dictcaption[0]=0;
		EXEC SQL FETCH C1 INTO:ho_dicttype indicator:h_indicator,:dictval indicator:h_indicator,:dictcaption indicator:h_indicator;
		bRet=SQLCODE;
		if (bRet)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE C1;
			if (DB_NOTFOUND==bRet)
			{
				return 0;
//				if(nrows>0)
//					break;
//				else
//				{
//					if(hI_lcert_code)
//						return  ERRINFO(E_NOTEXIST_DICTIONARY,hI_lcert_code);
//					else
//						return E_DB_DICTIONARY_N;
//				}
			}
			else
			{
				return E_DB_DICTIONARY_R;
			}
		}
		nrows ++  ;
		out_pack->lcert_code = ho_dicttype;
		des2src(out_pack->sname,dictval);
		des2src(out_pack->sall_name,dictcaption);
		PutRow(handle, out_pack, pRetCode, szMsg);
	}
	return 0;
}
