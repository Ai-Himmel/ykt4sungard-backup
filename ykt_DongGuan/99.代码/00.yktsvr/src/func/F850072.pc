/* --------------------------------------------
 * 创建日期: 2010-08-31
 * 程序作者: 闻剑
 * 版本信息: 3.0.0.0
 * 程序功能: 期末结转
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cpack.h"
#include "errdef.h"
#include "pubdef.h"
#include "pubdb.h"
#include "pubfunc.h"
#include "dbfunc.h"
#include "dbfunc_foo.h"
#include "acctrans.h"
#include "actfunc.h"
#include "busqc.h"
#include <string>
#include <sstream>
#include <iostream>
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>
EXEC SQL INCLUDE daysettle.h;
using namespace std;

int F850072(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	int ret=0;
	CAccTrans& ats=CAccTrans::GetInst();
	des2src(ats.trans.opercode,rPack->semp);
	ats.trans.transcode=TC_MONTHEND;
	ret=ats.ChkOper();
	if(ret)
		return ret; 		
	writelog(LOG_INFO,"期末结转,结算日期%d",ats.settledate);
	//判断是否需要月结
	T_t_period period;
	memset(&period,0,sizeof(period));	
	ret=DB_t_period_read_lock_by_c0_and_periodyear_and_periodmonth(ats.sysPara.iPeriodYear,ats.sysPara.iPeriodMonth,&period);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_PERIOD_N;
		else
			return E_DB_PERIOD_R;
	}
	if(period.settleflag)
	{
		DB_t_period_free_lock_by_c0();
		ERRTIP("期末结转已完成");
		return E_COMMON_ERR;
	}
	period.settleflag=1;
	ret=DB_t_period_update_lock_by_c0(&period);
	if(ret)
	{
		return E_DB_PERIOD_U;
	}
	if(ats.settledate <= period.enddate)
	{
		if(ats.hostdate<=period.enddate)
		{
			ERRTIP("未到期末,不能进行期末结转");
		}
		else
		{
			ERRTIP("上期日终结转未完成,不能进行期末结转");
		}
		return E_COMMON_ERR;
	}
	int next_periodmonth=ats.sysPara.iPeriodMonth+1;
	if(next_periodmonth<=12)
	{
		T_t_period nextperiod;
		memset(&nextperiod,0,sizeof(nextperiod));	
		ret=DB_t_period_read_by_periodyear_and_periodmonth(ats.sysPara.iPeriodYear,next_periodmonth,&nextperiod);
		if(ret)
		{
			if(DB_NOTFOUND==ret)
				return E_DB_PERIOD_N;
			else
				return E_DB_PERIOD_R;
		}
		if(ats.settledate!=nextperiod.startdate)
		{
			ERRTIP("下一个会计期间开始日期[%d]设置错误",nextperiod.startdate);
			return E_COMMON_ERR;
		}
	}	
	CDaySettle  ds;
	//开始期末结转
	//生成科目月结单
	ret=ds.BatchGenSubjectMonth();
	if(ret)
	{
		writelog(LOG_ERR,"BatchGenSubjectMonth ret[%d]",ret);
		return ret;
	}
	//
	SQLCODE=0;
	T_t_settlectl settlectl;
	memset(&settlectl,0,sizeof(settlectl));
		
	ret=DB_t_settlectl_read_lock_by_c0_and_booksetno(ats.sysPara.iBookSetNo,&settlectl);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_SETTLECTRL_N;
		else
			return E_DB_SETTLECTRL_R;
	}
	//换会计期间
	settlectl.periodmonth+=1;
	des2src(settlectl.updtime,ats.hostdatetime);
	ret=DB_t_settlectl_update_lock_by_c0(&settlectl);
	if(ret)
	{
		return E_DB_SETTLECTRL_U;
	}
	//凭证号重置
	ret=ds.VouchernoReset(settlectl.periodmonth);
	if(ret)
	{
		writelog(LOG_ERR,"VouchernoReset ret[%d]",ret);
		return ret;
	}
	writelog(LOG_INFO,"新会计期间%d",settlectl.periodmonth);
	ret=LogoutOper();
	if(ret)
		return ret;
	return 0;
}
