/* ----------------------------------------------------------
 * 程序名称：F847317
 * 创建日期：2007-07-21
 * 程序作者：何林青
 * 版本信息：1.0.0.0
 * 程序功能：多媒体手机充值业务之正式入账
 * ----------------------------------------------------------
 * ----------------------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include<sys/types.h>
ESQL #include<sys/ipc.h>
ESQL #include<sys/sem.h>
ESQL #include<sys/shm.h>
ESQL #include <signal.h>
ESQL #include "errdef.h"
ESQL #include "pubdb.h"
ESQL #include "busqc.h"
ESQL #include "dbfunc.h"
ESQL #include "pubfunc.h"
ESQL #include "acctrans.h"
ESQL #include "tcp.h"
ESQL #include "payment.h"
//ESQL #include "rsa.h"


#ifndef	SEGSIZE
	#define 	SEGSIZE	1024
#endif
#ifndef DEBUG
	#define DEBUG
#endif

int F847317(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	int ret;
	CPaymentBase *payment;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	T_t_transdtl *transdtl;
	int trans_ret;

	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
   	SetCol(handle,F_LVOL0,F_LVOL1,F_DAMT0,F_DAMT1,F_DAMT2,F_SBANKNAME,F_SADDR,F_SNAME2,F_VSMESS,0);

	payment = CPaymentBase::find_payment(in_pack->lcert_code);
	if(NULL == payment)
	{
		*pRetCode = E_TRANS_FUNC_NONSUPPORT;
		goto L_RETU;
	}

	ret = payment->init(handle,&aPack,in_pack);
	if(ret)
	{
		*pRetCode = ret;
		writelog(LOG_ERR,"支付交易初始化失败trade[%d],ret[%d]",in_pack->lcert_code,ret);
		goto L_RETU;
	}


	// 正式入账
	ret = payment->acc(in_pack,out_pack,&transdtl);
	if(ret)
	{
		*pRetCode = ret;
		writelog(LOG_ERR,"支付交易正式入账失败trade[%d],ret[%d]",in_pack->lcert_code,ret);
		goto L_RETU;
	}

	// 第三方正式支付
	trans_ret = payment->transfer(handle,in_pack,out_pack);
	if(ret)
	{
		// 在这个过程中，写卡已经成功了，入账也成功了，但是第三方支付有问题
		writelog(LOG_ERR,"支付交易入账失败trade[%d],ret[%d]",in_pack->lcert_code,ret);
		// 更新流水状态
		// 先提交事务
	}
	ret = payment->fini(trans_ret,in_pack);
	if(ret)
	{
		*pRetCode = ret;
		writelog(LOG_ERR,"支付交易终了失败trade[%d],ret[%d]",in_pack->lcert_code,ret);
		goto L_RETU;
	}
	if(trans_ret)
	{
		*pRetCode = trans_ret;
		goto L_RETU;
	}
	// 应答
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;

L_RETU:
	return -1;

}
/*
{

	int ret=0;
	int ret1=0;
	int cardId = 0;
	int tradecode=0;
	ext_consumer_request_t request_code;

	CAccTrans& ats=CAccTrans::GetInst();
	TRANS& trans=ats.trans;
	ret=ats.checkCfgUpdate();
	if(ret)
		return ret;
	ats.clear();

	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	char ext_msg[256] ="";
	// 用于根据请求包整理本CPACK包的头清空包头位图和包体中的数据
	ResetNormalCPack(&aPack,0,1);
	//判断交易代码，进行相应处理

	SetCol(handle,0);
   	SetCol(handle,F_LVOL0,F_LVOL1,F_DAMT0,F_DAMT1,F_DAMT2,F_DAMT10,F_DAMT11,F_DAMT12,F_SBANKNAME,F_SADDR,F_VSMESS,0);

	tradecode = in_pack->lcert_code;
	cardId = in_pack->lvol0;
	writelog(LOG_ERR,"third part transfer business start func=847317,trade code=[%d],cardno=[%d]!",tradecode,cardId);
	ret = ext_consumer_find_trade(tradecode, &request_code);		
	if(ret)
	{
		writelog(LOG_ERR,"ret=[%d]",ret);
		return ret;
	}

	ret = request_code.search_thirdparty_account(in_pack,request_code.transcode,&trans);
	if(ret)
	{
		return ret;
	}
	ret = enter_account(in_pack,out_pack);
	if(ret)
	{
		return ret;
	}
	
	if(request_code.thirdparty_transfer)
	{
		ret = request_code.thirdparty_transfer(in_pack,ext_msg);
		if(ret)
		{
			writelog(LOG_ERR,"trans_request error,errcode=[%d]",ret);
			ret1= db_rollback();
			if(ret1)
			{
				writelog(LOG_ERR,"db_rollback error,errcode=[%d]",ret1);
				return E_DB_ROLLBACK;
			}
			return ret;
		}
	}
	if(request_code.deal_self_out_pack){
		ret = request_code.deal_self_out_pack(in_pack,out_pack);
		if(ret)
		{
			return ret;
		}
	}
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;
}
*/


