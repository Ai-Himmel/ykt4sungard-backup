/* --------------------------------------------
 * 创建日期: 2010-12-08
 * 程序作者: tc
 * 版本信息: 3.0.0.0
 * 程序功能: 圈存初始化
 * --------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cpack.h"
#include "errdef.h"
#include "pubdef.h"
#include "pubdb.h"
#include "pubfunc.h"
#include "dbfunc.h"
#include "dbfunc_foo.h"
#include "acctrans.h"
#include "busqc.h"
#include <string>
#include <sstream>
#include "bankerr.h"
#include "bankfunc.h"
#include "cardprocess.h"

using namespace std;
EXEC SQL INCLUDE SQLCA;


static int do_execute(CBankTransfer &obj)
{
	if(!obj.LockCard())
	{
		return obj.GetErrCode();
	}
	if(!obj.ExecBefChk())
	{
		return obj.GetErrCode();
	}
	if(!obj.Execute())
	{
		return obj.GetErrCode();
	}
	if(!obj.ExecAftChk())
	{
		return obj.GetErrCode();
	}
	if(!obj.SaveExecResult())
	{
		return obj.GetErrCode();
	}
	return 0;
}

////////////////////////////////////////////////////////////////////////////////
int F5002(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	int ret;
	CAccTrans& ats = CAccTrans::GetInst();
	T_t_subsystem subsys;
	memset(&subsys,0,sizeof subsys);
	ret = BKCheckSysKey(rPack->lwithdraw_flag,rPack->scust_limit,&subsys);
	if(ret)
	{
		if(ret==E_DB_SUBSYSTEM_N)
			return EB_AUTHENTICATION;
		return EB_SYSTEM;
	}
	
	des2src(ats.trans.cardasno,rPack->scust_auth);
	des2src(ats.trans.samno,rPack->sholder_ac_no);
	ats.trans.samseqno=rPack->lserial0;
	ats.trans.termdate=atoi(rPack->sdate0);
	ats.trans.termtime=atoi(rPack->stime0);
	ats.SetCardCntAndCardBal(ats.reqpack->lvol1,ats.reqpack->lvol6,ats.reqpack->lvol2);
	ats.SetInputAmt(rPack->lvol0);
	ats.trans.transcode=TC_BANKTRANS;

	ret=GetCardIDByCardasno(ats.trans.cardasno,&ats.trans.cardid);
	if(ret)
	{
		writelog(LOG_ERR,"GetCardIDByCardasno error,cardasno[%s] ret=[%d]",ats.trans.cardasno,ret);
		if(ret == E_DB_CARD_N)
			return EB_CARDNOTEXIST;
		return EB_SYSTEM;
	}
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	SetCol(handle,F_SSTATUS0,F_LCERT_CODE,F_SPHONE,F_LVOL0,F_SDATE0,F_STIME0,F_SHOLDER_AC_NO,F_VSMESS,0);
	CBankTransfer obj;
	obj.SetTrans(ats.trans);
	if(!obj.LockCard())
	{
		return obj.GetErrCode();
	}
	if(!obj.ExecBefChk())
	{
		if(obj.GetObjCard().dpswfailflag)
		{
			// 返回写卡失败补写
			out_pack->lcert_code=0;
			out_pack->sstatus0[0]='W';
			des2src(out_pack->sphone,obj.GetTrans().refno);
			out_pack->lvol0=obj.GetObjBankdtl().amount;
			sprintf(out_pack->sdate0,"%08d",ats.hostdate);
			sprintf(out_pack->stime0,"%06d",ats.hosttime);
			des2src(out_pack->sholder_ac_no,"");
			des2src(out_pack->vsmess,"");
			PutRow(handle,out_pack,pRetCode,szMsg);
			return 0;
		}	
		else
		{
			return obj.GetErrCode();
		}
	}
	if(!obj.Execute())
	{
		return obj.GetErrCode();
	}
	if(!obj.ExecAftChk())
	{
		return obj.GetErrCode();
	}
	if(!obj.SaveExecResult())
	{
		return obj.GetErrCode();
	}
	out_pack->lcert_code=0;
	out_pack->sstatus0[0]='N';
	des2src(out_pack->sphone,obj.GetTrans().refno);
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;
	// 验证银行卡信息,(包括银行代码，工作时间等)
#if 0
	memset(&tBank,0,sizeof tBank);
	ret = BKCheckBankCode(rPack->sname,&tBank);
	if(ret)
	{
		writelog(LOG_ERR,"");
		return ret;
	}
#endif
#if 0
	// 验证卡状态
	memset(&tCard,0,sizeof tCard);
	ret=BKGetCardByCardASNo(rPack->scust_auth,&tCard);
	if(ret)
	{
		writelog(LOG_ERR,"BKGetCardByCardASNo error,ret=[%d]",ret);
		return ret;
	}
	ret = BKCheckCardStatus(tCard);
	if(ret)
	{
		writelog(LOG_ERR,"cardid[%d]cardno[%s]error[%d]",tCard.cardid,tCard.cardno,ret);
		return ret;
	}
	// 验证上次写卡状态
	if(tCard.dpsnum > 0)
	{
		// 认为写卡未成功
		if(tCard.dpscnt == rPack->lvol1)
		{
			tCard.dpswfailflag = 1;	
		}
		else if(tCard.dpscnt > rPack->lvol1)
		{
			// 卡充值次数异常
			writelog(LOG_ERR,"check dpscnt, db[%d] card[%d]",tCard.dpscnt,rPack->lvol1);
			return EB_CARDDPSCNTERR;
		}
		else
		{
			tCard.dpsnum++;
			tCard.dpscnt=rPack->lvol1;
			tCard.dpswfailflag = 0;
			
		}
	}
	else
	{
		tCard.dpsnum++;
		tCard.dpscnt=rPack->lvol1;
		tCard.dpswfailflag = 0;
	}
	
	if(tCard.dpswfailflag == 0)
	{
		// 记录圈存流水
		memset(&bankdtl,0,sizeof bankdtl);
		bankdtl.cardno=tCard.cardno;
		des2src(bankdtl.samno,rPack->sholder_ac_no);
		bankdtl.samseqno=rPack->lserial0;
		bankdtl.befcardbal=rPack->lvol2;
		bankdtl.dpscnt=rPack->lvol1;
		bankdtl.amount=rPack->lvol0;
		bankdtl.aftcardbal=bankdtl.befcardbal+bankdtl.amount;
		bankdtl.expdate=atoi(rPack->sdate1);
		bankdtl.termdate=atoi(rPack->sdate0);
		bankdtl.termtime=atoi(rPack->stime0);
		des2src(bankdtl.bankcode,rPack->sname);
		des2src(bankdtl.bankcardno,rPack->sbank_acc);
		des2src(bankdtl.cardasno,tCard.cardasno);
		des2src(bankdtl.refno,ats.trans.refno);
		bankdtl.hostdate=ats.hostdate;
		bankdtl.hosttime=ats.hosttime;
		bankdtl.transcode=TC_BANKTRANS;
		bankdtl.status=TRANSTATUS_INIT;
		bankdtl.wctatus=BWCS_INIT;
		ret=DB_t_banktransdtl_add(&bankdtl);
		if(ret)
		{
			writelog(LOG_ERR,"DB_t_banktransdtl_add error,ret[%d]",ret);
			if(DB_REPEAT==ret)
				return EB_TERMSEQERR;
			return EB_SYSTEM;
		}
		tCard.expdate=bankdtl.expdate;
		// 账户余额不变
		/*
		des2src(tCard.transdate,bankdtl.transdate);
		des2src(tCard.transtime,bankdtl.transtime);
		tCard.dpsamt=bankdtl.amount;
		tCard.dpscnt=bankdtl.dpscnt;
		tCard.balance+=bankdtl.amount;
		tCard.cardbal=bankdtl.aftcardbal;
		*/
		
		ret = BKUpdateCardForDps(tCard);
		if(ret)
		{
			writelog(LOG_ERR,"BKUpdateCardForDps error,ret[%d]",ret);
			return ret;
		}
		out_pack->lcert_code=0;
		out_pack->sstatus0[0]='N';
		des2src(out_pack->sphone,bankdtl.refno);
		PutRow(handle,out_pack,pRetCode,szMsg);
		return 0;
	}
	else
	{
		// 返回写卡失败补写
		out_pack->lcert_code=0;
		out_pack->sstatus0[0]='W';
		des2src(out_pack->sphone,ats.trans.refno);
		out_pack->lvol0=tCard.dpsamt;
		sprintf(out_pack->sdate0,"%08d",tCard.transdate);
		sprintf(out_pack->stime0,"%06d",tCard.transtime);
		des2src(out_pack->sholder_ac_no,"");
		des2src(out_pack->vsmess,"");
		PutRow(handle,out_pack,pRetCode,szMsg);
		return 0;
		
	}
	return EB_SYSTEM;
#endif
}

