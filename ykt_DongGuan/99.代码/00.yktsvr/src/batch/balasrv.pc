/* ----------------------------------------------------------
 * 创建日期：2010-12-17
 * 程序作者：闻剑
 * 版本信息：3.0.0.0
 * 程序功能：日终结算
 * ----------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cpack.h"
#include "errdef.h"
#include "pubdef.h"
#include "pubdb.h"
#include "pubfunc.h"
#include "dbfunc.h"
#include "dbfunc_foo.h"
#include "acctrans.h"
#include "transfunc.h"
#include "actfunc.h"
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <sqlca.h>
EXEC SQL INCLUDE  daysettle.h;
using namespace std;
#define VALIDTYPE_VALID		1
#define VALIDTYPE_INVALID	2
//操作员分类帐表
void sql_error()
{
	char msg[512];
	int buf_len, msg_len;
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	buf_len = sizeof(msg);
	sqlglm(msg, &buf_len, &msg_len);
	cout<<"ORACLE error detected:"<<msg<<endl;
	EXEC SQL ROLLBACK WORK RELEASE;
	exit(1);
}

int  main(int argc, char *argv[])
{

	int ret = 0;
	char dbname[256] = "";
	char dbuser[256] = "";
	char dbpwd[256] = "";

	char  szVerNo[61] = {0};
	int allowtype=0;
	sprintf(szVerNo, "%s %s (%s)", argv[0], YKT_VERSION, __DATE__);
	if(argc >= 2)
	{
		if(strncmp(argv[1], "-v", 2) == 0 || strncmp(argv[1], "-V", 2) == 0)
		{
			printf("%s\n", szVerNo);
			return 0;
		}
		else if ((strncmp(argv[1],"-m",2)==0)||(strncmp(argv[2],"-M",2)==0))
		{
			if(strlen(argv[1])!=3)
			{
				printf("Useage:%s  -m5|m9  \n",argv[0]);
				return -1;
			}
			char cmdpara[2]={0};
			cmdpara[0]=argv[1][2];
			if(cmdpara[0]!='5'&&cmdpara[0]!='9'&&cmdpara[0]!='0')
			{
				printf("Useage:%s  -m0|m5|m9  \n",argv[0]);
				return -1;
			}
			allowtype=atoi(cmdpara);
		}
		else
		{
			printf("balasrv: invalid option  %s\n", argv[1]);
			return 0;
		}
	}
	openlog("dayendbala", LOG_PID | LOG_CONS | LOG_NDELAY, LOG_LOCAL1);
	writelog(LOG_INFO, "%s start", argv[0]);
	//打开数据库连接
	char *p = getenv("YKT_DBNAME");
	if(p == NULL)
	{
		cout << "get ENV VAR YKT_DBNAME ERR" << endl;
		writelog(LOG_ERR, "get ENV VAR YKT_DBNAME ERR");
		exit(1);
	}
	des2src(dbname, p);
	p = getenv("YKT_USER");
	if(p == NULL)
	{
		cout << "get ENV VAR YKT_USER ERR" << endl;
		writelog(LOG_ERR, "get ENV VAR YKT_USER ERR");
		exit(2);
	}
	des2src(dbuser, p);
	p = getenv("YKT_PWD");
	if(p == NULL)
	{
		cout << "get ENV VAR YKT_PWD ERR" << endl;
		writelog(LOG_ERR, "get ENV VAR YKT_PWD ERR");
		exit(3);
	}
	des2src(dbpwd, p);
	int retry = 0;
	while(1)
	{
		ret = db_connect(dbname, dbuser, dbpwd);
		if(ret)
		{
			db_chk_err(__FILE__, __LINE__, &sqlca);
			writelog(LOG_ERR, "connect to database err dbname[%s]", dbname);
			cout << "Connect to database " << dbname << " failed" << endl;
			retry++;
			if(retry < 3)
			{
				cout << "Reconnecting ......" << endl;
				sleep(1);
				continue;
			}
			else
			{
				cout << "Reconnecting to database " << dbname << " failed" << endl;
				exit(4);
			}
		}
		cout << "Connecting to database " << dbname << " OK" << endl;
		break;
	}
	CAccTrans& ats = CAccTrans::GetInst();
	ret=ats.LoadCfg();
	if(ret)
	{	
		cout<<"LoadCfg ret="<<ret<<",ErrMsg:"<<ats.GetErrTip()<<endl;
		return ret;
	}
	ret=ats.Reset();
	if(ret)
	{
		cout<<" Reset err"<<endl;
		cout<<" Reset ret="<<ret<<",ErrMsg:"<<ats.GetErrTip()<<endl;
		return E_COMMON_ERR;
	}
	CDaySettle daysettle;
	if(daysettle.IsSettled(allowtype))
	{
		cout<<" settle have finished"<<endl;
		return 0;
	}
	if(!daysettle.IsEnableSettle())
	{
		cout<<" can't settle"<<endl;
		cout<<" can't settle "<<",ErrMsg:"<<ats.GetErrTip()<<endl;
		return E_COMMON_ERR;
	}
	ret=daysettle.SetSettleFlag();
	if(ret)
	{
		cout<<"SetSettleFlag ret"<<ret<<",ErrMsg:"<<ats.GetErrTip()<<endl;
		return E_COMMON_ERR;
	}
	ret=db_commit();
	if(ret)
	{
		db_rollback();
		cout<<"SetSettleFlag Commit ret"<<ret<<",ErrMsg:"<<ats.GetErrTip()<<endl;
		return E_COMMON_ERR;
	}
	sleep(10);
	cout<<"StatDayData OK"<<endl;
	
	if(!daysettle.IsEnableSettle())
	{
		return E_COMMON_ERR;
	}
	if((ret=daysettle.SettleProcess())!=0)
	{
		cout<<"SettleProcess ret="<<ret<<",ErrMsg:"<<ats.GetErrTip()<<endl;
		db_rollback();
		ret=daysettle.ResetSettleFlag();
		if(ret)
		{
			cout<<"ResetSettleFlag ret="<<ret<<",ErrMsg:"<<ats.GetErrTip()<<endl;
		}
		db_commit();
		db_disconnect();
		return 1;
	}
	else
	{
		cout<<"SettleProcess OK"<<endl;
		db_commit();
	}
	db_disconnect();
	closelog();
	return 0;
}
