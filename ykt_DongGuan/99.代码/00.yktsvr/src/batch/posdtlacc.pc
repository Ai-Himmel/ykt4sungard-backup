/* --------------------------------------------
 * 程序名称: F930031.sqc
 * 创建日期: 9 17 2004
 * 程序作者: 闻剑
 * 版本信息: 1.0.0.0
 * 程序功能:  收集消费流水入账该程序只适用于单进程
 * --------------------------------------------*/
#define _IN_SQC_
#include <stdio.h>
#include <string.h>
#include "pubdef.h"
#include "errdef.h"
#include "pubfunc.h"
#include "pubdb.h"
#include "dbfunc.h"
#include "dbfunc_foo.h"
#include "acctrans.h"
#include "interfacefunc.h"
#include "transfunc.h"
#include <vector>
EXEC SQL INCLUDE SQLCA;

typedef vector<T_t_posdtl> POSDTLVECT;
typedef vector<T_t_posdtl> BUSDTLVECT;

static double maxshopfeerate=0.9;
//读取流水到数组中
static int GetPosdtlVect(int subsysid,POSDTLVECT& PosdtlVect,char *v_status)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char		rowid[31]={0};		//rowid
	char		 devphyid[31]={0};	//设备物理ID
	sqlint32 devseqno=0;			//设备流水号
	char		 transdate[9]={0};	//交易日期
	char		 transtime[7]={0};	//交易时间
	sqlint32 cardno=0;				//交易卡号
	sqlint32 cardcnt=0;				//卡交易次数
	double cardbefbal=0;			//交易前卡余额
	double amount=0;				//发生额-包含管理费
	double cardaftbal=0;			//交易后卡余额
	double managefee=0;				//管理费
	sqlint32 transmark=0;			//交易标记
	sqlint32 transcode=0;			//交易码
	sqlint32 shopid=0;				//商户卡号
	sqlint32 subsidyno=0;			//补助批次号
	sqlint32 sysid=0;					//子系统ID
	sqlint32 datatype=0;			//POS数据类型
	char		 coldate[9]="";		//采集日期
	char		 coltime[7]="";		//采集时间
//	char		 accdate[9]="";			//记账日期
//	char		 acctime[7]="";			//记账时间
	sqlint32 termid=0;					//终端号
//	sqlint32 termseqno=0;			//终端流水号
	char		 status[2]="";		//状态-1初始状态2-入账失败3-成功
//	sqlint32 errcode=0;				//错误码
//	char		 errmsg[241]="";		//错误信息
//	char		 delflag[2]="";				//删除标志
	sqlint16 indicator=0;
	EXEC SQL END DECLARE SECTION;
	int ret=0;
	sysid=subsysid;
	status[0]=v_status[0];
	T_t_posdtl  posdtl;

	if(PosdtlVect.size())
		PosdtlVect.clear();

	EXEC SQL DECLARE posdtl_cur CURSOR FOR
	SELECT /*+ FIRST_ROWS */
		rowid,
		devphyid,
		devseqno,
		shopid,
		transcode,
		transdate,
		transtime,
		coldate,
		coltime,
		cardno,
		cardcnt,
		cardbefbal,
		amount,
		cardaftbal,
		managefee,
		transmark,
		subsidyno,
		sysid,
		datatype,
		termid
//		status,
//		accdate,
//		acctime,
//		termseqno,
//		errcode,
//		delflag
	FROM ykt_cur.t_posdtl 
	where  status=:status order by transdate,devphyid,devseqno;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL	OPEN posdtl_cur;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_OPEN;
	}
	while(1)
	{
			rowid[0]=0;
			devphyid[0]=0;
			devseqno=0;
			shopid=0;
			transcode=0;
			transdate[0]=0;
			transtime[0]=0;
			coldate[0]=0;
			coltime[0]=0;
			cardno=0;
			cardcnt=0;
			cardbefbal=0;
			amount=0;
			cardaftbal=0;
			managefee=0;
			transmark=0;
			subsidyno=0;
			sysid=0;
			datatype=0;
			termid=0;
//			status[0]=0;
//			accdate[0]=0;
//			acctime[0]=0;
//			termseqno=0;
//			errcode=0;
//			delflag[0]=0;
			EXEC SQL FETCH posdtl_cur INTO
			:rowid:indicator,
			:devphyid:indicator,
			:devseqno:indicator,
			:shopid:indicator,
			:transcode:indicator,
			:transdate:indicator,
			:transtime:indicator,
			:coldate:indicator,
			:coltime:indicator,
			:cardno:indicator,
			:cardcnt:indicator,
			:cardbefbal:indicator,
			:amount:indicator,
			:cardaftbal:indicator,
			:managefee:indicator,
			:transmark:indicator,
			:subsidyno:indicator,
			:sysid:indicator,
			:datatype:indicator,
			:termid:indicator;
//			:status:indicator,
//			:accdate:indicator,
//			:acctime:indicator,
//			:termseqno:indicator,
//			:errcode:indicator,
//			:delflag:indicator;
			ret=SQLCODE;
			if(ret)
			{
				CHECK_DB_ERR;
				EXEC SQL CLOSE posdtl_cur;
				if(DB_NOTFOUND==ret)
				{
						break;
				}
				else
					return E_DB_POSDTL_R;
			}
			memset(&posdtl,0,sizeof(posdtl));
			
			des2src(posdtl.batchno,rowid);		//借用batchno保存作为rowid;
			des2src(posdtl.devphyid,devphyid);
			posdtl.devseqno=devseqno;
			posdtl.shopid=shopid;
			posdtl.transcode=transcode;
			des2src(posdtl.transdate,transdate);
			des2src(posdtl.transtime,transtime);
			des2src(posdtl.coldate,coldate);
			des2src(posdtl.coltime,coltime);
			posdtl.cardno=cardno;
			posdtl.cardcnt=cardcnt;
			posdtl.cardbefbal=cardbefbal;
			posdtl.amount=amount;
			posdtl.cardaftbal=cardaftbal;
			posdtl.managefee=managefee;
			posdtl.transmark=transmark;
			posdtl.subsidyno=subsidyno;
			posdtl.sysid=sysid;
			posdtl.datatype=datatype;
			posdtl.termid=termid;
			PosdtlVect.push_back(posdtl);
			if(PosdtlVect.size()>=1000)
			{
				EXEC SQL CLOSE posdtl_cur;
				break;
			}
	}
	return 0;
}
static int GetBusdtlVect(POSDTLVECT& busdtlVect,char *v_status)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char		rowid[31]={0};		//rowid
	char		 devphyid[31]={0};	//设备物理ID
	sqlint32 devseqno=0;			//设备流水号
	char		 transdate[9]={0};	//交易日期
	char		 transtime[7]={0};	//交易时间
	sqlint32 cardno=0;				//交易卡号
	sqlint32 cardcnt=0;				//卡交易次数
	double cardbefbal=0;			//交易前卡余额
	double amount=0;				//发生额-包含管理费
	double cardaftbal=0;			//交易后卡余额
	sqlint32 transmark=0;			//交易标记
	sqlint32 shopid=0;				//商户卡号
	sqlint32 datatype=0;			//POS数据类型
	char		 coldate[9]="";		//采集日期
	char		 coltime[7]="";		//采集时间
	sqlint32 termid=0;					//终端号
	char		 status[2]="";		//状态-1初始状态2-入账失败3-成功
	sqlint16 indicator=0;
	EXEC SQL END DECLARE SECTION;
	int ret=0;
	status[0]=v_status[0];
	T_t_posdtl  posdtl;

	if(busdtlVect.size())
		busdtlVect.clear();

	EXEC SQL DECLARE busdtl_cur CURSOR FOR
	SELECT /*+ FIRST_ROWS */
		rowid,
		devphyid,
		devseqno,
		shopid,
		transdate,
		transtime,
		coldate,
		coltime,
		cardno,
		cardcnt,
		cardbefbal,
		amount,
		cardaftbal,
		transmark,
		datatype,
		termid
	FROM ykt_cur.t_busdtl 
	where  status=:status order by transdate,devphyid,devseqno;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL	OPEN busdtl_cur;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_OPEN;
	}
	while(1)
	{
			rowid[0]=0;
			devphyid[0]=0;
			devseqno=0;
			shopid=0;
			transdate[0]=0;
			transtime[0]=0;
			coldate[0]=0;
			coltime[0]=0;
			cardno=0;
			cardcnt=0;
			cardbefbal=0;
			amount=0;
			cardaftbal=0;
			transmark=0;
			datatype=0;
			termid=0;
			EXEC SQL FETCH busdtl_cur INTO
			:rowid:indicator,
			:devphyid:indicator,
			:devseqno:indicator,
			:shopid:indicator,
			:transdate:indicator,
			:transtime:indicator,
			:coldate:indicator,
			:coltime:indicator,
			:cardno:indicator,
			:cardcnt:indicator,
			:cardbefbal:indicator,
			:amount:indicator,
			:cardaftbal:indicator,
			:transmark:indicator,
			:datatype:indicator,
			:termid:indicator;
			ret=SQLCODE;
			if(ret)
			{
				CHECK_DB_ERR;
				EXEC SQL CLOSE busdtl_cur;
				if(DB_NOTFOUND==ret)
				{
						break;
				}
				else
					return E_DB_BUSDTL_R;
			}
			memset(&posdtl,0,sizeof(posdtl));
			
			des2src(posdtl.batchno,rowid);		//借用batchno保存作为rowid;
			des2src(posdtl.devphyid,devphyid);
			posdtl.devseqno=devseqno;
			posdtl.shopid=shopid;
			des2src(posdtl.transdate,transdate);
			des2src(posdtl.transtime,transtime);
			des2src(posdtl.coldate,coldate);
			des2src(posdtl.coltime,coltime);
			posdtl.cardno=cardno;
			posdtl.cardcnt=cardcnt;
			posdtl.cardbefbal=cardbefbal;
			posdtl.amount=amount;
			posdtl.cardaftbal=cardaftbal;
			posdtl.transmark=transmark;
			posdtl.datatype=datatype;
			posdtl.termid=termid;
			posdtl.transcode=940031;
			busdtlVect.push_back(posdtl);
			if(busdtlVect.size()>=1000)
			{
				EXEC SQL CLOSE busdtl_cur;
				break;
			}
	}
	return 0;
}
static int GetCardAccDiffMaxCardCnt(int cardno,int& maxcardcnt)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32 hi_cardno=0;
	sqlint32 ho_maxcardcnt=0;
	sqlint16 ho_idr;
	EXEC SQL END DECLARE SECTION;
	//判断是否存在已平账记录:
	SQLCODE=0;
	hi_cardno=cardno;
	EXEC SQL 
		select maxcardcnt into 
		:ho_maxcardcnt:ho_idr 	
		from ykt_cur.t_cardaccdiff 
		where cardno=:hi_cardno and status='1' 
		and maxcardcnt=(select max(maxcardcnt) from  ykt_cur.t_cardaccdiff 
		where cardno=:hi_cardno and status='1' );
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		if(DB_NOTFOUND!=SQLCODE)
			return E_DB_CARDACCDIFF_R;
	}
	maxcardcnt=ho_maxcardcnt;
	return 0;
}
/*
int GetDeviceidByDevphyid(char *devphyid,int& deviceid)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char 	 hi_devphyid[31]="";//设备物理ID
	sqlint32 ho_deviceid=0;
	static	sqlint16 indicator=0;
	EXEC SQL END DECLARE SECTION;
	des2src(hi_devphyid,devphyid);
	EXEC SQL 
		select deviceid into :ho_deviceid:indicator
		from ykt_cur.t_device 
		where status='1' and devphyid=:hi_devphyid;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		if(DB_NOTFOUND==SQLCODE)
			return E_NOTEXIST_DEVICE;
		else
			return E_DB_DEVICE_R;
	}
	deviceid=ho_deviceid;
	return 0;
}
*/
/*
int UpdateSubsidy()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char 	hi_getsubsidystatus[2]="";
	char 	hi_putsubsidystatus[2]="";
	char 	hi_transdate[9]="";
	char 	hi_transtime[9]="";
	EXEC SQL END DECLARE SECTION;
	
	CAccTrans *pAccTrans=CAccTrans::getInstance();
	des2src(hi_transdate,pAccTrans->trans.transdate);
	des2src(hi_transtime,pAccTrans->trans.transtime);
	hi_getsubsidystatus[0]=SUBSIDY_STATUS_GET;
	hi_putsubsidystatus[0]=SUBSIDY_STATUS_PUT;
	EXEC SQL
		update ykt_cur.t_subsidy
		set getdate=:hi_transdate,
			gettime=:hi_transtime,
			status=:hi_getsubsidystatus
		where cardno=:hi_cardno and subsidyno>:hi_subsidyno and subsidyno<=:ho_maxsubsidyno; 
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		writelog(LOG_ERR,"cardno[%d]card subsidyno,max subsidyno[%d]",trans.cardno,trans.cardsubsidyno,ho_maxsubsidyno);
		return E_DB_SUBSIDY_U;
	}
	//更新账户表

}
*/
static int DoPosdtlAcc(T_t_posdtl& posdtl)
{	
		int ret=0;
		double maxmanagefee=0;
		CAccTrans *pAccTrans=CAccTrans::getInstance();
		TRANS& trans=pAccTrans->trans;
		ret=pAccTrans->Reset();
		if(ret)
			return ret;
		trans.offlineflag=1;
		trans.usecardflag=1;
		trans.cardflag=1;
		trans.shopid=posdtl.shopid;
		if(posdtl.cardno<1)
		{
			posdtl.status[0]=DTLSTATUS_INVALID;
			return ERRINFO(E_NOTEXIST_CARDNO,posdtl.cardno);
		}	
		//判断流水是否属于过期流水
		posdtl.status[0]=DTLSTATUS_FAIL;
		if(!posdtl.termid)
		{
			ret=GetDevIdByDevPhyId(&(posdtl.termid),posdtl.devphyid);
			if(ret)
			{
				return ret;
			}
		}
		trans.termid = posdtl.termid;
		//三九设备物理ID等于8,255标识水控的中途拔卡，
		//而汇多POS机255表示CRC校验错误
		if(0xFF==posdtl.transmark)
		{
		}
		//如果搭伙费达到发生额的%50,报错.
		switch(posdtl.transmark)
		{
			case 0x00://39锁卡流水、鑫三强锁卡
			case 0x01://汇多实时锁卡流水
			case 0x05://汇多联机锁卡流水(保留)
			case 0x91://汇多脱机锁卡流水
				ret=SaveLockCardTransdtl(posdtl);
				if(ret)
					return ret;
				posdtl.status[0]=DTLSTATUS_SUCCESS;
				return 0;
			case 0x02://中途拔卡
			case 0x61://汇多脱机灰记录(已上传)
			case 0xf1://汇多脱机灰记录(未上传)
			case 0x07://汇多联机灰记录
				ret=SaveConsumeFailTransdtl(posdtl);
				if(ret)
					return ret;
				posdtl.status[0]=DTLSTATUS_SUCCESS;
				return 0;
			case 0x08://汇多POS机消费取消
				ret=PosTransCancelProcess(posdtl);
				if(ret)
					return ret;
				posdtl.status[0]=DTLSTATUS_SUCCESS;
				return 0;
			case 0x41://脱机正常消费(联机上送)
			case 0x47://后付费模式正常上传
			case 0xd1://脱机正常消费(批上送)
			case 0xd7://后付费脱机消费(披上送)
			case 0xFF://水控中途拔卡
			case 0x99://正常消费流水 153		
			case 0x90://水控转账流水
				if(amtcmp(posdtl.amount,0)<0||amtcmp(posdtl.managefee,0)<0)
				{
					writelog(LOG_ERR,"posdtl amount [%.2lf]",posdtl.amount);
					posdtl.status[0]=DTLSTATUS_INVALID;
					return E_999_AMT; 						//上传流水交易发生金额有误
				}				
				if(amtcmp(posdtl.cardbefbal- posdtl.cardaftbal,posdtl.amount)!=0)
				{
					writelog(LOG_ERR,"posdtl cardbefbal[%.2lf] cardaftbal[%.2lf] amount [%.2lf] managefee[%.2lf]",posdtl.cardbefbal,posdtl.cardaftbal,posdtl.amount,posdtl.managefee);
					posdtl.status[0]=DTLSTATUS_INVALID;
					return E_999_CARD_BALANCE;					//上传流水出入卡余额有误
				}
				//如果搭伙费大于交易金额的50%,则认为是异常流水
				maxmanagefee=D4U5((posdtl.amount-posdtl.managefee)*maxshopfeerate);
				if(amtcmp(posdtl.managefee,maxmanagefee)>0)
				{
					writelog(LOG_ERR,"posdtl amount [%.2lf] managefee[%.2lf]maxfee[%.2lf]",posdtl.amount,posdtl.managefee,maxmanagefee);
					posdtl.status[0]=DTLSTATUS_EXCEPT;
					return E_MANAGEFEE_TOOBIG;
				}				
				ret=PosOfflineTransProcess(posdtl);
				if(ret)
					return ret;
				posdtl.status[0]=DTLSTATUS_SUCCESS;
				return 0;
			case 0xFE:
				//冲正交易,发生额为负数
				if(amtcmp(posdtl.amount,0)>0||amtcmp(posdtl.managefee,0)>0)
				{
					writelog(LOG_ERR,"posdtl amount [%.2lf]",posdtl.amount);
					posdtl.status[0]=DTLSTATUS_INVALID;
					return E_999_AMT; 						//上传流水交易发生金额有误
				}
				maxmanagefee=D4U5((posdtl.amount-posdtl.managefee)*maxshopfeerate);
				if(amtcmp(posdtl.managefee,maxmanagefee)<0)
				{
					writelog(LOG_ERR,"posdtl amount [%.2lf] managefee[%.2lf] maxfee[%.2lf]",posdtl.amount,posdtl.managefee,maxmanagefee);
					posdtl.status[0]=DTLSTATUS_EXCEPT;
					return E_MANAGEFEE_TOOBIG;
				}				
				ret=PosOfflineTransProcess(posdtl);
				if(ret)
					return ret;
				posdtl.status[0]=DTLSTATUS_SUCCESS;
				return 0;
				//补贴流水//219
			case 0xDB:
				posdtl.status[0]=DTLSTATUS_SUCCESS;
				return 0;
			case 0xF7://水控脱机灰记录
			case 0x77://水控联机灰记录
			case 0x67://后付费联机灰记录
			default:
				//记录失败流水
				posdtl.status[0]=DTLSTATUS_INVALID;
				return E_999_0XFF;	//把返回码置为交易标记
		}
		return 0;
}
static int DoBatchAcc(POSDTLVECT& PosdtlVect)
{
	CAccTrans *pAccTrans=CAccTrans::getInstance();
	int ret=pAccTrans->CheckCfgUpdate();
	if(ret)
		return ret;
	for(unsigned int i=0;i<PosdtlVect.size();i++)
	{
			ret=pAccTrans->Reset();
			if(ret)
				return ret;
			ret=DoPosdtlAcc(PosdtlVect[i]);
			if(ret)
			{
				PosdtlVect[i].errcode=ret;
				writelog(LOG_ERR,"DoPosdtlAcc cardno[%d] cardcnt[%d] Error[ret]=%d",PosdtlVect[i].cardno,PosdtlVect[i].cardcnt,ret);
				ret=db_rollback();
				if(ret)
				{
						writelog(LOG_ERR,"db_rollback error[ret]=%d",ret);
						return ret;
				}
			}
			if(PosdtlVect[i].status[0]!=DTLSTATUS_SUCCESS)
				db_rollback();
			ret=UpdPosdtlStatusByRowid(PosdtlVect[i].batchno,PosdtlVect[i].errcode,PosdtlVect[i].status);
			if(ret)
			{
					writelog(LOG_ERR,"UpdPosdtlStatusByRowid Error ret[%d]transdate[%s]devphyid[%s]devseqno[%d]",ret,PosdtlVect[i].transdate,PosdtlVect[i].devphyid,PosdtlVect[i].devseqno);
					db_rollback();
					return ret;
			}
			/*
			ret=UpdPosdtlStatus(PosdtlVect[i].transdate,PosdtlVect[i].devphyid,PosdtlVect[i].devseqno,PosdtlVect[i].errcode,PosdtlVect[i].status);
			*/
			ret=db_commit();
			if(ret)
			{
					db_rollback();
					writelog(LOG_ERR,"db_commit error[ret]=%d",ret);
					return ret;
			}
	}
	return 0;
}
static int DoBatchAcc4Bus(BUSDTLVECT& BusdtlVect)
{
	CAccTrans *pAccTrans=CAccTrans::getInstance();
	int ret=pAccTrans->CheckCfgUpdate();
	if(ret)
		return ret;
	for(unsigned int i=0;i<BusdtlVect.size();i++)
	{
			ret=pAccTrans->Reset();
			if(ret)
				return ret;
			ret=DoPosdtlAcc(BusdtlVect[i]);
			if(ret)
			{
				BusdtlVect[i].errcode=ret;
				writelog(LOG_ERR,"DoBatchAcc4Bus cardno[%d] cardcnt[%d] Error[ret]=%d",BusdtlVect[i].cardno,BusdtlVect[i].cardcnt,ret);
				ret=db_rollback();
				if(ret)
				{
						writelog(LOG_ERR,"db_rollback error[ret]=%d",ret);
						return ret;
				}
			}
			if(BusdtlVect[i].status[0]!=DTLSTATUS_SUCCESS)
				db_rollback();
			ret=UpdBusdtlStatusByRowid(BusdtlVect[i].batchno,BusdtlVect[i].errcode,BusdtlVect[i].status);
			if(ret)
			{
				writelog(LOG_ERR,"UpdPosdtlStatusByRowid Error ret[%d]transdate[%s]devphyid[%s]devseqno[%d]",ret,BusdtlVect[i].transdate,BusdtlVect[i].devphyid,BusdtlVect[i].devseqno);
				db_rollback();
				return ret;
			}
			ret=db_commit();
			if(ret)
			{
				db_rollback();
				writelog(LOG_ERR,"db_commit error[ret]=%d",ret);
				return ret;
			}
	}
	return 0;
}

int main(int argc,char *argv[])
{
	int ret=0;
	char dbname[256]="";
	char dbuser[256]="";
	char dbpwd[256]="";

	const long check_interval = 3600;//1小时
	time_t last_check = 0;
	time_t now = 0;

	char  szVerNo[61]={0};
	sprintf(szVerNo,"%s %s (%s)",argv[0],YKT_VERSION,__DATE__);
	if(argc>=2)
	{
		if(strncmp(argv[1],"-v",2)==0||strncmp(argv[1],"-V",2)==0)
		{
		   printf("%s\n",szVerNo);
		   return 0;
		}
		else
		{
			printf("posdtlacc: invalid option  %s\n",argv[1]);		
			return 0;
		}
	}	

	openlog("posdtlacc",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL1);
	//打开数据库连接
	char *p=getenv("YKT_DBNAME");
	if(p==NULL)
	{
		perror("get ENV VAR YKT_DBNAME ERR\n");
		writelog(LOG_ERR,"get ENV VAR YKT_DBNAME ERR");
		exit(1);
	}
	des2src(dbname,p);
	p=getenv("YKT_USER");
	if(p==NULL)
	{
		perror("get ENV VAR YKT_USER ERR\n");
		writelog(LOG_ERR,"get ENV VAR YKT_USER ERR");
		exit(2);
	}
	des2src(dbuser,p);
	p=getenv("YKT_PWD");
	if(p==NULL)
	{
		perror("get ENV VAR YKT_PWD ERR\n");
		writelog(LOG_ERR,"get ENV VAR YKT_PWD ERR");
		exit(3);
	}
	des2src(dbpwd,p);
	ret=db_connect(dbname,dbuser,dbpwd);
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		writelog(LOG_ERR,"connect to database err dbname[%s]",dbname);
	}
	CAccTrans *pAccTrans=CAccTrans::getInstance();
	ret=pAccTrans->LoadCfg();
	if(ret)
	{
		writelog(LOG_ERR,"loadcfg ret=%d",ret);
		return ret;
	}
	/*
	//取得最大的搭伙费比率
	ret=GetMaxShopFeeRate(maxshopfeerate);
	if(ret)
	{
		writelog(LOG_ERR,"GetMaxShopFeeRate ret=[%d]",ret);
		return ret;
	}
	*/
	//交易正常则进行下面的处理
	POSDTLVECT PosdtlRect;
	BUSDTLVECT BusdtlRect;
	while(1)
	{
		ret=0;
		if(!IsDatabaseConnect())
		{
			writelog(LOG_INFO,"reconnect database ...");
			ret=db_connect(dbname,dbuser,dbpwd);
			if(ret)
			{
				db_chk_err(__FILE__,__LINE__,&sqlca);
				writelog(LOG_ERR,"connect to database err dbname[%s]",dbname);
				sleep(30);
				continue;
			}
		}
		GetPosdtlVect(0,PosdtlRect,"1");
		if(PosdtlRect.size())
			DoBatchAcc(PosdtlRect);
		GetBusdtlVect(BusdtlRect,"1");
		if(BusdtlRect.size())
			DoBatchAcc4Bus(BusdtlRect);
		else
		{
			now=time(0);
			if(now-last_check>check_interval)
			{
				//处理异常流水
				last_check=now;
				GetPosdtlVect(0,PosdtlRect,"2");
				if(PosdtlRect.size())
					DoBatchAcc(PosdtlRect);
				GetBusdtlVect(BusdtlRect,"2");
				if(BusdtlRect.size())
					DoBatchAcc4Bus(BusdtlRect);				
			}
			else
				sleep(1);//便于实时响应
		}
	}
	db_disconnect();
	closelog();
	exit(0) ;
}
