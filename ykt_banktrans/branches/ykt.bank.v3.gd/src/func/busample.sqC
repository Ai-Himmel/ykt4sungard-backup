#define _IN_SQC_   // 每个SQC源文件必须包括本定义，以激活 gmsqc.h中的 ：EXEC SQL WHENEVER SQLERROR CALL SQLErrorHandler();

ESQL #include "fdsqc.h"

ESQL #include <string.h>
ESQL #include <stdio.h>

EXEC SQL INCLUDE SQLCA;

// 函数名：FBuSample
// 编程：孔令国 2004-07-29 10:18:24
// 一个bu的业务处理的例子，说明前后台交互的例子
// 返回：0为成功，1为失败
// 参数  : TRUSERID *handle 本请求数据的通讯请求端标识
// 参数  : ST_PACK *rPack 业务处理请求数据
// 参数  : int *iRetCode 处理结果的返回代码，0表示成功，其他就是处理失败，在本业务处理函数调用之前，已经被初始化为0
// 参数  : char *szMsg 处理结果的返回信息，在本业务处理函数调用之前，已经被初始化为空""

int FBuSample(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *iRetCode,char *szMsg)
{
	 ST_CPACK aPack;
   ST_PACK *pp = &(aPack.pack);

   ResetNormalCPack(&aPack,0,1);  // 用于根据请求包整理本CPACK包的头清空包头位图和包体中的数据
   EXEC SQL BEGIN DECLARE SECTION;
   char name[50];
   EXEC SQL END DECLARE SECTION;
   
   SetCol(handle,F_SNAME,F_SNAME2,F_VSMESS,0);  // 准备处理结果中在ST_PACK中使用的字段名,此处可以根据需要和对CPack的说明更改
 //  SetCol(handle,F_VSMESS,0);
   /*下面为具体填数据过程，实际数据应从数据库或其它途径获得*/
   strcpy(pp->sname,"Hi");
   strcpy(pp->sname2,"HeHe");
   strcpy(szMsg,"So Simple");
   //PutRow(handle,pp,iRetCode,szMsg);  // 将结果数据存入，说明：szMsg为返回的标准消息，按照项目约定。
   strcpy(pp->vsmess,szMsg);
   *iRetCode = 1;
  
   PutRow(handle,pp,iRetCode,szMsg);
   /*if (rPack->lvol2>0)
      {
         int iSourceNo = rPack->lvol0;
         int iDestNo = rPack->lvol1;
         int iFuncNo = rPack->lvol2;
         if (rPack->smain_flag[0]==0)
         {
            rPack->smain_flag[0]=PM_INACK;
         }
         aPack.head.RequestType = iRequest;
         aPack.head.firstflag = 1;
         aPack.head.nextflag = 0;
         aPack.head.recCount = 1;
         memset(aPack.head.ParmBits,0,sizeof(aPack.head.ParmBits));
         SetParmBit(&aPack.head,F_SNAME);
         SetParmBit(&aPack.head,F_SNAME2);
         PushData(iSourceNo,iDestNo,iFuncNo,rPack->lvol3,&aPack,rPack->smain_flag[0],rPack->lvol4);
      }*/
   return 0;
} 