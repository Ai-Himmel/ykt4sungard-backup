/*---------------------------------------------------------------------------*/
/*  プロジェクト : POPLAR/ANZU_L                                             */
/*  ファイル名   : ini_cpu.c                                                */
/*  モジュ-ル    : void InitializeCPU(void)                                  */
/*                 void INI_Start10msTimer(void)                             */
/*                 void InitializeSystem(void)                               */
/*                                                                           */
/*  作成者       : 野瀬敏弘                                                  */
/*  日  付       : 97.08.07                                                  */
/*  概  要       : SH7043 CPU初期設定                                        */
/*  修正履歴     : 以下の理由によりＰＦＣのＩ／Ｏレジスタ設定を外ＲＯＭの関数へ移動 */
/*  ①ＰＦＣのコントロールレジスタの設定はPOPLAR_B/ANZU_L共通だが、          */
/*    Ｉ／Ｏレジスタの設定に相違がある                                       */
/*  ②Ｉ／Ｏレジスタ→コントロールレジスタの順で設定を行うとリードが衝突し、 */
/*    正しいデータリードができない                                           */
/*---------------------------------------------------------------------------*/
#include "\src\atlanta\define\product.h"

#if (PRO_CPU_VERSION == SH7043_A)
#include "\src\cpu\sh7043_a\irom\define\sh_sys.h"
#include "\src\cpu\sh7043_a\irom\define\cpu_def.h"
#else
#include "\src\atlanta\sh7043\define\sh_sys.h"
#include "\src\atlanta\sh7043\define\cpu_def.h"
#endif

#include "\src\atlanta\define\mntsw_a.h"
#include "\src\atlanta\define\mntsw_f.h"
#include "\src\atlanta\define\dma_pro.h"

/* 位相ずれ対策 インターバルタイマー 割り込みの処理を2回に分ける T.Nose 1998/01/20 */
CONST UBYTE INT_Interval5ms = 1;
extern UBYTE SYS_TimerJobSelectSwitch;

void INT_InitializeExternalInterrupt(void);
void InitializeMonitor(void);
extern UBYTE SYB_MaintenanceSwitch[];
#if (PRO_RDS_FLASH_ROM_WRITE == ENABLE) /* 1998/04/07  By T.Yamaguchi */
#include "\src\atlanta\define\fcm_def.h"
#include "\src\atlanta\define\mntsw_e.h"
#include "\src\atlanta\define\cmn_pro.h"

#if (PRO_CPU_VERSION == SH7043_A)
#include "\src\cpu\sh7043_a\irom\define\io_pro.h"
#include "\src\cpu\sh7043_a\irom\define\sh_port.h"
#else
#include "\src\atlanta\sh7043\define\io_pro.h"
#include "\src\atlanta\sh7043\define\sh_port.h"
#endif

#include "\src\atlanta\ext_v\sys_port.h"
extern UBYTE SYB_FlashROM_WriteStatus;
extern UWORD SYB_ROM_DataSumcheck;
extern UBYTE SYB_MaintenanceSwitch[];
void FLA_MEM_ClearAll(void);
void FLA_INI_Entry(void);
UBYTE FLA_CheckSumROMData(void);
UBYTE FLA_CheckModelROMData(void);
void FLA_ClearSumROMData(void);
void FLA_ClearModelROMData(void);
#endif

void SetVBR(void); /* ini_int.src */

#pragma section INICPU

/* ロケート時のセクション名 "CINICPU" */
/* 内蔵ＲＯＭに置くこと               */
CONST UBYTE ROMAreaIndicater[] = "Ext.ROM";

/******************************************************************************
	module		:[SH7043 CPUの初期化]
	function	:[
		1.バスコントロールレジスタ設定
		2.ウェイトコントロールレジスタ設定
		3.内蔵ＤＭＡＣ初期設定
		4.ピンファンクションコントローラー・コントロールレジスタ設定
	]
	condition	:[
		この関数は内蔵ＲＯＭ内に置き、バス設定を終えてから外部ＲＯＭ上の
		プログラムへ移行する事
	]
	return		:[なし]
	common		:[なし]
	machine		:[SH704X]
	language	:[SHC]
	keyword		:[INI]
	date		:[1996/10/11]
	author		:[野瀬敏弘]
******************************************************************************/
/* ロケート時のセクション名 "PINICPU" */
void InitializeCPU(void)
{

	/*----------------------------------------------*/
	/* ＢＳＣ（バスステートコントローラー）の設定   */
	/*----------------------------------------------*/
	/*----------------------------------------------*/
	/* ＢＣＲ１（バスコントロールレジスタ１）の設定 */
	/* ・ＭＴＵ制御レジスタアクセス許可             */
	/* ・ＣＳ３空間は通常空間                       */
	/* ・ＣＳ３空間のバスサイズはワードサイズ       */
	/* ・ＣＳ２空間のバスサイズはワードサイズ       */
	/* ・ＣＳ１空間のバスサイズはワードサイズ       */
	/* ・ＣＳ０空間のバスサイズはワードサイズ       */
	/*----------------------------------------------*/
	SH__BCR1 = (BCR1_MTU_WRITE_ENABLE + BCR1_CS3_WORD + BCR1_CS2_WORD + BCR1_CS1_WORD + BCR1_CS0_WORD);

	/*----------------------------------------------*/
	/* ＢＣＲ２（バスコントロールレジスタ２）の設定 */
	/* ここでは初期値のままとします。以下初期値     */
	/* ・ＣＳ３空間連続アクセス後３アイドルサイクル */
	/* ・ＣＳ２空間連続アクセス後３アイドルサイクル */
	/* ・ＣＳ１空間連続アクセス後３アイドルサイクル */
	/* ・ＣＳ０空間連続アクセス後３アイドルサイクル */
	/* ・ＣＳ３空間連続アクセス時１アイドルサイクル */
	/* ・ＣＳ２空間連続アクセス時１アイドルサイクル */
	/* ・ＣＳ１空間連続アクセス時１アイドルサイクル */
	/* ・ＣＳ０空間連続アクセス時１アイドルサイクル */
	/* ・ＣＳ３空間／ＣＳアサート拡張有り           */
	/* ・ＣＳ２空間／ＣＳアサート拡張有り           */
	/* ・ＣＳ１空間／ＣＳアサート拡張有り           */
	/* ・ＣＳ０空間／ＣＳアサート拡張有り           */
	/*----------------------------------------------*/
/*	SH__BCR2 = (BCR2_CS3_ASSERT + BCR2_CS1_ASSERT + BCR2_CS1_1_IDLE); */

	/*--------------------------------------------------------------*/
	/* ＷＣＲ１（ウェイトステートコントロールレジスタ１）の設定     */
	/* ここでは初期値のままとします。以下初期値                     */
	/* ・ＣＳ３空間は１５ウェイト設定                               */
	/* ・ＣＳ２空間は１５ウェイト設定                               */
	/* ・ＣＳ１空間は１５ウェイト設定                               */
	/* ・ＣＳ０空間は１５ウェイト設定                               */
	/*--------------------------------------------------------------*/
/*	SH__WCR1 = (WCR1_CS3_3WAIT + WCR1_CS2_NO_WAIT + WCR1_CS1_2WAIT + WCR1_CS0_3WAIT); */

	/*--------------------------------------------------------------*/
	/* ＷＣＲ２（ウェイトステートコントロールレジスタ２）の設定     */
	/* ここでは初期値のままとします。以下初期値                     */
	/* ・ＤＲＡＭ空間ＤＭＡノーウェイト設定                         */
	/* ・ＣＳ空間ＤＭＡ１５ウェイト設定                             */
	/*--------------------------------------------------------------*/
/*	SH__WCR2 = (WCR2_DRAM_DMA_1WAIT + WCR2_CS_DMA_2WAIT); */

	/*--------------------------------------------------------------*/
	/* ＤＣＲ（ＤＲＡＭエリアコントロールレジスタ）の設定           */
	/* ここでは初期値のままとします。以下初期値                     */
	/* 注）ＤＲＡＭアクセス開始後は設定変更できません               */
	/* ・ＲＡＳプリチャージサイクル数１．５サイクル                 */
	/* ・ＲＡＳ－ＣＡＳ遅延サイクル数１サイクル                     */
	/* ・ＲＡＳアサートサイクル数２．５サイクル                     */
	/* ・ＤＲＡＭライトサイクル数２サイクル                         */
	/* ・ＤＲＡＭリードサイクル数２サイクル                         */
	/* ・ＤＲＡＭアイドルサイクル無し                               */
	/* ・バースト禁止                                               */
	/* ・ＲＡＳアップモードＤＲＡＭアクセス                         */
	/* ・ＤＲＡＭバス幅８ビット                                     */
	/* ・ＤＲＡＭアドレスマルチプレクス９ビット                     */
	/*--------------------------------------------------------------*/
/*	SH__DCR = (DCR_RAS_AST_25CYCLE + DCR_DRAM_WR_3CYCLE + DCR_DRAM_RD_3CYCLE + DCR_DRAMBASS_WORD + DCR_AMX_10BIT); */

	/*--------------------------------------------------------------*/
	/* ＲＴＣＳＲ（リフレッシュタイマーコントロール・ステータスレジスタ）の設定 */
	/* ここでは初期値のままとします。以下初期値                     */
	/* ・コンペアマッチによる割込要求禁止                           */
	/* ・カウントアップ停止                                         */
	/* ・ＤＲＡＭのリフレッシュをしない                             */
	/* ・ＣＡＳビフォアＲＡＳリフレッシュ                           */
	/*--------------------------------------------------------------*/
/*	SH__RTCSR = (RTCSR_CLK_2 + RTSC_RFSH_ENABLE); */

	/*--------------------------------------------------------------*/
	/* ＲＴＣＮＴ（リフレッシュタイマカウンタ）の設定               */
	/* ここでは初期値のままとします。以下初期値                     */
	/* ・タイマカウンタ０                                           */
	/*--------------------------------------------------------------*/
/*	SH__RTCNT = 0x0000; */

	/*--------------------------------------------------------------*/
	/* ＲＴＣＯＲ（リフレッシュタイムコンスタントレジスタ）の設定   */
	/* ここでは初期値のままとします。以下初期値                     */
	/* ・コンペアマッチ周期０                                       */
	/*--------------------------------------------------------------*/
/*	SH__RTCOR = 0x00A0; */

	/*------------------------------------------------*/
	/* ＰＦＣ（ピンファンクションコントローラ）の設定 */
	/*------------------------------------------------*/

	/*--------------------------------------------------------------*/
	/* ＰＡＣＲＨ（ポートＡコントロールレジスタＨ）の設定           */
	/* ・PA23/PA22/PA21/PA20/PA19/PA18/PA17/PA16：汎用端子          */
	/*--------------------------------------------------------------*/
	PFC__PACRH = (PACRH_PA16_23_GP + PACRH_PA19MD_BACK + PACRH_PA18MD_BREQ);

	/*--------------------------------------------------------------*/
	/* ＰＡＣＲＬ１（ポートＡコントロールレジスタＬ１）の設定       */
	/* ・PA14：リード出力                                           */
	/* ・PA11：チップセレクト（ＣＳ１）出力                         */
	/* ・PA10：チップセレクト（ＣＳ０）出力                         */
	/* ・PA15/PA14/PA13/PA12/PA9/PA8/：汎用入出力                   */
	/*--------------------------------------------------------------*/
	PFC__PACRL1 = (PACRL1_PA14MD_RD + PACRL1_PA11MD_CS1 + PACRL1_PA10MD_CS0);

	/*--------------------------------------------------------------*/
	/* ＰＡＣＲＬ２（ポートＡコントロールレジスタＬ２）の設定       */
	/* ・PA7/PA6/PA5/PA4/PA3/PA2/PA1/PA0：汎用入出力                */
	/*--------------------------------------------------------------*/
	PFC__PACRL2 = PACRL2_PA0_7_GP;

	/*--------------------------------------------------------------*/
	/* ＰＢＣＲ１（ポートＢコントロールレジスタ１）の設定           */
	/* ・PB9：アドレス出力（Ａ２１）                                */
	/* ・PB8：アドレス出力（Ａ２０）                                */
	/*--------------------------------------------------------------*/
	PFC__PBCR1 = (PBCR1_PB9MD_A21 + PBCR1_PB8MD_A20);

	/*--------------------------------------------------------------*/
	/* ＰＢＣＲ２（ポートＢコントロールレジスタ２）の設定           */
	/* ・PB7：アドレス出力（Ａ１９）                                */
	/* ・PB6：アドレス出力（Ａ１８）                                */
	/* ・PB1：アドレス出力（Ａ１７）                                */
	/* ・PB0：アドレス出力（Ａ１６）                                */
	/* ・PB5/PB4/PB3/PB2：汎用入出力                                */
	/*--------------------------------------------------------------*/
	PFC__PBCR2 = (PBCR2_PB7MD_A19 + PBCR2_PB6MD_A18 + PBCR2_PB1MD_A17 + PBCR2_PB0MD_A16);

	/*--------------------------------------------------------------*/
	/* ＰＣＣＲ（ポートＣコントロールレジスタ）の設定               */
	/* ・PC15：アドレス出力（Ａ１５）                               */
	/* ・PC14：アドレス出力（Ａ１４）                               */
	/* ・PC13：アドレス出力（Ａ１３）                               */
	/* ・PC12：アドレス出力（Ａ１２）                               */
	/* ・PC11：アドレス出力（Ａ１１）                               */
	/* ・PC10：アドレス出力（Ａ１０）                               */
	/* ・PC9：アドレス出力（Ａ９）                                  */
	/* ・PC8：アドレス出力（Ａ８）                                  */
	/* ・PC7：アドレス出力（Ａ７）                                  */
	/* ・PC6：アドレス出力（Ａ６）                                  */
	/* ・PC5：アドレス出力（Ａ５）                                  */
	/* ・PC4：アドレス出力（Ａ４）                                  */
	/* ・PC3：アドレス出力（Ａ３）                                  */
	/* ・PC2：アドレス出力（Ａ２）                                  */
	/* ・PC1：アドレス出力（Ａ１）                                  */
	/* ・PC0：アドレス出力（Ａ０）                                  */
	/*--------------------------------------------------------------*/
	PFC__PCCR = (PCCR_PC15MD_A15 + PCCR_PC14MD_A14 + PCCR_PC13MD_A13 + PCCR_PC12MD_A12 + PCCR_PC11MD_A11 + PCCR_PC10MD_A10 + PCCR_PC9MD_A9 + PCCR_PC8MD_A8 + PCCR_PC7MD_A7 + PCCR_PC6MD_A6 + PCCR_PC5MD_A5 + PCCR_PC4MD_A4 + PCCR_PC3MD_A3 + PCCR_PC2MD_A2 + PCCR_PC1MD_A1 + PCCR_PC0MD_A0);

	/*--------------------------------------------------------------*/
	/* ＰＤＣＲＨ１（ポートＤコントロールレジスタＨ１）の設定       */
	/* ・PD29：チップセレクト（ＣＳ３）出力                         */
	/* ・PD28：チップセレクト（ＣＳ２）出力                         */
	/* ・PD31/PD30/PD27/PD26/PD25/PD24：汎用入出力                  */
	/*--------------------------------------------------------------*/
	PFC__PDCRH1 = (PDCRH1_PD29MD_CS3 + PDCRH1_PD28MD_CS2);

	/*--------------------------------------------------------------*/
	/* ＰＤＣＲＨ２（ポートＤコントロールレジスタＨ２）の設定       */
	/* ・PD23/PD22/PD21/PD20/PD19/PD18/PD17/PA16：汎用入出力        */
	/*--------------------------------------------------------------*/
	PFC__PDCRH2 = PDCRH2_PD16_23_GP;

	/*--------------------------------------------------------------*/
	/* ＰＤＣＲＬ（ポートＤコントロールレジスタＬ）の設定           */
	/* ・PD15：データ出力（Ｄ１５）                                 */
	/* ・PD14：データ出力（Ｄ１４）                                 */
	/* ・PD13：データ出力（Ｄ１３）                                 */
	/* ・PD12：データ出力（Ｄ１２）                                 */
	/* ・PD11：データ出力（Ｄ１１）                                 */
	/* ・PD10：データ出力（Ｄ１０）                                 */
	/* ・PD9：データ出力（Ｄ９）                                    */
	/* ・PD8：データ出力（Ｄ８）                                    */
	/* ・PD7：データ出力（Ｄ７）                                    */
	/* ・PD6：データ出力（Ｄ６）                                    */
	/* ・PD5：データ出力（Ｄ５）                                    */
	/* ・PD4：データ出力（Ｄ４）                                    */
	/* ・PD3：データ出力（Ｄ３）                                    */
	/* ・PD2：データ出力（Ｄ２）                                    */
	/* ・PD1：データ出力（Ｄ１）                                    */
	/* ・PD0：データ出力（Ｄ０）                                    */
	/*--------------------------------------------------------------*/
	PFC__PDCRL = (PDCRL_PD15MD_D15 + PDCRL_PD14MD_D14 + PDCRL_PD13MD_D13 + PDCRL_PD12MD_D12 + PDCRL_PD11MD_D11 + PDCRL_PD10MD_D10 + PDCRL_PD9MD_D9 + PDCRL_PD8MD_D8 + PDCRL_PD7MD_D7 + PDCRL_PD6MD_D6 + PDCRL_PD5MD_D5 + PDCRL_PD4MD_D4 + PDCRL_PD3MD_D3 + PDCRL_PD2MD_D2 + PDCRL_PD1MD_D1 + PDCRL_PD0MD_D0);

	/*--------------------------------------------------------------*/
	/* ＰＥＣＲ１（ポートＥコントロールレジスタ１）の設定           */
	/* ・PE15～PE8：汎用入出力                                      */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PECR1 = PECR1_PE8_15MD_GP;

	/*--------------------------------------------------------------*/
	/* ＰＥＣＲ２（ポートＥコントロールレジスタ２）の設定           */
	/* ・PE7～PE0：汎用入出力                                       */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PECR2 = PECR2_PE0_7_GP;

	return;
}

/******************************************************************************
	module		:[ポインタエリアのアドレスを獲得する]
	function	:[
		1.ＣＳ０からＣＳ３まで１２８ｋＢｙｔｅ間隔で８文字読み出す
		2.読み出した文字列がROMAreaIndicater[]と一致したアドレスを返す
	]
	condition	:[
		この関数は内蔵ＲＯＭ内に置くこと
	]
	return		:[
		ポインタエリアの先頭アドレス
	]
	common		:[なし]
	machine		:[SH704X]
	language	:[SHC]
	keyword		:[INI]
	date		:[1998/08/20]
	author		:[野瀬敏弘]
******************************************************************************/
UBYTE *GetVectorAreaTopAddress(void)
{
	UDWORD adr;
	UDWORD count;

	for (adr = 0x200000; adr < 0x1000000; adr = adr + 0x20000) {
		for (count = 0; count < 8; count++) {
			if ((*(UBYTE *)(adr + count)) == ROMAreaIndicater[count]) {
				if (count == 7) {
					adr = adr + count + 1;
					return((UBYTE *)adr);
				}
			}
			else {
				break;
			}
		}
	}
	return(0);	/* 有り得ません */
}

/******************************************************************************
	module		:[ポインタエリアを内蔵ＲＡＭへ転送する]
	function	:[
		1.ＣＳ０からＣＳ３まで１２８ｋＢｙｔｅ間隔で８文字読み出す
		2.読み出した文字列がROMAreaIndicater[]と一致したアドレスを
		  外付けＲＯＭ（Ｆｌａｓｈ等）の先頭アドレスとする
		3.文字列の次のアドレスから、一定サイズ（ポインタエリア分）を
		  内蔵ＲＡＭのポインタエリアへコピーする
	]
	condition	:[
		この関数は内蔵ＲＯＭ内に置くこと
	]
	return		:[なし]
	common		:[なし]
	machine		:[SH704X]
	language	:[SHC]
	keyword		:[INI]
	date		:[1998/08/20]
	author		:[野瀬敏弘]
******************************************************************************/
void INI_CopyVectorAreaToCPURAM(void)
{
	UBYTE *src;
	UBYTE *dst;
	UBYTE count;

	src = GetVectorAreaTopAddress();
	dst = (UBYTE *)0xFFFFFA54;
	for (count = 0; count < 0x9C; count++) { /* 156byte TBD 1998/09/10 <-0xA4*/
		*dst = *src;
		dst++;
		src++;
	}

	return;
}

#pragma section /* INICPU end */



/******************************************************************************
	module		:[SH7043 CPUの初期化]
	function	:[
		1.バスコントロールレジスタ設定
		2.ウェイトコントロールレジスタ設定
		3.内蔵ＤＭＡＣ初期設定
		4.ピンファンクションコントローラー・コントロールレジスタ設定
	]
	condition	:[
		各機種別のＣＰＵ設定
	]
	return		:[なし]
	common		:[なし]
	machine		:[SH704X]
	language	:[SHC]
	keyword		:[INI]
	date		:[1996/10/11]
	author		:[野瀬敏弘]
******************************************************************************/
void MachineUniqCPUInitial(void)
{
	/*----------------------------------------------*/
	/* ＢＣＲ２（バスコントロールレジスタ２）の設定 */
	/* ・ＣＳ３空間連続アクセス時０アイドルサイクル */
	/* ・ＣＳ２空間連続アクセス時０アイドルサイクル */
	/* ・ＣＳ１空間連続アクセス時１アイドルサイクル */
	/* ・ＣＳ０空間連続アクセス時０アイドルサイクル */
	/* ・ＣＳ３空間／ＣＳアサート拡張有り           */
	/* ・ＣＳ１空間／ＣＳアサート拡張有り           */
	/*----------------------------------------------*/
	SH__BCR2 = (BCR2_CS3_ASSERT + BCR2_CS1_ASSERT + BCR2_CS1_1_IDLE);

	/*--------------------------------------------------------------*/
	/* ＷＣＲ１（ウェイトステートコントロールレジスタ１）の設定     */
	/* ・ＣＳ３空間は３ウェイト設定                                 */
	/* ・ＣＳ２空間はノーウェイト設定                               */
	/* ・ＣＳ１空間は２ウェイト設定 <-３ 1997/08/27                 */
	/* ・ＣＳ０空間は２ウェイト設定 <-３ 1997/09/05                 */
	/*--------------------------------------------------------------*/
	SH__WCR1 = (WCR1_CS3_3WAIT + WCR1_CS2_NO_WAIT + WCR1_CS1_2WAIT + WCR1_CS0_2WAIT);

	/*--------------------------------------------------------------*/
	/* ＷＣＲ２（ウェイトステートコントロールレジスタ２）の設定     */
	/* ・ＤＲＡＭ空間ＤＭＡ１ウェイト設定                           */
	/* ・ＣＳ空間ＤＭＡ２ウェイト設定                               */
	/*--------------------------------------------------------------*/
	SH__WCR2 = (WCR2_DRAM_DMA_1WAIT + WCR2_CS_DMA_2WAIT);

	/*--------------------------------------------------------------*/
	/* ＤＣＲ（ＤＲＡＭエリアコントロールレジスタ）の設定           */
	/* ・ＲＡＳプリチャージサイクル数１．５サイクル                 */
	/* ・ＲＡＳ－ＣＡＳ遅延サイクル数２サイクル                     */
	/* ・ＲＡＳアサートサイクル数２．５サイクル                     */
	/* ・ＤＲＡＭライトサイクル数３サイクル                         */
	/* ・ＤＲＡＭリードサイクル数３サイクル                         */
	/* ・ＤＲＡＭアイドルサイクル無し                               */
	/* ・バースト禁止                                               */
	/* ・ＲＡＳアップモードＤＲＡＭアクセス                         */
	/* ・ＤＲＡＭバス幅１６ビット                                   */
	/* ・ＤＲＡＭアドレスマルチプレクス１０ビット                   */
	/*--------------------------------------------------------------*/
	SH__DCR = (DCR_RAS_AST_25CYCLE + DCR_DRAM_WR_3CYCLE + DCR_DRAM_RD_3CYCLE + DCR_DRAMBASS_WORD + DCR_AMX_10BIT + DCR_RAS_DELAY_2CYCLE);

	/*--------------------------------------------------------------*/
	/* ＲＴＣＳＲ（リフレッシュタイマーコントロール・ステータスレジスタ）の設定 */
	/* ・コンペアマッチによる割込要求禁止                           */
	/* ・システムクロック／２でカウント                             */
	/* ・ＤＲＡＭのリフレッシュをする                               */
	/* ・ＣＡＳビフォアＲＡＳリフレッシュ                           */
	/*--------------------------------------------------------------*/
	SH__RTCSR = (RTCSR_CLK_2 + RTSC_RFSH_ENABLE);

	/*--------------------------------------------------------------*/
	/* ＲＴＣＮＴ（リフレッシュタイマカウンタ）の設定               */
	/* ・タイマカウンタをセット                                     */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	SH__RTCNT = 0x0000;

	/*--------------------------------------------------------------*/
	/* ＲＴＣＯＲ（リフレッシュタイムコンスタントレジスタ）の設定   */
	/* ・２００×７１．４ｎｓ＝１４．２８μｓ（リフレッシュサイクル）本ちゃん */
	/* ・１６０×１００ｎｓ＝１６μｓ（リフレッシュサイクル）ＩＣＥ用         */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	SH__RTCOR = 0x00A0;


	/*------------------------------------------------*/
	/* ＤＭＡＣ（ＳＨ７０４３内蔵）の設定             */
	/*------------------------------------------------*/
	/*----------------------------------------------------------------*/
	/* オペレーションレジスタ（ＤＭＡＯＲ）の設定                     */
	/* アドレスエラーフラグクリア                                     */
	/* ＮＭＩフラグクリア                                             */
	/*----------------------------------------------------------------*/
	DMA__DMAOPR &= 0; /* ０初期化 念のため */

	/*----------------------------------------------------------------*/
	/* チャネルコントロールレジスタ０（ＣＨＣＲ０）の設定             */
	/* アクノリッジレベルハイアクティブ（初期値）                     */
	/* 外部リクエスト、デュアルアドレスモード                         */
	/* ＤＲＥＱ立ち下がりエッジ検出                                   */
	/* サイクルスチールモード（初期値）                               */
	/* ＴＣ割込み許可                                                 */
	/*----------------------------------------------------------------*/
	DMA__CHCR0 &= 0; /* ０初期化 念のため */
	DMA__CHCR0 |= (CHCR_IE + CHCR_DS + CHCR_AL);

	/*----------------------------------------------------------------*/
	/* チャネルコントロールレジスタ１（ＣＨＣＲ１）の設定             */
	/* アクノリッジレベルハイアクティブ（初期値）                     */
	/* 外部リクエスト、デュアルアドレスモード                         */
	/* ＤＲＥＱ立ち下がりエッジ検出                                   */
	/* サイクルスチールモード（初期値）                               */
	/* ＴＣ割込み許可                                                 */
	/*----------------------------------------------------------------*/
	DMA__CHCR1 &= 0; /* ０初期化 念のため */
	DMA__CHCR1 |= (CHCR_IE + CHCR_DS + CHCR_AL);

	/*----------------------------------------------------------------*/
	/* チャネルコントロールレジスタ２（ＣＨＣＲ２）の設定             */
	/* 動作禁止                                                       */
	/*----------------------------------------------------------------*/
	DMA__CHCR2 &= 0; /* ０初期化 念のため */

	/*----------------------------------------------------------------*/
	/* チャネルコントロールレジスタ３（ＣＨＣＲ３）の設定             */
	/* 動作禁止                                                       */
	/*----------------------------------------------------------------*/
	DMA__CHCR3 &= 0; /* ０初期化 念のため */

	/*----------------------------------------------------------------*/
	/* オペレーションレジスタ（ＤＭＡＯＲ）の設定                     */
	/* チャネル優先順位 ラウンドロビン                                */
	/* ＤＭＡＣ動作許可                                               */
	/*----------------------------------------------------------------*/
	DMA__DMAOPR = (DMAOPR_RTRY | DMAOPR_DME);

	/*----------------------------------------------------------------*/
	/* 内蔵ＤＭＡＣ ＣＨ０ ＣＨ１ の割込みレベルをＦへセット          */
	/*----------------------------------------------------------------*/
	SH__IPRC |= (DMAC0_LEVEL | DMAC1_LEVEL);


	/*------------------------------------------------*/
	/* ＰＦＣ（ピンファンクションコントローラ）の設定 */
	/*------------------------------------------------*/

	/*--------------------------------------------------------------*/
	/* ＰＡＣＲＨ（ポートＡコントロールレジスタＨ）の設定           */
	/* ・PA23/PA22/PA21/PA20/PA17/PA16：汎用端子                    */
	/* ・PA19：ＢＡＣＫ                                             */
	/* ・PA18：バス権要求出力                                       */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PACRH = (PACRH_PA16_23_GP + PACRH_PA19MD_BACK + PACRH_PA18MD_BREQ);

	/*--------------------------------------------------------------*/
	/* ＰＡＣＲＬ１（ポートＡコントロールレジスタＬ１）の設定       */
	/* ・PA14：リード出力                                           */
	/* ・PA13：上位側ライト出力                                     */
	/* ・PA12：下位側ライト出力                                     */
	/* ・PA11：チップセレクト（ＣＳ１）出力                         */
	/* ・PA10：チップセレクト（ＣＳ０）出力                         */
	/* ・PA9/PA8/：汎用入出力                                       */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PACRL1 = (PACRL1_PA8_15_GP + PACRL1_PA14MD_RD + PACRL1_PA13MD_WRH + PACRL1_PA12MD_WRL + PACRL1_PA11MD_CS1 + PACRL1_PA10MD_CS0);

	/*--------------------------------------------------------------*/
	/* ＰＡＣＲＬ２（ポートＡコントロールレジスタＬ２）の設定       */
	/* ・PA7/PA6/PA5/PA4/PA3/PA2/PA1/PA0：汎用入出力                */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PACRL2 = PACRL2_PA0_7_GP;

	/*--------------------------------------------------------------*/
	/* ＰＢＣＲ１（ポートＢコントロールレジスタ１）の設定           */
	/* ・PB9：アドレス出力（Ａ２１）                                */
	/* ・PB8：アドレス出力（Ａ２０）                                */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PBCR1 = (PBCR1_PB9MD_A21 + PBCR1_PB8MD_A20);

	/*--------------------------------------------------------------*/
	/* ＰＢＣＲ２（ポートＢコントロールレジスタ２）の設定           */
	/* ・PB7：アドレス出力（Ａ１９）                                */
	/* ・PB6：アドレス出力（Ａ１８）                                */
	/* ・PB5：リード／ライト出力                                    */
	/* ・PB4：カラムアドレスストローブ                              */
	/* ・PB3：カラムアドレスストローブ                              */
	/* ・PB2：ロウアドレスストローブ                                */
	/* ・PB1：アドレス出力（Ａ１７）                                */
	/* ・PB0：アドレス出力（Ａ１６）                                */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PBCR2 = (PBCR2_PB7MD_A19 + PBCR2_PB6MD_A18 + PBCR2_PB5MD_RDWR + PBCR2_PB4MD_CASH + PBCR2_PB3MD_CASL + PBCR2_PB2MD_RAS + PBCR2_PB1MD_A17 + PBCR2_PB0MD_A16);

	/*--------------------------------------------------------------*/
	/* ＰＣＣＲ（ポートＣコントロールレジスタ）の設定               */
	/* ・PC15：アドレス出力（Ａ１５）                               */
	/* ・PC14：アドレス出力（Ａ１４）                               */
	/* ・PC13：アドレス出力（Ａ１３）                               */
	/* ・PC12：アドレス出力（Ａ１２）                               */
	/* ・PC11：アドレス出力（Ａ１１）                               */
	/* ・PC10：アドレス出力（Ａ１０）                               */
	/* ・PC9：アドレス出力（Ａ９）                                  */
	/* ・PC8：アドレス出力（Ａ８）                                  */
	/* ・PC7：アドレス出力（Ａ７）                                  */
	/* ・PC6：アドレス出力（Ａ６）                                  */
	/* ・PC5：アドレス出力（Ａ５）                                  */
	/* ・PC4：アドレス出力（Ａ４）                                  */
	/* ・PC3：アドレス出力（Ａ３）                                  */
	/* ・PC2：アドレス出力（Ａ２）                                  */
	/* ・PC1：アドレス出力（Ａ１）                                  */
	/* ・PC0：アドレス出力（Ａ０）                                  */
	/*--------------------------------------------------------------*/
	PFC__PCCR = (PCCR_PC15MD_A15 + PCCR_PC14MD_A14 + PCCR_PC13MD_A13 + PCCR_PC12MD_A12 + PCCR_PC11MD_A11 + PCCR_PC10MD_A10 + PCCR_PC9MD_A9 + PCCR_PC8MD_A8 + PCCR_PC7MD_A7 + PCCR_PC6MD_A6 + PCCR_PC5MD_A5 + PCCR_PC4MD_A4 + PCCR_PC3MD_A3 + PCCR_PC2MD_A2 + PCCR_PC1MD_A1 + PCCR_PC0MD_A0);

	/*--------------------------------------------------------------*/
	/* ＰＤＣＲＨ１（ポートＤコントロールレジスタＨ１）の設定       */
	/* ・PD31/PD30：汎用入出力                                      */
	/* ・PD29：チップセレクト（ＣＳ３）出力                         */
	/* ・PD28：チップセレクト（ＣＳ２）出力                         */
	/* ・PD27：ＤＭＡ１転送要求受付出力                             */
	/* ・PD26：ＤＭＡ０転送要求受付出力                             */
	/* ・PD25：ＤＭＡ１転送要求入力                                 */
	/* ・PD24：ＤＭＡ０転送要求入力                                 */
	/*--------------------------------------------------------------*/
	PFC__PDCRH1 = (PDCRH1_PD29MD_CS3 + PDCRH1_PD28MD_CS2 + PDCRH1_PD27MD_DACK1 + PDCRH1_PD26MD_DACK0 + PDCRH1_PD25MD_DREQ1 + PDCRH1_PD24MD_DREQ0);

	/*--------------------------------------------------------------*/
	/* ＰＤＣＲＨ２（ポートＤコントロールレジスタＨ２）の設定       */
	/* ・PD23：割込要求入力（ＩＲＱ７）                             */
	/* ・PD22：割込要求入力（ＩＲＱ６）                             */
	/* ・PD21：割込要求入力（ＩＲＱ５）                             */
	/* ・PD20：割込要求入力（ＩＲＱ４）                             */
	/* ・PD19：割込要求入力（ＩＲＱ３）                             */
	/* ・PD18：割込要求入力（ＩＲＱ２）                             */
	/* ・PD17：割込要求入力（ＩＲＱ１）                             */
	/* ・PD16：割込要求入力（ＩＲＱ０）                             */
	/*--------------------------------------------------------------*/
	PFC__PDCRH2 = (PDCRH2_PD23MD_IRQ7 + PDCRH2_PD22MD_IRQ6 + PDCRH2_PD21MD_IRQ5 + PDCRH2_PD20MD_IRQ4 + PDCRH2_PD19MD_IRQ3 + PDCRH2_PD18MD_IRQ2 + PDCRH2_PD17MD_IRQ1 + PDCRH2_PD16MD_IRQ0);

	/*--------------------------------------------------------------*/
	/* ＰＤＣＲＬ（ポートＤコントロールレジスタＬ）の設定           */
	/* ・PD15：データ出力（Ｄ１５）                                 */
	/* ・PD14：データ出力（Ｄ１４）                                 */
	/* ・PD13：データ出力（Ｄ１３）                                 */
	/* ・PD12：データ出力（Ｄ１２）                                 */
	/* ・PD11：データ出力（Ｄ１１）                                 */
	/* ・PD10：データ出力（Ｄ１０）                                 */
	/* ・PD9：データ出力（Ｄ９）                                    */
	/* ・PD8：データ出力（Ｄ８）                                    */
	/* ・PD7：データ出力（Ｄ７）                                    */
	/* ・PD6：データ出力（Ｄ６）                                    */
	/* ・PD5：データ出力（Ｄ５）                                    */
	/* ・PD4：データ出力（Ｄ４）                                    */
	/* ・PD3：データ出力（Ｄ３）                                    */
	/* ・PD2：データ出力（Ｄ２）                                    */
	/* ・PD1：データ出力（Ｄ１）                                    */
	/* ・PD0：データ出力（Ｄ０）                                    */
	/*--------------------------------------------------------------*/
	PFC__PDCRL = (PDCRL_PD15MD_D15 + PDCRL_PD14MD_D14 + PDCRL_PD13MD_D13 + PDCRL_PD12MD_D12 + PDCRL_PD11MD_D11 + PDCRL_PD10MD_D10 + PDCRL_PD9MD_D9 + PDCRL_PD8MD_D8 + PDCRL_PD7MD_D7 + PDCRL_PD6MD_D6 + PDCRL_PD5MD_D5 + PDCRL_PD4MD_D4 + PDCRL_PD3MD_D3 + PDCRL_PD2MD_D2 + PDCRL_PD1MD_D1 + PDCRL_PD0MD_D0);

	/*--------------------------------------------------------------*/
	/* ＰＥＣＲ１（ポートＥコントロールレジスタ１）の設定           */
	/* ・PE15～PE8：汎用入出力                                      */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PECR1 = PECR1_PE8_15MD_GP;

	/*--------------------------------------------------------------*/
	/* ＰＥＣＲ２（ポートＥコントロールレジスタ２）の設定           */
	/* ・PE7～PE0：汎用入出力                                       */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PECR2 = PECR2_PE0_7_GP;

	return;
}

/************************************************************************
	module		:[ＳＨ７０４３内蔵Ｉ／Ｏ初期設定]
	function	:[
		1.ＣＰＵ Ｉ／Ｏポートの初期値設定
		2.ピンファンクションコントローラー・Ｉ／Ｏレジスタ設定
		3.割込みコントローラ設定
		4.Ａ／Ｄ変換器設定
		5.ＤＴＣ設定
	]
	return		:[なし]
	common		:[なし]
	machine		:[SH7043]
	language	:[SHC(V.3.0C)]
	keyword		:[INI]
	date		:[1997/02/27]
	author		:[野瀬敏弘]
************************************************************************/
void InitializeInternalDevice(void)
{
	UWORD test;

	/*--------------------------------------------------------------*/
	/* ＰＡＤＲＨ（ポートＡデータレジスタＨ）の設定                 */
	/*--------------------------------------------------------------*/
	/*--------------------------------------------------------------*/
	/* ・手差し、カセット１、２、３クラッチＯＦＦ                   */
	/*--------------------------------------------------------------*/
	IO__PADRH = IO__PADRH_DATA;
	/*--------------------------------------------------------------*/
	/* ＰＡＤＲＬ（ポートＡデータレジスタＬ）の設定                 */
	/*--------------------------------------------------------------*/
	/*--------------------------------------------------------------*/
	/* ・モーター駆動ＯＦＦ                                         */
	/*--------------------------------------------------------------*/
	IO__PADRL = IO__PADRL_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＡＩＯＲＨ（ポートＡ・ＩＯレジスタＨ）の設定               */
	/* ・PA23/PA22/PA21/PA20/PA19/PA16：出力端子                    */
	/* ・PA17/PA18：入力端子                                        */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PAIORH = PFC__PAIORH_DATA;	/* <- 0x00FB M.Tachibana 1997/04/10 */

	/*--------------------------------------------------------------*/
	/* ＰＡＩＯＲＬ（ポートＡ・ＩＯレジスタＬ）の設定               */
	/* ・PA15/PA14/PA13/PA12/PA11/PA10                              */
	/*   PA7/PA5/PA4/PA3/PA2/PA0：出力端子                          */
	/* ・PA9/PA8/PA6/PA1：入力端子                                  */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PAIORL = PFC__PAIORL_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＢＩＯＲ（ポートＢ・ＩＯレジスタ）の設定                   */
	/* ・PB9/PB8/PB7/PB6/PB5/PB4/PB3/PB2/PB1/PB0：出力端子          */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PBIOR = PFC__PBIOR_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＣＩＯＲ（ポートＣ・ＩＯレジスタ）の設定                   */
	/* ・PC15～PC0：出力端子                                        */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PCIOR = PFC__PCIOR_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＤＩＯＲＨ（ポートＤ・ＩＯレジスタＨ）の設定               */
	/* ・PD31～PD16：入力端子                                       */
	/*--------------------------------------------------------------*/
	PFC__PDIORH = PFC__PDIORH_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＤＩＯＲＬ（ポートＤ・ＩＯレジスタＬ）の設定               */
	/* ・PD15～PD0：入力端子                                        */
	/*--------------------------------------------------------------*/
	PFC__PDIORL = PFC__PDIORL_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＥＣＲ１（ポートＥコントロールレジスタ１）の設定           */
	/*--------------------------------------------------------------*/
	/* ・PE15～PE8：汎用入出力                                      */
	/* ・PE14：ＭＴＵアウトプットコンペア出力(TIOC4C）              */
	/* ・予約ビットは全て０をセット                                 */
	/*--------------------------------------------------------------*/
	PFC__PECR1 = PFC__PECR1_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＥＤＲ（ポートＥデータレジスタ）の初期設定                 */
	/*--------------------------------------------------------------*/
	IO__PEDR = IO__PEDR_DATA;

	/*--------------------------------------------------------------*/
	/* ＰＥＩＯＲ（ポートＥ・ＩＯレジスタ）の設定                   */
	/*--------------------------------------------------------------*/
	/* ・PE7 ：出力端子（ＭＴＵアウトプットコンペア出力：TIOC2B）   */
	/* ・PE14：出力端子（ＭＴＵアウトプットコンペア出力：TIOC4C）   */
	/* ・PE15,PE13～PE8,PE6～PE0：入力端子                          */
	/*--------------------------------------------------------------*/
	PFC__PEIOR = PFC__PEIOR_DATA;	/* <- 0x0080 1997/04/10 <- 0x3080 M.Tachibana 1997/03/25 */

	/*--------------------------------------------------------------*/
	/* ＰＥＤＲ（ポートＤデータレジスタ）の初期設定                 */
	/*--------------------------------------------------------------*/
	IO__PDDRH = IO__PDDRH_DATA;		/* ＣＰＵポートＤＨ By M.Kotani 97/06/13 */


	/*------------------------------------------------*/
	/* ＩＮＴＣ（割込コントローラ）の設定             */
	/*------------------------------------------------*/
	/*------------------------------------------------------------------*/
	/* ＭＴＵ１の割込みをレベルＦへセット                               */
	/*------------------------------------------------------------------*/
	SH__IPRD |= SH__IPRD_DATA;

	/*------------------------------------------------------------------*/
	/* ＩＲＱ０～３の割込みをレベルＦへセット                           */
	/*------------------------------------------------------------------*/
	SH__IPRA |= SH__IPRA_DATA;

	/*------------------------------------------------------------------*/
	/* ＩＲＱ４～７の割込みをレベルＦへセット                           */
	/*------------------------------------------------------------------*/
	SH__IPRB |= SH__IPRB_DATA;

	/*------------------------------------------------------------------*/
	/* ＩＲＱ０～７の割込み検出を立ち下がりエッジ検出へセット           */
	/*------------------------------------------------------------------*/
	SH__ICR |= SH__ICR_DATA;

	/*------------------------------------------------------------------*/
	/* ＤＴＣの割込みをレベルＦへセット                                 */
	/*------------------------------------------------------------------*/
	SH__IPRG |= SH__IPRG_DATA;


	/*------------------------------------------------*/
	/* Ａ／Ｄ変換器の設定                             */
	/*------------------------------------------------*/
	/*----------------------------------------------------------------*/
	/* Ａ／Ｄコントロール／ステータスレジスタ（ＡＤＣＳＲ）の設定     */
	/* ・Ａ／Ｄ変換の終了による割込み要求の禁止                       */
	/* ・Ａ／Ｄ変換の停止                                             */
	/* ・変換時間＝８０ステート                                       */
	/* ・グループモード（ＡＮ０～ＡＮ７）                             */
	/*----------------------------------------------------------------*/
	AD__ADCSR = AD__ADCSR_DATA;

	/*----------------------------------------------------------------*/
	/* Ａ／Ｄコントロール（ＡＤＣＲ）の設定                           */
	/* ・低消費変換モード                                             */
	/* ・ソフトウェアによるＡ／Ｄ変換の開始を許可                     */
	/* ・スキャンモード                                               */
	/* ・通常サンプリング動作                                         */
	/*----------------------------------------------------------------*/
	AD__ADCR = AD__ADCR_DATA;

	/*----------------------------------------------------------------*/
	/* Ａ／Ｄコントロール／ステータスレジスタ（ＡＤＣＳＲ）の設定     */
	/* ・Ａ／Ｄスタート                                               */
	/*----------------------------------------------------------------*/
	AD__ADCSR |= ADCSR_ADST;


	/*------------------------------------------------*/
	/* データトランスファコントローラ（ＤＴＣ）の設定 */
	/*------------------------------------------------*/
	/*----------------------------------------------------------------*/
	/* ＤＴＣコントロール／ステータスレジスタ（ＤＴＣＳＲ）の設定     */
	/* 全ビットをクリア                                               */
	/*----------------------------------------------------------------*/
	SH__DTCSR &= 0;

	/*----------------------------------------------------------------*/
	/* ＤＴＣイネーブルレジスタ（ＤＴＥＲ）の設定                     */
	/* 割込み要因によるＤＴＣ起動を禁止                               */
	/*----------------------------------------------------------------*/
	SH__DTEA = 0;
	SH__DTEB = 0;
	SH__DTEC = 0;
	SH__DTED = 0;
	SH__DTEE = 0;

#if (PRO_EXT_DMAC == DISABLE)
	test = 0;
		/*------------------------------------------------*/
		/* ＤＭＡＣ（ＳＨ７０４３内蔵）の再設定           */
		/* MN86064 ACKを返さないのにREQが下がる件         */
		/* 松下からの依頼によりDREQレベル検出にする       */
		/*------------------------------------------------*/
	if (test & 0x0001) {
		/*----------------------------------------------------------------*/
		/* チャネルコントロールレジスタ０（ＣＨＣＲ０）の設定             */
		/* ＤＲＥＱローレベル検出                                         */
		/*----------------------------------------------------------------*/
		DMA__CHCR0 &= ~(CHCR_DS);
	}
	if (test & 0x0002) {
		/*----------------------------------------------------------------*/
		/* チャネルコントロールレジスタ１（ＣＨＣＲ１）の設定             */
		/* ＤＲＥＱローレベル検出                                         */
		/*----------------------------------------------------------------*/
		DMA__CHCR1 &= ~(CHCR_DS);
	}
	if (test & 0x0004) {
		PFC__PACRH |= PACRH_PA18MD_DRAK0;
	}
	if (test & 0x0008) {
		PFC__PACRH |= PACRH_PA19MD_DRAK1;
	}
#endif
}


/************************************************************************
	module		:[１０ｍｓタイマー割り込み]
	function	:[ＩＴＵのＣｈ．０を１０ｍｓタイマーのカウンターとして
				  使用する。
				 ]
	return		:[なし]
	common		:[なし]
	machine		:[SH(SH7034/SH704X)]
	language	:[SHC(V.3.0C)]
	keyword		:[INI]
	date		:[1996/1/10]
	author		:[川崎真史]
************************************************************************/
void INI_Start10msTimer(void)
{
	/*------------------------------------------------------------------*/
	/* ＴＣＲの設定             										*/
	/* ・ＧＲＡのコンペアマッチ／インプットキャプチャでＴＣＮＴクリア	*/
	/* ・立上がりエッジでカウント			                       		*/
	/* ・内部クロック２８ＭＨｚ÷１６＝５７１．４３ｎｓ					*/
	/* ・予約ビット７は１又は０をセット                                 */
	/*------------------------------------------------------------------*/
	MTU__TCR0 = 0x22;
	/*------------------------------------------------------------------*/
	/* ＴＭＤＲの設定             										*/
	/* ・ＴＧＲＢは通常動作                                             */
	/* ・ＴＧＲＡは通常動作                                             */
	/* ・ＭＴＵチャネル０は通常動作モード                               */
	/* ・予約ビット７は１をセット                                       */
	/*------------------------------------------------------------------*/
	MTU__TMDR0 = 0xC0;
	/*------------------------------------------------------------------*/
	/* ＴＩＯＲＨの設定            										*/
	/* ・ＧＲＢ／ＧＲＡコンペアマッチによる端子出力禁止					*/
	/*------------------------------------------------------------------*/
	MTU__TIOR0H = 0x00;
	/*------------------------------------------------------------------*/
	/* ＴＩＯＲＬの設定            										*/
	/* ・ＧＲＤ／ＧＲＣコンペアマッチによる端子出力禁止					*/
	/*------------------------------------------------------------------*/
	MTU__TIOR0L = 0x00;
	/*------------------------------------------------------------------*/
	/* ＴＩＥＲの設定             										*/
	/* ・コンペアマッチ割込み許可（ＴＧＩＡ）							*/
	/* ・予約ビット６は１をセット                                       */
	/* ・予約ビット５は０をセット                                       */
	/*------------------------------------------------------------------*/
	MTU__TIER0 = 0x41;
	/*------------------------------------------------------------------*/
	/* ＴＳＲの設定             										*/
	/* ・予約ビット７は１をセット                                       */
	/* ・予約ビット６は１をセット                                       */
	/*------------------------------------------------------------------*/
	MTU__TSR0 = 0xC0;

	/*------------------------------------------------------------------*/
	/* ＴＧＲの設定             										*/
	/* ・カウンター値の設定				                                */
	/*------------------------------------------------------------------*/
	if (INT_Interval5ms) {
		/*   ５ｍｓ÷５７１．４３ｎｓ ＝ ８７５０カウント     */
		MTU__TGR0A = 0x222E;
	}
	else {
		/*   １０ｍｓ÷５７１．４３ｎｓ ＝ １７５００カウント */
		MTU__TGR0A = 0x445C;
	}
	SYS_TimerJobSelectSwitch = 0;

	/*------------------------------------------------------------------*/
	/* ＭＴＵ０の割込みをレベルＦへセット								*/
	/*------------------------------------------------------------------*/
	SH__IPRD |= MTU0H_LEVEL;
	/*------------------------------------------------------------------*/
	/* ＴＳＴＲの設定             										*/
	/* ・カウンターのスタート				                            */
	/* ・予約ビット５～３は常に０をセット                               */
	/*------------------------------------------------------------------*/
	MTU__TSTR |= TSTR_START_CH0;

	return;

}


/************************************************************************
	module		:[システムイニシャルメイン処理]
	function	:[]
	return		:[なし]
	common		:[なし]
	machine		:[SH7043]
	language	:[SHC(V.3.0C)]
	keyword		:[INI]
	date		:[1997/05/10]
	author		:[野瀬敏弘]
************************************************************************/
#if (PRO_RDS_FLASH_ROM_WRITE == ENABLE) /* 1998/04/17  By T.Yamaguchi */
#pragma section INISYSPRO /* locate section name "PINISYSPRO" */
#endif

void InitializeSystem(void)
{
#if (PRO_EXT_DMAC == ENABLE)	/* 一時的に入れる */
	UBYTE *start_address;
	UBYTE *end_address;
	UBYTE dbg_sw;
#endif
#if (0)
	UWORD dbg_bcr;
#endif
#if 0 /*(PRO_RDS_FLASH_ROM_WRITE == ENABLE) /@ 1998/04/07  By T.Yamaguchi */
//	/* デバッグ用外すこと1998/04/28  By T.Yamaguchi */
//	UWORD	*src_adr;
//	UWORD	*tgt_adr;
//	UDWORD	cnt;
//	UWORD sumcheck;
//	UBYTE dbg_sw_fla;
#endif

	/*------------------------*/
	/* 機種個別のＣＰＵ初期化 */
	/*------------------------*/
	MachineUniqCPUInitial();

#if (PRO_RDS_FLASH_ROM_WRITE == ENABLE) /* 1998/04/07  By T.Yamaguchi */

#if defined(POPLAR_B) || defined(POPLAR_L) || defined(POPLAR_H) || defined(POPLAR_N)
	/* 高圧、ＦＡＮ、ヒーターをＯＦＦする */
	SYS_Modem2PortStatus = 0x0000;
	SYS_ETC_PortStatus = 0;
	outpw(MODEM2_PORT, SYS_Modem2PortStatus);
	outpw(ETC_PORT, SYS_ETC_PortStatus);

	/* ウォッチドックタイマディセーブル */
	WDT_Disable();
#endif

#if defined(SAKAKI)
	/* 高圧、ＦＡＮ、ヒーターをＯＦＦする */
	SYS_Modem2PortStatus = 0x0000;
	SYS_ETC_PortStatus = 0;
	outpw(MODEM2_PORT, SYS_Modem2PortStatus);
	outpw(ETC_PORT, SYS_ETC_PortStatus);

	/* ウォッチドックタイマディセーブル */
	WDT_Disable();
#endif

#if 0	/* デバッグ用外すこと1998/04/28  By T.Yamaguchi */
//	dbg_sw_fla = 0;
//	if (dbg_sw_fla == 1) {	/* ﾌﾗｯｼｭ書き換えテスト用 */
//		if (SYB_MaintenanceSwitch[MNT_SW_E2] & 0x40) {
//			src_adr = (UWORD *)ROM_DATA_WRITE_ADDRESS;
//			tgt_adr = (UWORD *)0x200000;
//			cnt = 0x80000;
//			sumcheck = 0;
//			while (cnt--) {
//				sumcheck += *tgt_adr;
//				*src_adr++ = *tgt_adr++;
//			}
//			SYB_ROM_DataSumcheck = sumcheck;
//			SYB_FlashROM_WriteStatus = ROM_DATA_RECEIVED;
//		}
//		SYB_MaintenanceSwitch[MNT_SW_E2] &= 0xBF;
//	}
#endif	/* ここまで */


	switch (SYB_FlashROM_WriteStatus) {
	case NO_STATUS:
		/* ここでは何もしません
		** 素通りして通常の立ち上げを行います
		*/
		break;
	case ROM_DATA_RECEIVED:
	case ROM_WRITING:
		if (FLA_CheckSumROMData()) { /* ＲＯＭイメージデータのサムチェック */
			if (FLA_CheckModelROMData()) { /* ＲＯＭイメージデータのモデル名チェック */
				SYB_FlashROM_WriteStatus = ROM_WRITING;
				FLA_INI_Entry(); /* フラッシュメモリ書換え実行 */
				/* ここには帰ってきません
				** 書換え関数の中で更にソフトリセットします
				*/
			}
		}
		/* 書き換えに行かないときは、クリアします!! */
		SYB_FlashROM_WriteStatus = NO_STATUS;
		FLA_ClearSumROMData(); /* ROMイメージデータのチェックサムクリア */
		FLA_ClearModelROMData(); /* ROMイメージデータのモデル名クリア */
		FLA_MEM_ClearAll(); /* DRAMクリア */
		break;
	case ROM_WRITE_COMPLETE:
		SYB_FlashROM_WriteStatus = NO_STATUS;
		FLA_ClearSumROMData(); /* ROMイメージデータのチェックサムクリア */
		FLA_ClearModelROMData(); /* ROMイメージデータのモデル名クリア */
		FLA_MEM_ClearAll(); /* DRAMクリア */
		/* DRAMクリアはフラッシュ書換え終了後、直ちに行います
		** ここに来たときにはDRAMはクリア済みです
		** ここでクリアします！！
		*/
		break;
	case ROM_DATA_RXING: /* ROMデータ受信中に電源OFF/ONされた */
	default: /* フラグにごみが入っている */
		/* RAMがどういう状態なのかわからないので全部クリアするようにします */
		SYB_FlashROM_WriteStatus = NO_STATUS;
		FLA_ClearSumROMData(); /* ROMイメージデータのチェックサムクリア */
		FLA_ClearModelROMData(); /* ROMイメージデータのモデル名クリア */
		FLA_MEM_ClearAll(); /* DRAMクリア */
		break;
	}
#endif

#if (PRO_PANEL == KANJI)				/* 漢字対応操作パネル */
	/* ＰＯＰＬＡＲ＿Ｈは漢字ＬＣＤのＬＣＤ＿ＢＵＳＹがこのポートに入っているので、
	** Ｂｕｓｙがくれば、Ｗａｉｔするように設定する。
	** By O.Kimoto 1997/09/24
	*/
	PFC__PACRH |= PACRH_PA17MD_WAIT;	/**  ＰＡ１７はＷＡＩＴ             */
#endif


	/*--------------------------------------------*/
	/* ＳＨ７０４３ 内蔵Ｉ／Ｏ初期設定            */
	/*--------------------------------------------*/
	InitializeInternalDevice();

#if (0)
	if (SYB_MaintenanceSwitch[MNT_SW_A8] & SH_PA15MD_CK) {
		PFC__PACRL1 |= PACRL1_PA15MD_CK; /* SH CPU の PA15 を CK出力にする T.Nose 1997/08/28 */
	}
#endif

	/*--------------------------------------------*/
	/* 外部追加割込制御ポートの初期設定           */
	/*--------------------------------------------*/
	INT_InitializeExternalInterrupt();

#if (PRO_EXT_DMAC == ENABLE)
	/*--------------------------------------------*/
	/* 外部ＤＭＡＣ初期設定                       */
	/*--------------------------------------------*/
	INI_ExternalDMAC();
#endif

#if (PRO_EXT_DMAC == ENABLE)	/* 一時的に入れる */
	/*--------------------------------------------*/
	/* デバッグ用にＳＲＡＭをクリアする			  */
	/*--------------------------------------------*/
	/*	ＳＲＡＭ書き込み、読み出し、比較	*/
	dbg_sw = 0;
	if (dbg_sw == 1) {
		start_address = (UBYTE *)(0x00400000);
		end_address = (UBYTE *)(0x0040ffff);
		for (; start_address <= end_address; start_address++) {	/** 終了アドレスまでループ */
			*start_address = 0xff;					/** テストコードの書き込み */
		}
		start_address = (UBYTE *)(0x00440000);
		end_address = (UBYTE *)(0x0044ffff);
		for (; start_address <= end_address; start_address++) {	/** 終了アドレスまでループ */
			*start_address = 0xff;					/** テストコードの書き込み */
		}
	}
#endif

	/*--------------------------------------------*/
	/** １０ｍｓタイマー割込みスタート			  */
	/*--------------------------------------------*/
	INI_Start10msTimer();

	/*--------------------------------------------*/
	/*  モニタテーブル初期化                      */
	/*--------------------------------------------*/
	InitializeMonitor();

	return;
}

#if (PRO_RDS_FLASH_ROM_WRITE == ENABLE) /* 1998/04/17  By T.Yamaguchi */
#pragma section
#endif

#if (0)
/************************************************************************
	module		:[システムイニシャルメイン処理の入り口]
	function	:[]
	return		:[なし]
	common		:[なし]
	machine		:[SH7043]
	language	:[SHC(V.3.0C)]
	keyword		:[INI]
	date		:[1996/10/11]
	author		:[野瀬敏弘]
************************************************************************/
#pragma section INISYS /* locate section name "PINISYS" */
void InitializeSystem(void)
{
	InitializeSystemProcess();
}
#pragma section
#endif
