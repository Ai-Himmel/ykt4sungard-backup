SAKAKI/HINOKI用CPUマスクについて

SAKAKI/HINOKIでは、POPLAR/ANZU_L用SH7043マスクCPU（SH7043 Rバージョン）が使用できないと言うことで、
新しいマスクCPU（SH7043 Aバージョン）を起こすことになりました。
ついては、その改造作業を進めてきましたが、作業が完了しましたので報告します。

１．改造内容
	今回、行った、改造内容の概要は下記項目です。

	-a  基本的なソースファイルを共有化する為に、新たにCPUを区別する条件式を追加「PRO_CPU_VERSION」
	-b  SAKAKI/HINOKIで共通に使用できるように、CPUの初期化を外部ROMに括り出す。（内蔵ROMで行う初期
	    化処理は必要最低限のみです。）
	-c  内蔵プログラムから外部プログラムもしくは、大域変数を参照する際に、ROM上に参照ポインターをマ
        ッピングしていたが、それを内蔵RAMにマッピング。
	-d  -cの改造に伴い、間接参照ポインターの整理。

２．移植作業

	-a  product.hの「PRO_CPU_VERSION」の定義を「SH7043_R」から「SH7043_A」に変更
	-b  メイクファイル（バッチファイルの方）で、以下のメイクファイルのパス変更
		ファイルのパスは、「arisa\usr3:\src\cpu\sh7043_a\make」です。
			・shtable.mk
			・shdata.mk
			・int.mk
			・mon.mk
			・ini.mk
			・scd.mk
			・jbg.mk
	-c  -bの変更に伴い、モデル名.mk/subで以下のxxx.lnk名を変更
		・shdata.lnk -> shdata2.lnk
		・shtable.lnk -> shtable2.lnk
		・mon.lnk -> mon2.lnk
		・scd.lnk -> scd2.lnk
		・ini.lnk -> ini2.lnk
	-d  今回の間接参照ポインターを内蔵RAM上にマッピングする際に、B Sectionのマッピングで問題が発生
		し、ライブラリーで使用するRAMにもセクション名追加したので、リンク変更
		・\src\atlanta\sh7043\lib_alr\shclib.lib -> \src\cpu\sh7043_a\lib_alr\shclib.lib
	-e  上記-a〜-dの変更に伴い、モデル名.locも変更が必要です。内容に関しては、「HINOKI.LOC」の「新ﾏｽ
		ｸ変更」とコメントが入っている行を参照してください。

３．注意点
	-a  CPUの初期化処理は、基本的には、POPLAR/ANZU_Lのままですので、今後は「\src\cpu\sh7043_a\irom
		\src」以下のファイルに追加してください。
	-b  CPUのデータバス幅に関して、
				SAKAKIはすべて16ビット幅設定でOK
				HINOKIはCS2のみ8ビット幅（使用するG/Aの設定に依存しており、変更不可）
		となっている為、CPUの初期化処理内で、どちらのシステム化を判断し、バス幅を設定しています。
		この「どちらのシステム」という判断に、CPU内蔵ポートのＦの「D0」ビットを判断し、
				０：16ビット幅
				１： 8ビット幅
		となるように設定しています。（KAKI/SHIRAKABAでも、同様な接続になるように電気設計担当者に確認
		してください。）
	-c  ソフトコーデックも、POPLAR/ANZU_Lのままとなっていますので、SAKAKI/HINOKIで追加した部分に付い
		ては、-aと同様に移植をお願いいたします。
		「\src\cpu\sh7043_a\scd\src」
	-d  内蔵RAMにマッピングされている間接参照ポインターを追加する場合は、CPUの初期化処理内で、フラッ
		シュメモリから内蔵RAMにコピーする処理部分がありますので、そちらの方もサイズを変更してください。
	-e  DTCのベクターテーブルは、CPUでアドレスが固定されていますので、外部にマッピングすることは出来
		ませんでした。故に、DTCに関しては、十分に検討してください。
	-f  POPLAR/ANZU_Lで使用していた
			「\src\atlanta\sh7043」
			「\src\atlanta\scd」
		以下のファイルについて、「define」と「ext_v」以下のファイルに関しては、条件式を追加して二重
		インクルードとなるような変更を加えています。予って、それらのディレクトリーにあるファイルをイ
		ンクルードしているファイル側は基本的には変更の必要はありません。（別にインクルードしても問題
		はありません。）


４．その他
	-a  今回の改造を行うことによって、POPLAR/ANZU_Lで障害となっていました、タスクのスタック領域のマ
		ッピングは自由になりました。予って、サイズの方も、実装されているRAMが許す限りのサイズが指定
		可能です。
	-b  CPUのベクターもリセットアドレス以外は外部にマッピングされていますので、後々何かの対策の為に
		追加を行いたい時も対応可能となりました。


