;/*--------------------------------------------------------------------------*/
;/*  プロジェクト : POPLAR/ANZU_L                                            */
;/*  ファイル名   : mon_itim.src                                             */
;/*  作成者       : 野瀬                                                     */
;/*  日  付       : 1996/10/14                                               */
;/*  概  要       : モニタ タイマ割込み　                                    */
;/*  修正履歴     :                                                          */
;/*  Oneshot_int_erom から SetOneshotTimer のコールを SetOneshotTimer_e に変更 T.Nose 1997/12/03 */
;/*--------------------------------------------------------------------------*/

	.INCLUDE	"\src\cpu\sh7043_a\irom\define\def_mon.hdr"
	.INCLUDE	"\src\cpu\sh7043_a\irom\ext_v\extv_mon.hdr"

	.IMPORT		_ready_func_vec
	.IMPORT		_SetOneshotTimer_vec
;	.IMPORT		_SetOneshotTimer
;	.IMPORT		_SetOneshotTimer_e

	.EXPORT		_Timer_int_irom
	.EXPORT		_Timer_int_erom

	.EXPORT		_Oneshot_int_irom
	.EXPORT		_Oneshot_int_erom

;/*****************************************************************************
;	module		:[モニタ10msタイマ割込み処理]
;	function	:[
;		1. 
;	]
;	return		:[なし]
;	common		:[_tcb]
;	condition	:[
;		タイマステータスレジスタの該当ビットをクリアしておくこと
;		事前にレジスタをプッシュしておくこと
;
;		内部使用レジスタ
;			R0 R1 R2 R3 R4 R5 R6 R7 R8 R9
;	]
;	machine		:[SH7043]
;	language	:[ASMSH]
;	keyword		:[MON]
;	date		:[1995/11/01]
;	author		:[野瀬敏弘]
;*****************************************************************************/
;/**************************/
;/* ＳＨ７０４３内蔵ＲＯＭ */
;/**************************/
	.SECTION	MON,CODE,ALIGN=4
_Timer_int_irom:
	STS.L	PR,@-R15
	STS.L	MACL,@-R15		; PUSH.L	MACL
	MOV.L	R8,@-R15		; PUSH.L	R8
	MOV.L	R9,@-R15		; PUSH.L	R9

	MOV		#NIL,R7
tim_int00_i:
	MOV.L	wai_tsk_tid_int_i,R5
	MOV.B	@R5,R4
	CMP/EQ	R4,R7
	BT		tim_int_ret_i
	MOV.L	wai_tsk_tid_int_i,R3

	MOV		#TCB_TBL_SIZE,R8
tim_int03_i:
	MOV.L	tcbp_itim_i,R9
	MOV.L	@R9,R9
	MOV		R4,R1
	MULU	R4,R8
	STS		MACL,R2
	ADD		R9,R2
	MOV.B	@(TCB_LINK,R2),R0
	MOV		R0,R4						; R4 = 次のリンクのセーブ
	MOV.W	@(TCB_WAIT_PARA2,R2),R0		; R0 = タイマー値
	MOV		R0,R5
	CMP/EQ	R5,R7
	BT		tim_int04_i
	ADD		#-1,R0						; タイマー値を減算
	MOV.W	R0,@(TCB_WAIT_PARA2,R2)
	CMP/EQ	#0,R0
	BT		tim_int01_i

tim_int04_i:
	MOV		R2,R3
	ADD		#TCB_LINK,R3				; リンク位置保存

tim_int02_i:
	CMP/EQ	R4,R7						; 次のリンクがあるか
	BT		tim_int_ret_i
	BRA		tim_int03_i
	NOP

tim_int01_i:
	MOV.B	R4,@R3
	MOV		#READY,R0
	MOV.B	R0,@(TCB_STAT,R2)
	SUB		R0,R0
	MOV.B	R0,@(TCB_WAIT_PARAM,R2)
	MOV		ready_func_int_i,R0
	MOV.L	@R0,R0
	JSR		@R0
	NOP
	BRA		tim_int02_i
	NOP

tim_int_ret_i:
	MOV.L	@R15+,R9		;POP.L	R9
	MOV.L	@R15+,R8		;POP.L	R8
	LDS.L	@R15+,MACL		;POP.L	MACL
	LDS.L	@R15+,PR
	RTS
	NOP

;/*****************************************************************************
;	module		:[モニタワンショットタイマ割込み処理]
;	function	:[
;		1. 
;		2. 
;	]
;	return		:[なし]
;	common		:[_tcb]
;	condition	:[
;		タイマステータスレジスタの該当ビットをクリアしておくこと
;		事前にレジスタをプッシュしておくこと
;	]
;	machine		:[SH]
;	language	:[ASMSH]
;	keyword		:[MON]
;	date		:[1995/11/01]
;	author		:[野瀬敏弘]
;*****************************************************************************/
_Oneshot_int_irom:
	STS.L	PR,@-R15
	STS.L	MACL,@-R15		; PUSH.L	MACL
	MOV.L	R8,@-R15		; PUSH.L	R8
	MOV.L	R9,@-R15		; PUSH.L	R9
	MOV.L	R10,@-R15		; PUSH.L	R10

	MOV.L	wai_1shot_tid_int_i,R10
	MOV.B	@R10,R1
	MOV.B	@R10,R0
	CMP/EQ	#NIL,R0
	BT		shot_int_ret_i

	MOV		#TCB_TBL_SIZE,R8
	MULU	R1,R8
	STS		MACL,R2
	MOV.L	tcbp_itim_i,R9
	MOV.L	@R9,R9
	ADD		R2,R9
	MOV.W	@(TCB_WAIT_PARA2,R9),R0
	MOV		#ONESHOT_VALUE_MAX,R8
	CMP/HS	R0,R8
	BT		shot_int01_i				; ONESHOT_VALUE_MAX >= count -> shot_int01
	SUB		R8,R0
	MOV.W	R0,@(TCB_WAIT_PARA2,R9)		; カウンタ更新
	CMP/HS	R0,R8
	BT		shot_int02_i				; ONESHOT_VALUE_MAX >= count -> shot_int02
	MOV		#ONESHOT_VALUE_MAX,R0

shot_int02_i:
;---------------------------------------------------------
;   1msインターバルタイマ(ITU2)レジスタの再設定
;---------------------------------------------------------
	MOV		R0,R4						; R4: SetOneshotTimer(Timer)への引数
	MOV.L	SetOneshotTimer_int_i,R0
	MOV.L	@R0,R0
	JSR		@R0
	NOP
	BRA		shot_int_ret_i
	NOP

shot_int01_i:
	MOV		#NIL,R8
	MOV.B	R8,@R10
	MOV		#READY,R0
	MOV.B	R0,@(TCB_STAT,R9)
	SUB		R0,R0
	MOV.B	R0,@(TCB_WAIT_PARAM,R9)
	MOV.L	ready_func_int_i,R0
	MOV.L	@R0,R0
	JSR		@R0
	NOP

shot_int_ret_i:
	MOV.L	@R15+,R10
	MOV.L	@R15+,R9
	MOV.L	@R15+,R8
	LDS.L	@R15+,MACL
	LDS.L	@R15+,PR
	RTS
	NOP

	.ALIGN 4
wai_tsk_tid_int_i:
	.DATA.L	_wai_tsk_tid
ready_func_int_i:
	.DATA.L	_ready_func_vec
wai_1shot_tid_int_i:
	.DATA.L	_wai_1shot_tid
SetOneshotTimer_int_i:
	.DATA.L	_SetOneshotTimer_vec
tcbp_itim_i:
	.DATA.L	_tcb_p

;/****************/
;/* 外付けＲＯＭ */
;/****************/
	.SECTION	P,CODE,ALIGN=4
_Timer_int_erom:
	STS.L	PR,@-R15
	STS.L	MACL,@-R15		; PUSH.L	MACL
	MOV.L	R8,@-R15		; PUSH.L	R8
	MOV.L	R9,@-R15		; PUSH.L	R9

	MOV		#NIL,R7
tim_int00_e:
	MOV.L	wai_tsk_tid_int_e,R5
	MOV.B	@R5,R4
	CMP/EQ	R4,R7
	BT		tim_int_ret_e
	MOV.L	wai_tsk_tid_int_e,R3

	MOV		#TCB_TBL_SIZE,R8
tim_int03_e:
;	MOV.L	tcb_int_e,R9
;FOR POINTER ACCESS
	MOV.L	tcbp_itim_e,R9
	MOV.L	@R9,R9

	MOV		R4,R1
	MULU	R4,R8
	STS		MACL,R2
	ADD		R9,R2
	MOV.B	@(TCB_LINK,R2),R0
	MOV		R0,R4						; R4 = 次のリンクのセーブ
	MOV.W	@(TCB_WAIT_PARA2,R2),R0		; R0 = タイマー値
	MOV		R0,R5
	CMP/EQ	R5,R7
	BT		tim_int04_e
	ADD		#-1,R0						; タイマー値を減算
	MOV.W	R0,@(TCB_WAIT_PARA2,R2)
	CMP/EQ	#0,R0
	BT		tim_int01_e

tim_int04_e:
	MOV		R2,R3
	ADD		#TCB_LINK,R3				; リンク位置保存

tim_int02_e:
	CMP/EQ	R4,R7						; 次のリンクがあるか
	BT		tim_int_ret_e
	BRA		tim_int03_e
	NOP

tim_int01_e:
	MOV.B	R4,@R3
	MOV		#READY,R0
	MOV.B	R0,@(TCB_STAT,R2)
	SUB		R0,R0
	MOV.B	R0,@(TCB_WAIT_PARAM,R2)
	MOV		ready_func_int_e,R0
	MOV.L	@R0,R0
	JSR		@R0
	NOP
	BRA		tim_int02_e
	NOP

tim_int_ret_e:
	MOV.L	@R15+,R9			;POP.L	R9
	MOV.L	@R15+,R8			;POP.L	R8
	LDS.L	@R15+,MACL			;POP.L	MACL
	LDS.L	@R15+,PR
	RTS
	NOP

_Oneshot_int_erom:
	STS.L	PR,@-R15
	STS.L	MACL,@-R15		; PUSH.L	MACL
	MOV.L	R8,@-R15		; PUSH.L	R8
	MOV.L	R9,@-R15		; PUSH.L	R9
	MOV.L	R10,@-R15		; PUSH.L	R10

	MOV.L	wai_1shot_tid_int_e,R10
	MOV.B	@R10,R1
	MOV.B	@R10,R0
	CMP/EQ	#NIL,R0
	BT		shot_int_ret_e

	MOV		#TCB_TBL_SIZE,R8
	MULU	R1,R8
	STS		MACL,R2

;	MOV.L	tcb_int_e,R9
;FOR POINTER ACCESS
	MOV.L	tcbp_itim_e,R9
	MOV.L	@R9,R9

	ADD		R2,R9
	MOV.W	@(TCB_WAIT_PARA2,R9),R0
	MOV		#ONESHOT_VALUE_MAX,R8
	CMP/HS	R0,R8
	BT		shot_int01_e				; ONESHOT_VALUE_MAX >= count -> shot_int01
	SUB		R8,R0
	MOV.W	R0,@(TCB_WAIT_PARA2,R9)		; カウンタ更新
	CMP/HS	R0,R8
	BT		shot_int02_e				; ONESHOT_VALUE_MAX >= count -> shot_int02
	MOV		#ONESHOT_VALUE_MAX,R0

shot_int02_e:
;---------------------------------------------------------
;   1msインターバルタイマ(ITU2)レジスタの再設定
;---------------------------------------------------------
	MOV		R0,R4						; R4: SetOneshotTimer(Timer)への引数
	MOV.L	SetOneshotTimer_int_e,R0
	MOV.L	@R0,R0
	JSR		@R0
	NOP
	BRA		shot_int_ret_e
	NOP

shot_int01_e:
	MOV		#NIL,R8
	MOV.B	R8,@R10
	MOV		#READY,R0
	MOV.B	R0,@(TCB_STAT,R9)
	SUB		R0,R0
	MOV.B	R0,@(TCB_WAIT_PARAM,R9)
	MOV.L	ready_func_int_e,R0
	MOV.L	@R0,R0
	JSR		@R0
	NOP

shot_int_ret_e:
	MOV.L	@R15+,R10			;POP.L	R10
	MOV.L	@R15+,R9			;POP.L	R9
	MOV.L	@R15+,R8			;POP.L	R8
	LDS.L	@R15+,MACL			;POP.L	MACL
	LDS.L	@R15+,PR
	RTS
	NOP

	.ALIGN 4
;tcb_int_e:
;	.DATA.L	_tcb
wai_tsk_tid_int_e:
	.DATA.L	_wai_tsk_tid
ready_func_int_e:
	.DATA.L	_ready_func_vec
wai_1shot_tid_int_e:
	.DATA.L	_wai_1shot_tid
SetOneshotTimer_int_e:
	.DATA.L	_SetOneshotTimer_vec
tcbp_itim_e:
	.DATA.L	_tcb_p

	.END
