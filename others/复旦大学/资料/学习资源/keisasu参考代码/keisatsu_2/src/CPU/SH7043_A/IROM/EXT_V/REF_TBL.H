/*--------------------------------------------------------------------------*/
/*  プロジェクト : POPLAR/ANZU_L                                            */
/*  ファイル名   : MON_TBL.C                                                */
/*  作成者       : 野瀬                                                     */
/*  日  付       : 97.04.09                                                 */
/*  概  要       : モニタ管理ブロック（ＴＣＢ、ＭＣＢ等）の                 */
/*               : 先頭アドレステーブル                                     */
/*               : モニターコールから管理ブロックへのアクセスは以下の       */
/*               : ポインタを間接参照することにより行います                 */
/*  修正履歴     :                                                          */
/*--------------------------------------------------------------------------*/

#include "\src\atlanta\define\product.h"

#if (PRO_CPU_VERSION == SH7043_A)
#include "\src\cpu\sh7043_a\irom\define\def_tcb.h"
#include "\src\cpu\sh7043_a\irom\define\def_scb.h"
#include "\src\cpu\sh7043_a\irom\define\def_semn.h"
#include "\src\cpu\sh7043_a\irom\define\def_mbxn.h"


/* 外付けＲＯＭに配置するＣＯＮＳＴデータ群です。
** 追加する時は、「Ｂ Ｓｅｃｔｉｏｎ」できられた内蔵ＲＡＭの方も合わせて変更してください。
** また、追加する時は、必ず下から下から追加するように！（でないと、参照ポインターがずれてしまい
** 暴走します。
*/

/* 新ﾏｽｸ変更 追加 ﾎﾟｲﾝﾀの写像 */
extern UDWORD SCD_MEM_BLOCK_SIZE_I;

/************************************************
 * 管理ブロックの先頭アドレスを持つポインター群 *
 ***********************************************/
/************************************************************************
 * タスクコントロールブロックの先頭アドレス								*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST struct tcb_table_data_t (* CONST tcb_p);

/************************************************************************
 * セマフォコントロールブロックの先頭アドレス							*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST struct scb_table_data_t (* CONST scb_p);

/************************************************************************
 * セマフォ管理テーブルの先頭アドレス									*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST struct semno_data_t (* CONST semno_p);

/************************************************************************
 * メッセージコントロールブロックの先頭アドレス							*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE (* CONST mcb_p);

/************************************************************************
 * メールボックス管理テーブルの先頭アドレス								*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST struct mbxno_data_t (* CONST mbxno_p);

/************************************************************************
 * イベントコントロールブロックの先頭アドレス							*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE (* CONST ecb_p);

/************************************************************************
 * スタックアドレスチェックテーブルの先頭アドレス						*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UDWORD (* CONST MON_StackCheckTable_p);

/************************************************************************
 * 大サイズのスタック領域の先頭アドレス									*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UDWORD (* CONST large_stack_area_p);

/************************************************************************
 * 小サイズのスタック領域の先頭アドレス									*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UDWORD (* CONST small_stack_area_p);

/************************************************************************
 * アイドルタスクのスタック領域の先頭アドレス							*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UDWORD (* CONST initial_task_stack_area_p);


/************************************
 * 管理ブロックの最大値を持つ定数群 *
 ***********************************/
/************************************************************************
 * 大タスクコントロールブロックの最大値									*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE MON_MAX_LARGE_TCB;

/************************************************************************
 * 小タスクコントロールブロックの最大値									*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE MON_MAX_SMALL_TCB;

/************************************************************************
 * 大・小合計のタスクコントロールブロックの最大値						*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE MON_MAX_TCB;

/************************************************************************
 * 大タスクのスタックサイズ												*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UWORD MON_SIZE_LARGE_STACK;

/************************************************************************
 * 小タスクのスタックサイズ												*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UWORD MON_SIZE_SMALL_STACK;

/************************************************************************
 * スタックエリアの底アドレス											*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UDWORD MON_STACK_START_ADDR;

/************************************************************************
 * 大タスククリエイト時のスタック開始基準アドレス						*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UDWORD MON_TOP_LARGE_ADDR;

/************************************************************************
 * 小タスククリエイト時のスタック開始基準アドレス						*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UDWORD MON_TOP_SMALL_ADDR;

/************************************************************************
 * ＳＣＢの最大値														*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE MON_MAX_SCB;

/************************************************************************
 * セマフォ管理テーブルの最大値											*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE MON_MAX_SEMNO;

/************************************************************************
 * ＭＣＢの最大値														*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UWORD MON_MAX_MCB;

/************************************************************************
 * メールボックス管理テーブルの最大値									*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UBYTE MON_MAX_MBXNO;

/************************************************************************
 * ＥＣＢの最大値														*
 * 野瀬敏弘																*
 ************************************************************************/
extern CONST UWORD MON_MAX_ECB;

/* mdm_g3.c */
extern UBYTE (* rx_g3_read_ext_tbl)(void);
/* UBYTE	RxG3_ReadExtRom(void);*/

/* mdm_sub.c */
extern void (* next_mdmbuf_wp_set_ext_tbl)(void);
/* void NextModemBufferWritePointSetExtRom(void);*/

extern UBYTE (* check_ecm_status_ext_tbl)(UWORD);
/* UBYTE	CheckEcmStatusExtRom(UWORD)		フレーム番号（０〜２５５）	*/

/* void NextModemBufferReadPointSet(void);	*	割り込みで使用	*/
extern void (* next_mdmbuf_rp_set_ext_tbl)(void);

/* ソフトコーデックで参照している変数を間接参照に変更 By O.Kimoto 1998/08/27 */
extern struct mdmcntl_t (* ModemControl_p);
extern struct MEM_ExecData_t (* MemoryExecData_p);
extern UDWORD (* EncodeDataCount_p);		/*	エンコードデータ総符号量	*/
extern UWORD (* MDM_RxTotalLine_p);		/*	受信トータルライン	*/
extern UWORD	(* DecodeEcmFrameNum_p);
extern UBYTE	(* TxStartFlag_p);
extern UBYTE	(* MDM_ModemBuffer_p);			/* モデムバッファ */
extern UBYTE (* CodecPageStatus_p);

extern UWORD MODEM_BUF_LENGTH_P;
extern UBYTE MODEM_BUF_MAX_P;

/* memread.c */
/* UWORD MEM_ReadGetNextBlockNoExtRom(UWORD);*/
extern CONST UWORD (* CONST mem_read_get_next_blk_no_exttbl)(UWORD);

/* UBYTE *MEM_CalculateSoftAddressExtRom(UWORD) */
extern CONST UBYTE  * (* CONST mem_calculate_softaddr_exttbl)(UWORD);

/* memwrite.c */
/* UWORD MEM_WriteGetNextBlockNoExtRom(struct MEM_ExecData_t *);*/
extern CONST UWORD (* CONST mem_write_get_nextblk_no_exttbl)(struct MEM_ExecData_t *);

extern UBYTE (* RL_Buffer_p); /* 新ﾏｽｸ変更 追加 T.Nose 1998/08/27 */

/************************************************************************
 * ＲＬからイメージに展開する為のバッファ＆サイズテーブル				*
 * 木元修																*
 ************************************************************************/
extern UBYTE (* prn_imgbuf1_p);
extern CONST UWORD PRT_IMG_BUF_SIZE;	/* 256 */
extern CONST UWORD PRT_IMG_BUF_LINE;	/*  48 */

extern UBYTE (*img_buffer1);
extern UBYTE (*img_buffer2);
extern CONST UWORD SCD_LINE_BUF1_WIDTH;		/* 256 */
extern CONST UWORD SCD_LINE_BUF1_NUMBER;	/*  2 */
extern CONST UWORD SCD_LINE_BUF2_WIDTH;		/* 256 */
extern CONST UWORD SCD_LINE_BUF2_NUMBER;	/*  2 */

#endif
