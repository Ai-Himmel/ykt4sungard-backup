
/***********************************************************************************
  编码日志记录
  编码者: 陈永华
  编码日期 2004-2-7 18:13:36
  版本: V1.00 
  说明: 黄金会员系统数据库部分的基本功能，在正式使用之前必须复制为 .sqc, 
  以便nsqlprep预编译，这里定义为 .cpp是为了用IDE时候编辑方便
  
  --------------------------------
  猴年马月
  LQ	
  为复旦一卡通项目修改为DB2版本
  
 ***********************************************************************************/
#define _IN_SQC_   
// 每个SQC源文件必须包括本定义，以激活 busqc.h中的 ：EXEC SQL WHENEVER SQLERROR CALL SQLErrorHandler();
//EXEC SQL INCLUDE SQLCA;
//#char SQLERRMC[] = "i dont't know what's corresponding to SQLMC in DB2";
//#define SQLERRMC	sqlca.sqlerrmc

#ifndef  ESQL 
#define ESQL
#endif

ESQL #include <string.h>
ESQL #include <time.h>
ESQL #include "esqlc.h"
ESQL #include "busqc.h"
ESQL #include "pubfunc.h"
ESQL #include "XPack.h"

extern ST_BUNIT g_BUnit;
extern ST_SQLDB g_SqlDB;
extern "C" void GetPack(ST_CPACK *pack,char *buf);
//extern "C" int GetCpackDataString(ST_CPACK *cpack,char *buf);


CXPack *pXPack=(CXPack *)GetDefaultXPack();

int GetCpackDataString(ST_CPACK *cpack,char *buf)
{
	int iLastFidx;
	char sFieldValue[512];
	
	const ST_PDATALIST *PDataList;
	PDataList=pXPack->GetPackDef(iLastFidx);
	for(int i=0;i<iLastFidx;i++)
	{
		if(pXPack->IsValidField(&(cpack->head),i))
		{
			pXPack->GetFieldValue(&(cpack->pack),i,sFieldValue);
			sprintf(buf+strlen(buf),"%s:%d:%s\n",PDataList[i].szName,strlen(sFieldValue),sFieldValue);
		}
	}
	return 0;
}
int GetCpackDataString(ST_PACK *pack,char *buf)
{
	int iLastFidx;
	char sFieldValue[512];
	buf[0]=0;
	ST_CPACK* cpack=(ST_CPACK*)((char*)pack-sizeof(ST_PACKHEAD));
	
	const ST_PDATALIST *PDataList;
	PDataList=pXPack->GetPackDef(iLastFidx);
	for(int i=0;i<iLastFidx;i++)
	{
		if(pXPack->IsValidField(&(cpack->head),i))
		{
			pXPack->GetFieldValue(&(cpack->pack),i,sFieldValue);
			sprintf(buf+strlen(buf),"%s:%d:%s\n",PDataList[i].szName,strlen(sFieldValue),sFieldValue);
		}
	}
	return 0;
}

void SQLErrorHandler()
{


/* ****** Updated by CHENYH at 2004-2-7 20:22:51 ****** 
    char szScratch[200] = "";

    PrintLine(hwndEdit, "Error Handler called:");
    wsprintf(szScratch, "    SQL Code = %li", SQLCODE);
    PrintLine(hwndEdit, szScratch);
    wsprintf(szScratch, "    SQL Server Message %li: '%s'", SQLERRD1, (LPSTR)SQLERRMC);
    PrintLine(hwndEdit, szScratch);
*/
   g_SqlDB.lErrorCode = SQLCODE;
   //g_BUnit.m_SqlDB.lErrorNumber = SQLERRD1;
   //strncpy(g_BUnit.m_SqlDB.szErrorMsg,(char *)SQLERRMC,sizeof(g_BUnit.m_SqlDB.szErrorMsg)-1);
//   strncpy(g_BUnit.m_SqlDB.szErrorState,SQLSTATE,sizeof(g_BUnit.m_SqlDB.szErrorState));
   if (SQLCODE<=-10000)
      SQLDebugLog(SQLCODE,"SQLERROR DEBUG: SQLSTATE(%s)-msg%ld:'%s'",
         g_SqlDB.szErrorState,
         g_SqlDB.lErrorNumber,
         g_SqlDB.szErrorMsg);
}

void SQLInitialize()
{
    // set Embedded SQL for C options
/*    
    EXEC SQL SET OPTION LOGINTIME 10;
    EXEC SQL SET OPTION QUERYTIME 100;
    EXEC SQL SET ANSI_DEFAULTS ON;  // Specifies SQL-92 compatibility
    EXEC SQL SET CONCURRENCY READONLY;  // Specifies read-only cursors. Data retrieved by a FETCH statement cannot be modified.
    EXEC SQL SET FETCHBUFFER 1;   
*/    
}

void SQLDisconnect()
{
   if (g_SqlDB.bConnected)
   {
#ifdef ESQL_DB2
	EXEC SQL CONNECT RESET;
#else
	EXEC SQL COMMIT WORK RELEASE;
#endif
      g_SqlDB.bConnected = 0;
   }
}

void SQLExit()
{
   SQLDisconnect(); 
}


// 函数名: SQLConnectToServer
// 编程  : 陈永华 2004-2-7 23:24:49
// 描述  : 根据g_BUnit.m_SqlDB中定义的SQL数据库连接参数，建立连接
// 返回  : long   0: 表示连接成功；其他则连接失败，检查g_BUnit.m_SqlDB中的SQL处理失败信息
long SQLConnectToServer()
{
   EXEC SQL BEGIN DECLARE SECTION;
   // for CONNECT TO statement
   char szConnectToServer[32] = "";
   char szConnectToDatabase[32] = "";
   char szConnectToLogin[32] = "";
   char szConnectToPassword[32] = "";
   EXEC SQL END DECLARE SECTION;

   //ST_SQLDB *pSqlDB = &(g_BUnit.m_SqlDB);
   ST_SQLDB *pSqlDB = &(g_SqlDB);
   
   // set defaults
   if (strlen(pSqlDB->szDatabase) == 0)
   {
      strcpy(pSqlDB->szDatabase, "pubs");
   }
   
   // build host variables for CONNECT TO
   if (strlen(pSqlDB->szServer) != 0)
   {
      strcpy(szConnectToServer, pSqlDB->szServer);
   }
   if (strlen(pSqlDB->szDatabase) != 0)
   {
      strcpy(szConnectToDatabase, pSqlDB->szDatabase);
   }
   if (strlen(pSqlDB->szLogin) != 0)
   {
      strcpy(szConnectToLogin, pSqlDB->szLogin);
   }
   if (strlen(pSqlDB->szPassword) != 0)
   {
      strcpy(szConnectToPassword, pSqlDB->szPassword);
   }
   
#ifdef ESQL_DB2	
   EXEC SQL CONNECT TO :szConnectToDatabase USER :szConnectToLogin USING :szConnectToPassword;
#else
	EXEC SQL CONNECT :szConnectToLogin IDENTIFIED BY :szConnectToPassword USING :szConnectToDatabase;
#endif

   if (SQLCODE == 0)
   {
      pSqlDB->bConnected = 1;
   }
   else
   {
      // problem connecting to SQL Server
      pSqlDB->bConnected = 0;
   }
   return(SQLCODE);
}

int  SQLIsConnectOK()
{
   EXEC SQL BEGIN DECLARE SECTION;
   sqlint32 sv_tv = 0;
   EXEC SQL END DECLARE SECTION;
#ifdef ESQL_DB2	
   EXEC SQL SELECT 1 INTO :sv_tv FROM SYSIBM.SYSDUMMY1;
#else
   EXEC SQL SELECT 1 INTO :sv_tv FROM dual;
#endif

   if (SQLCODE==0 && sv_tv==1)
      return(1);
   else
      return(0);
}

int  TestSQLConnect()
{
  int state = 0;
   static time_t lasttry = 0;
   time_t now = 0;

   EXEC SQL BEGIN DECLARE SECTION;
   sqlint32 sv_tv_test = 0;
   EXEC SQL END DECLARE SECTION;

   now = time(0);
   if((now - lasttry) > 10)
   {
   lasttry = now;
#ifdef ESQL_DB2	
   EXEC SQL SELECT 1 INTO :sv_tv_test FROM SYSIBM.SYSDUMMY1;
#else
   EXEC SQL SELECT 1 INTO :sv_tv_test FROM dual;
#endif
   if (SQLCODE==0 && sv_tv_test==1)
	state = 1;
   else
      state = 0;
   }
   else
   {
	if(SQLCODE == DB_DISCONN || SQLCODE == DB_BADCONN)
      		state = 0;
	else
		state = 1;
   }
   g_SqlDB.bConnected = state;
   return state;

}
int SaveCPackData(ST_CPACK* rpack)
{
#if 0
   	EXEC SQL BEGIN DECLARE SECTION;
   	sqlint32 hi_func_code = 0;
	char      hi_cpack_data[4001]="";
	char      hi_save_time[31]="";
    	sqlint32 ho_func_code = 0;
 	 EXEC SQL END DECLARE SECTION;

	//GetPack(rpack,hi_cpack_data);
	GetCpackDataString(rpack,hi_cpack_data);
	getdbtimestamp(hi_save_time);
	
	hi_func_code=rpack->head.RequestType;
#ifdef ESQL_DB2	
	EXEC SQL 
		select func_code into :ho_func_code  from t_comm_cfg where func_code=:hi_func_code fetch first 1 rows only with ur;
#else
	EXEC SQL 
		select func_code into :ho_func_code  from t_comm_cfg where func_code=:hi_func_code and rownum=1;
#endif
	if(SQLCODE)
	{
		db_chk_err(__FILE__, __LINE__,&sqlca);
		SQLCODE = 0;
		return 0;
	}
	EXEC SQL 
	insert into t_comm_log( SAVE_TIME,FUNC_CODE,CPACK_DATA)
	values(:hi_save_time,:hi_func_code,:hi_cpack_data);
	if(SQLCODE)
	{
		db_chk_err(__FILE__, __LINE__,&sqlca);
		EXEC SQL ROLLBACK;	
		return -1;
	}
	EXEC SQL COMMIT;
	if(SQLCODE)
	{
		db_chk_err(__FILE__, __LINE__,&sqlca);
		EXEC SQL ROLLBACK;	
		return -2;
	}	
#endif
	return 0;
}

