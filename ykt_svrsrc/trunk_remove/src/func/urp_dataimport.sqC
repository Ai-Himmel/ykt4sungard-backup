ESQL #include<stdlib.h>
ESQL #include<string.h>
ESQL #include<ctype.h>
ESQL #include <time.h>
ESQL #include<syslog.h>
ESQL #include<assert.h>
ESQL #include "pubdef.h"
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"

#define DB_CHK_ERR_INVALID

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
char	customer_stuempno[30 + 1] = "";
char	customer_stuempname[120 + 1] = "";
char	customer_sex[1 + 1] = "";
char	customer_custtype[60 + 1] = "";
char	customer_deptcode[10 + 1] = "";
char	customer_deptname[120 + 1] = "";
char	customer_scode[20 + 1] = "";
char	customer_sname[90 + 1] = "";
char	customer_classno[10 + 1] = "";
sqlint32 customer_isinschool = 0;
char	customer_nation[2 + 1] = "";
char	customer_area[2 + 1] = "";
char	customer_status[2 + 1] = "";
char	customer_tel[60 + 1] = "";
char	customer_address[150 + 1] = "";
char	customer_updstatus[1 + 1] = "";
char	customer_buildingno[10 + 1] = "";
char	customer_floorno[10 + 1] = "";
char	customer_roomno[10 + 1] = "";
char	customer_medfeetype[5 + 1] = "";
char	customer_feetype[5 + 1] = "";
char	customer_indate[10 + 1] = "";
char	customer_outdate[10 + 1] = "";
char	customer_upddate[10 + 1] = "";
char	customer_updtime[8 + 1] = "";
char	customer_idno[30 + 1] = "";
char	customer_reserve1[10 + 1] = "";
char	customer_reserve2[10 + 1] = "";

char	photo_manid[20 + 1] = "";
char	photo_custtype[60 + 1] = "";
char 	photo_stuempno[30 + 1] = "";
char	photo_stuempname[120 + 1] = "";
char	photo_deptcode[10 + 1] = "";
char 	photo_scode[20 + 1] = "";
char	photo_sname[90 + 1] = "";
sqlint32	photo_isinschool = 0;
sqlint32	photo_area = 0;
sqlint32	photo_status = 0;
sqlint32	photo_nation = 0;
sqlint32	photo_area_swp = 0;
sqlint32	photo_status_swp = 0;
sqlint32	photo_nation_swp = 0;
char	photo_sex[1 + 1] = "";
char	photo_medfeetype[5 + 1] = "";
char	photo_feetype[5 + 1] = "";
char	photo_buildingno[10 + 1] = "";
char	photo_floorno[10 + 1] = "";
char	photo_roomno[10 + 1] = "";
char	photo_syntime[15 + 1] = "";
char	photo_classno[10 + 1] = "";

sqlint16	indicator=0;
char	v_strsql[1024]="";
char	dbname[50]="";
char	user[50]="";
char	passwd[50]="";	
EXEC SQL END DECLARE SECTION;

int Init()
{
	char *p=NULL;

	p=getenv("PHOTO_DBNAME");
	if(p==NULL)
	{
		writelog(LOG_ERR,"Get PHOTO_DBNAME error!");
		goto ERR;
	}
	strcpy(dbname,p);

	p=getenv("PHOTO_DBUSER");
	if(p==NULL)
	{
		writelog(LOG_ERR,"Get PHOTO_DBUSER error!");
		goto ERR;
	}
	strcpy(user,p);

	p=getenv("PHOTO_DBPWD");
	if(p==NULL)
	{
		writelog(LOG_ERR,"Get PHOTO_DBPWD error!");
		goto ERR;
	}	
	strcpy(passwd,p);

	EXEC SQL CONNECT TO :dbname USER :user USING :passwd;
	if(SQLCODE)
	{
		writelog(LOG_ERR,"Connect to database error!");
		goto ERR;
	}
	return 0;
ERR:
	db_rollback();
	EXEC SQL CONNECT RESET; 
	return 1;
}

int DoWork(){
	int ret=0;
	char sqltmp[500]="";
	int cnt=0;

	ret=Init();
	if(ret)
	{
		writelog(LOG_ERR,"Initialize database error!");
		goto ERR;
	}
	printf("initialise database successfully!\n");

/*
	EXEC SQL DECLARE urp_customer_cur CURSOR WITH HOLD FOR 
		SELECT STUEMP_NO,STUEMP_NAME,SEX,CUT_TYPE,DEPT_CODE,DEPT_NAME,IS_INSCHOOL,
		       S_CODE,IN_DATE,OUT_DATE,
				CASE WHEN NATION = '' THEN '-2'
					 WHEN NATION IS NULL THEN '-1'
					 ELSE NATION 
				END AS NATION,
				CASE WHEN AREA = '' THEN '-2'
					 WHEN AREA IS NULL THEN '-1'
					 ELSE AREA 
				END AS AREA,
				CASE WHEN STATUS = '' THEN '-2'
					 WHEN STATUS IS NULL THEN '-1'
					 ELSE STATUS 
				END AS STATUS,
		       CAST(TEL AS CHAR(20)),ADDRESS,BUILDING_NO,FLOOR_NO,ROOM_NO,MED_FEETYPE,
		       FEE_TYPE,UPD_DATE,UPD_TIME,CLASS_NO 
			       FROM YKT_CUR.URP_CUSTOMER_TMP 
			       WHERE UPD_STATUS='0'
			       ORDER BY STUEMP_NO
			       FOR UPDATE;	
*/
#ifdef ESQL_DB2	
	 EXEC SQL DECLARE urp_customer_cur CURSOR WITH HOLD FOR
        SELECT STUEMP_NO,STUEMP_NAME,SEX,CUT_TYPE,DEPT_CODE,DEPT_NAME,IS_INSCHOOL,
               S_CODE,S_NAME,IN_DATE,OUT_DATE,
                CASE WHEN NATION = '' THEN '-2'
                     WHEN NATION IS NULL THEN '-1'
                     ELSE NATION
                END AS NATION,
                CASE WHEN AREA = '' THEN '-2'
                     WHEN AREA IS NULL THEN '-1'
                     ELSE AREA
                END AS AREA,
                CASE WHEN STATUS = '' THEN '-2'
                     WHEN STATUS IS NULL THEN '-1'
                     ELSE STATUS
                END AS STATUS,
               TEL,ADDRESS,BUILDING_NO,FLOOR_NO,ROOM_NO,MED_FEETYPE,
               FEE_TYPE,UPD_DATE,UPD_TIME,CLASS_NO,ID_NO,RESERVE_1,RESERVE_2
                   FROM YKT_CUR.URP_CUSTOMER
                   WHERE UPD_STATUS='0'
                   ORDER BY STUEMP_NO
                   FOR UPDATE;
#else
	 EXEC SQL DECLARE urp_customer_cur CURSOR FOR
        SELECT STUEMP_NO,STUEMP_NAME,SEX,CUT_TYPE,DEPT_CODE,DEPT_NAME,IS_INSCHOOL,
               S_CODE,S_NAME,IN_DATE,OUT_DATE,
                CASE WHEN NATION = '' THEN '-2'
                     WHEN NATION IS NULL THEN '-1'
                     ELSE NATION
                END AS NATION,
                CASE WHEN AREA = '' THEN '-2'
                     WHEN AREA IS NULL THEN '-1'
                     ELSE AREA
                END AS AREA,
                CASE WHEN STATUS = '' THEN '-2'
                     WHEN STATUS IS NULL THEN '-1'
                     ELSE STATUS
                END AS STATUS,
               TEL,ADDRESS,BUILDING_NO,FLOOR_NO,ROOM_NO,MED_FEETYPE,
               FEE_TYPE,UPD_DATE,UPD_TIME,CLASS_NO,ID_NO,RESERVE_1,RESERVE_2
                   FROM YKT_CUR.URP_CUSTOMER
                   WHERE UPD_STATUS='0'
                   ORDER BY STUEMP_NO
                   FOR UPDATE;
#endif
	if(SQLCODE){
		writelog(LOG_ERR,"Declare cursor error!");
		goto ERR;
	}
	printf("declare cursor successfully.....\n");
	EXEC SQL OPEN urp_customer_cur;
	if(SQLCODE){
		writelog(LOG_ERR,"open cursor error!");
		goto ERR;
	}
	printf("open cursor successfully.....\n");
	while(1){

		memset(customer_stuempno,0,sizeof(customer_stuempno));
		memset(customer_stuempname,0,sizeof(customer_stuempname));
		memset(customer_sex,0,sizeof(customer_sex));
		memset(customer_custtype,0,sizeof(customer_custtype));
		memset(customer_deptcode,0,sizeof(customer_deptcode));
		memset(customer_deptname,0,sizeof(customer_deptname));
		customer_isinschool = 0;
		memset(customer_scode,0,sizeof(customer_scode));
		memset(customer_sname,0,sizeof(customer_sname));
		memset(customer_indate,0,sizeof(customer_indate));
		memset(customer_outdate,0,sizeof(customer_outdate));
		memset(customer_nation,0,sizeof(customer_nation));
		memset(customer_area,0,sizeof(customer_area));
		memset(customer_status,0,sizeof(customer_status));
		memset(customer_tel,0,sizeof(customer_tel));
		memset(customer_address,0,sizeof(customer_address));
		memset(customer_buildingno,0,sizeof(customer_buildingno));
		memset(customer_floorno,0,sizeof(customer_floorno));
		memset(customer_roomno,0,sizeof(customer_roomno));
		memset(customer_medfeetype,0,sizeof(customer_medfeetype));
		memset(customer_feetype,0,sizeof(customer_feetype));
		memset(customer_upddate,0,sizeof(customer_upddate));
		memset(customer_updtime,0,sizeof(customer_updtime));
		memset(customer_classno,0,sizeof(customer_classno));
		memset(customer_idno,0,sizeof(customer_idno));
		memset(customer_reserve1,0,sizeof(customer_reserve1));
		memset(customer_reserve2,0,sizeof(customer_reserve2));


		EXEC SQL FETCH urp_customer_cur	INTO 
			:customer_stuempno:indicator,
			:customer_stuempname:indicator,
			:customer_sex:indicator,
			:customer_custtype:indicator,
			:customer_deptcode:indicator,
			:customer_deptname:indicator,
			:customer_isinschool:indicator,
			:customer_scode:indicator,
			:customer_sname:indicator,
			:customer_indate:indicator,
			:customer_outdate:indicator,
			:customer_nation:indicator,
			:customer_area:indicator,
			:customer_status:indicator,
			:customer_tel:indicator,
			:customer_address:indicator,
			:customer_buildingno:indicator,
			:customer_floorno:indicator,
			:customer_roomno:indicator,
			:customer_medfeetype:indicator,
			:customer_feetype:indicator,
			:customer_upddate:indicator,
			:customer_updtime:indicator,
			:customer_classno:indicator,
			:customer_idno:indicator,
			:customer_reserve1:indicator,
			:customer_reserve2:indicator;

		ret=SQLCODE;
		printf("fetch cursor error,errcode=[%d],cnt=[%d]\n",ret,cnt);
		if(ret){
			EXEC SQL CLOSE urp_customer_cur;
			if(DB_NOTFOUND==ret){				
				writelog(LOG_ERR,"Record not find!");
				printf("record not find......\n ");
				goto ERR;
			}
			else{
				writelog(LOG_ERR,"Error Happened when Fetch Cursor!");
				printf("error happened when fetch cursor....\n");
				goto ERR;
			}
		}
		cnt++;
		strcpy(v_strsql,"select stuempno,stuemp_name, sex,custtype,is_inschool,deptcode,specialtycode,s_name,nation,area,status,med_feetype,feetype,building_no,floor_no,room_no,class_no,man_id from ykt_cur.t_cif_photo ");
		sprintf(sqltmp," where stuempno ='%s'",customer_stuempno);
		strcat(v_strsql,sqltmp);

		EXEC SQL PREPARE query_stmt from :v_strsql;

		if(SQLCODE){
			writelog(LOG_ERR,"prepare query stmt error!");
			goto ERR;
		}

		EXEC SQL DECLARE v_cur CURSOR FOR query_stmt;

		if(SQLCODE){
			writelog(LOG_ERR,"dynamic declare cursor error!");
			goto ERR;
		}
		printf("declare inner cursor successfully.....\n");
		EXEC SQL OPEN v_cur;

		if(SQLCODE){
			writelog(LOG_ERR,"dynamic open cursor error!");
			goto ERR;
		}
		
		printf("open inner cursor successfully...\n");
		while(1)
		{
			memset(photo_stuempno,0,sizeof(photo_stuempno));
			memset(photo_stuempname,0,sizeof(photo_stuempname));
			memset(photo_sex,0,sizeof(photo_sex));
			memset(photo_custtype,0,sizeof(photo_custtype));
			photo_isinschool = 0;
			photo_area = 0;
			photo_status = 0;
			photo_nation = 0;
			photo_area_swp = 0;
			photo_status_swp = 0;
			photo_nation_swp = 0;
			//memset(customer_tel_swp,0,sizeof(customer_tel_swp));
			memset(photo_deptcode,0,sizeof(photo_deptcode));
			memset(photo_scode,0,sizeof(photo_scode));
			memset(photo_sname,0,sizeof(photo_sname));
			memset(photo_medfeetype,0,sizeof(photo_medfeetype));
			memset(photo_feetype,0,sizeof(photo_feetype));
			memset(photo_buildingno,0,sizeof(photo_buildingno));
			memset(photo_floorno,0,sizeof(photo_floorno));
			memset(photo_roomno,0,sizeof(photo_roomno));
			memset(photo_syntime,0,sizeof(photo_syntime));
			memset(photo_classno,0,sizeof(photo_classno));
			memset(photo_manid,0,sizeof(photo_manid));



			EXEC SQL FETCH v_cur INTO 
				:photo_stuempno:indicator,
				:photo_stuempname:indicator,
				:photo_sex:indicator,
				:photo_custtype:indicator,
				:photo_isinschool:indicator,
				:photo_deptcode:indicator,
				:photo_scode:indicator,
				:photo_sname:indicator,
				:photo_nation:indicator,
				:photo_area:indicator,
				:photo_status:indicator,
				:photo_medfeetype:indicator,
				:photo_feetype:indicator,
				:photo_buildingno:indicator,
				:photo_floorno:indicator,
				:photo_roomno:indicator,
				:photo_classno:indicator,
				:photo_manid:indicator;

			ret=SQLCODE;

			photo_status_swp = atoi(customer_status);
			photo_area_swp = atoi(customer_area);
			photo_nation_swp = atoi(customer_nation);
			strncpy(photo_manid,customer_idno,20);
			getsysdatetime(photo_syntime);
//			customer_tel[20] = '\0';
//			memcpy(customer_tel_swp,customer_tel,sizeof(customer_tel_swp));
			printf("customer_no is:%s\n",customer_stuempno);
			printf("inner fetch errorcode is:%d\n",ret);
			if(ret)
			{
				EXEC SQL CLOSE v_cur;
				if(DB_NOTFOUND == ret)
				{
					/*		customer_status = atoi(customer_status);
							customer_area = atoi(customer_area);
							customer_nation = atoi(customer_nation);
					 */
					printf("start to insert ......\n");
					EXEC SQL INSERT INTO YKT_CUR.T_CIF_PHOTO(CUT_TYPE,STUEMP_NO,STUEMP_NAME,DEPT_CODE
							,DEPT_NAME,S_CODE,S_NAME, AREA,SEX,NATION,TEL,ADDRESS
							,IS_INSCHOOL,BUILDING_NO,FLOOR_NO, ROOM_NO,MED_FEETYPE,MAN_ID
							,FEE_TYPE,IN_DATE,OUT_DATE,UPD_DATE,UPD_TIME,SYN_TIME,CLASS_NO
							,UPD_STATUS,RESERVE_1,RESERVE_2)
						VALUES(:customer_custtype,:customer_stuempno,:customer_stuempname,:customer_deptcode
							,:customer_deptname, :customer_scode,:customer_sname,:photo_area_swp
							,:customer_sex,:photo_nation_swp, :customer_tel,:customer_address
							,:customer_isinschool,:customer_buildingno, :customer_floorno
							,:customer_roomno,:customer_medfeetype,:photo_manid,:customer_feetype
							,:customer_indate ,:customer_outdate,:customer_upddate
							,:customer_updtime , :photo_syntime,:customer_classno,'0',:customer_reserve1
							,:customer_reserve2);
					if(SQLCODE)
					{
						writelog(LOG_ERR,"Insert Into Photo Database t_cif_photo_tmp Error!");	
						goto ERR;
					}
					printf("insert successfully......\n");
					break;	
				}
				else
				{
					writelog(LOG_ERR,"fetch cursor error");
					break;
					//					goto ERR;			
				}
			}
			else
			{
				printf("start to compare........\n");
				if(strcasecmp(trim(customer_custtype),trim(photo_custtype)) != 0 || 
						strcasecmp(trim(customer_stuempno),trim(photo_stuempno)) != 0 ||
						strcasecmp(trim(customer_sex),trim(photo_sex)) != 0 || 
						customer_isinschool != photo_isinschool ||
						photo_nation_swp != photo_nation ||
						photo_area_swp != photo_area ||
						strcasecmp(trim(customer_deptcode),trim(photo_deptcode)) != 0 ||
						strcasecmp(trim(customer_scode), trim(photo_scode)) != 0 ||
						strcasecmp(trim(customer_medfeetype),trim(photo_medfeetype)) != 0 || 
						strcasecmp(trim(customer_feetype),trim(photo_feetype)) != 0	||
						strcasecmp(trim(customer_buildingno),trim(photo_buildingno)) != 0 ||
						strcasecmp(trim(customer_floorno),trim(photo_floorno)) != 0 ||
						strcasecmp(trim(customer_roomno),trim(photo_roomno)) != 0 ||
						strcasecmp(trim(customer_classno),trim(photo_classno)) != 0 )
				{	
					printf("start to update........\n");
					EXEC SQL UPDATE YKT_CUR.T_CIF_PHOTO 
						SET CUT_TYPE = :customer_custtype,
						    STUEMP_NAME = :customer_stuempname,
							DEPT_CODE = :customer_deptcode,
							DEPT_NAME = :customer_deptname,
						    S_CODE = :customer_scode,
							S_NAME = :customer_sname,
						    NATION = :photo_nation_swp,
						    IS_INSCHOOL = :customer_isinschool,
						    AREA =	:photo_area_swp,
						    TEL =	:customer_tel,
						    ADDRESS = :customer_address,
						    BUILDING_NO = :customer_buildingno,
						    FLOOR_NO = :customer_floorno,
						    ROOM_NO	= :customer_roomno,	
						    MED_FEETYPE	= :customer_medfeetype,			
						    FEE_TYPE = :customer_feetype,
						    IN_DATE = :customer_indate,
						    OUT_DATE = :customer_outdate,
						    UPD_DATE = :customer_upddate,
						    UPD_TIME = :customer_updtime,
						    SYN_TIME = :photo_syntime,
							MAN_ID = :photo_manid,
							RESERVE_1 = :customer_reserve1,
							RESERVE_2 = :customer_reserve2,
							UPD_STATUS = '0'
							    WHERE STUEMP_NO = :customer_stuempno;
					if(SQLCODE)
					{
						writelog(LOG_ERR,"update t_cif_photo error");
						goto ERR;
					}
					printf("update successfully.....\n");
				}
				break;
			}
		}

		EXEC SQL UPDATE YKT_CUR.URP_CUSTOMER 
			SET UPD_STATUS = '1'
			where current of urp_customer_cur;
		//			where stuempno=:customer_stuempno;
		
		if(SQLCODE){
			writelog(LOG_ERR,"update upd_status error");
			goto ERR;
		}
		printf("update upd_status successfully.....\n");
		EXEC SQL COMMIT;

		if(SQLCODE)
		{
			writelog(LOG_ERR,"commit transaction error");
			goto ERR;
		}
	}
	return 0;
ERR:
	db_rollback();
	EXEC SQL CONNECT RESET;
	return 1;
}

void finally(){
	EXEC SQL CONNECT RESET;
	if(SQLCODE){
		writelog(LOG_ERR,"connect reset error");
	}
}

int main(){
	openlog("fdykt_hr",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL5);

	DoWork();

	finally();

	closelog();

	return 0;
}
// vim: ts=4 sw=4 sts=4 ft=esqlc
