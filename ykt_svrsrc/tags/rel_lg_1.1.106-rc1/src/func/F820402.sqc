/* --------------------------------------------
 * 程序名称: F820402.sqc
 * 创建日期: Sep 23 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: update t_pif_cur_syspara
 * --------------------------------------------
 * 修改日期: 
 * 修改人员: 耿刚
 * 修改描述: 修改前台时间格式
 * 版本信息: 
 * 备注信息: 
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

int F820402(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	id=0;                         	//参数标识
	char    	para_name[150+1]="";           	//参数名称
	char    	value[50+1]="";               	//参数值
	char    	usetime[27]="";               	//生效时间
	char    	optime[27]="";                	//设置时间
	char    	unit[10+1]="";                	//参数单位
	char    	comments[150+1]="";           	//备注
	sqlint16	indicator=0;
	char    	h_tmp_usetime[27]="";               	//生效时间
	EXEC SQL END DECLARE SECTION;


	int ret=0;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

	ResetNormalCPack(&aPack,0,1);

#ifdef DEBUG
	writelog(LOG_DEBUG,"id             :lvol0          [%d]",rPack->lvol0);

	writelog(LOG_DEBUG,"para_name      :scust_auth     [%s]",rPack->scust_auth);
	writelog(LOG_DEBUG,"value          :scard0         [%s]",rPack->scard0);
	writelog(LOG_DEBUG,"usetime        :spager         [%s]",rPack->spager);
	writelog(LOG_DEBUG,"unit           :scust_no       [%s]",rPack->scust_no);
	writelog(LOG_DEBUG,"comments       :scusttypes     [%s]",rPack->scusttypes);
#endif
	id=rPack->lvol0;

	EXEC SQL DECLARE cur_syspara_cur CURSOR FOR SELECT 
		para_name,
		value,
		usetime,
		optime,
		unit,
		comments
	FROM ykt_cur.t_pif_cur_syspara 
	WHERE 	id = :id 
 	FOR UPDATE;
	if(SQLCODE)
	{
		*pRetCode=E_DB_CUR_SYSPARA_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN cur_syspara_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_CUR_SYSPARA_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  FETCH cur_syspara_cur INTO
		:para_name:indicator,
		:value:indicator,
		:usetime:indicator,
		:optime:indicator,
		:unit:indicator,
		:comments:indicator;
	ret=SQLCODE;
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		EXEC SQL  CLOSE cur_syspara_cur;
		if(DB_NOTFOUND==ret)
			*pRetCode=E_DB_CUR_SYSPARA_N;
		else
			*pRetCode=E_DB_CUR_SYSPARA_R;
		goto L_RETU;
	}
	Strncpy_t(para_name,rPack->scust_auth,sizeof(para_name));
	Strncpy_t(value,rPack->scard0,sizeof(value));
	getsysdatetime(optime);
	Strncpy_t(unit,rPack->scust_no,sizeof(unit));
	Strncpy_t(comments,rPack->scusttypes,sizeof(comments));
	Strncpy_t(usetime,rPack->spager,sizeof(usetime));
	//str2dbtimestamp(usetime,h_tmp_usetime,"YYYYMMDDHHMMSS");

	EXEC SQL UPDATE ykt_cur.t_pif_cur_syspara SET 
		para_name=:para_name,
		value=:value,
		usetime=:usetime,
		optime=:optime,
		unit=:unit,
		comments=:comments
	WHERE current of cur_syspara_cur;
	ret=SQLCODE;
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		EXEC SQL  CLOSE cur_syspara_cur;
		if(DB_NOTFOUND==ret)
			*pRetCode=E_DB_CUR_SYSPARA_N;
		else
			*pRetCode=E_DB_CUR_SYSPARA_U;
		goto L_RETU;
	}

	EXEC SQL  CLOSE cur_syspara_cur;
	SetCol(handle,0);
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
}
