/* --------------------------------------------
 * 程序名称: F843370.sqc
 * 创建日期: Nov 12 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: update t_cif_shop_pos_log
 * --------------------------------------------
 * 修改日期: 
 * 修改人员: 
 * 修改描述: 
 * 版本信息: 
 * 备注信息: 
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

int F843370(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
		char    	update_date[10+1]="";         	//更新日期
		sqlint32	hi_id=0;                         			//编号
		char    	hi_begin_date[10+1]="";          	//使用开始日期
		char    	hi_begin_time[8+1]="";           	//使用开始时间
		char    	hi_end_time[8+1]="";             	//使用结束时间
		char    	hi_end_date[10+1]="";            	//使用结束日期
		char    	hi_comments[150+1]="";           //备注
		char    	ho_begin_date[10+1]="";          //使用开始日期
		char    	ho_begin_time[8+1]="";           //使用开始时间
		char    	ho_end_time[8+1]="";             	//使用结束时间
		char    	ho_end_date[10+1]="";            	//使用结束日期
		char    	ho_comments[150+1]="";          //备注
		sqlint32	fee_code = 0;					// 科目代码
		sqlint16	indicator=0;
	EXEC SQL END DECLARE SECTION;


	int ret=0;
	int device_id=0;
	int shop_id=0;
	char logicdate[11]="";
	T_t_pif_device tDevice;

#ifdef DEBUG
	writelog(LOG_DEBUG,"id             :lvol1          [%d]",rPack->lvol1);

	writelog(LOG_DEBUG,"id             :lvol1          [%d]",rPack->lvol1);
	writelog(LOG_DEBUG,"device_id      :lvol0          [%d]",rPack->lvol0);
	writelog(LOG_DEBUG,"shop_id        :damt0          [%lf]",rPack->damt0);
	writelog(LOG_DEBUG,"begin_date     :scust_no       [%s]",rPack->scust_no);
	writelog(LOG_DEBUG,"begin_time     :sholder_ac_no  [%s]",rPack->sholder_ac_no);
	writelog(LOG_DEBUG,"end_time       :sholder_ac_no2 [%s]",rPack->sholder_ac_no2);
	writelog(LOG_DEBUG,"end_date       :scust_no2      [%s]",rPack->scust_no2);
	writelog(LOG_DEBUG,"comments       :scusttypes     [%s]",rPack->scusttypes);
#endif
	ret=GetLogicDate(logicdate);					//业务日期
	if(ret)
	{
		*pRetCode = ret;
		goto L_RETU;
	}
	des2src(update_date, logicdate);
	hi_id=rPack->lvol1;
	device_id=rPack->lvol0;
	shop_id=rPack->damt0;
	des2src(hi_begin_date,rPack->scust_no);
	des2src(hi_end_date,rPack->scust_no2);
	des2src(hi_begin_time,rPack->sholder_ac_no);
	des2src(hi_end_time,rPack->sholder_ac_no2);
	des2src(hi_comments,rPack->scusttypes);
	fee_code = rPack->lvol2;

	if( fee_code < FEE_CODE_DEFAULT|| fee_code > FEE_CODE_MAX)
	{
		*pRetCode = E_FEE_CODE_SCOPE_ERR;
		goto L_RETU;
	}

	// 检查设备是否支持科目收费
	memset(&tDevice,0,sizeof tDevice);
	ret=DB_t_pif_device_read_by_device_id(rPack->lvol0, &tDevice);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			*pRetCode = E_DEVICE_NOT_EXIST;
		else
			*pRetCode=E_DB_DEVICE_R;
		goto L_RETU;
	}
	if( tDevice.is_fee_code == 0 && fee_code > FEE_CODE_DEFAULT)
	{
		*pRetCode = E_NOT_SUPPORT_FEE_CODE;
		goto L_RETU;
	}

	ret=ChkWorkTimeConflict2(shop_id,device_id,logicdate,hi_begin_date,hi_end_date,hi_begin_time,hi_end_time,hi_id,fee_code);
	if(ret)
	{
		*pRetCode = ret;		
		goto L_RETU;
	}
	EXEC SQL DECLARE shop_pos_log_cur CURSOR FOR SELECT 
		begin_date,
		begin_time,
		end_time,
		end_date,
		comments,
		fee_code
	FROM ykt_cur.t_cif_shop_pos_log 
	WHERE 	update_date = :update_date and id = :hi_id  FOR UPDATE;
	if(SQLCODE)
	{
		*pRetCode=E_DB_SHOP_POS_LOG_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN shop_pos_log_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_SHOP_POS_LOG_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  FETCH shop_pos_log_cur INTO
		:ho_begin_date:indicator,
		:ho_begin_time:indicator,
		:ho_end_time:indicator,
		:ho_end_date:indicator,
		:ho_comments:indicator,
		:fee_code:indicator;
	ret=SQLCODE;
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		EXEC SQL  CLOSE shop_pos_log_cur;
		if(DB_NOTFOUND==ret)
			*pRetCode=E_DB_SHOP_POS_LOG_N;
		else
			*pRetCode=E_DB_SHOP_POS_LOG_R;
		goto L_RETU;
	}

	EXEC SQL UPDATE ykt_cur.t_cif_shop_pos_log SET 
		begin_date=:hi_begin_date,
		begin_time=:hi_begin_time,
		end_time=:hi_end_time,
		end_date=:hi_end_date,
		comments=:hi_comments,
		fee_code=:fee_code
	WHERE current of shop_pos_log_cur;
	ret=SQLCODE;
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		EXEC SQL  CLOSE shop_pos_log_cur;
		if(DB_NOTFOUND==ret)
			*pRetCode=E_DB_SHOP_POS_LOG_N;
		else
			*pRetCode=E_DB_SHOP_POS_LOG_U;
		goto L_RETU;
	}
	EXEC SQL  CLOSE shop_pos_log_cur;
	return 0;
L_RETU:
	return -1;
}
