/* --------------------------------------------
 * 程序名称: F800723.sqc
 * 创建日期: Sep 29 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: query t_tif_transfer_log
 * --------------------------------------------
 * 修改日期: 20041014
 * 修改人员: 耿刚
 * 修改描述: 逻辑改动
 * 版本信息: 
 * 备注信息: 
 * --------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cpack.h"
#include "errdef.h"
#include "pubdef.h"
#include "pubdb.h"
#include "pubfunc.h"
#include "dbfunc.h"
#include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

int F800723(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	serial_no=0;                  	//流水号
	sqlint32	other_seri_no=0;              	//上传端流水号
	sqlint32	serial_type=0;                	//交易代码
	sqlint32	serial_state=0;               	//流水状态
	char    	operate_date[10+1]="";        	//发生日期
	char    	operate_time[8+1]="";         	//发生时间
	char    	collect_date[10+1]="";        	//采集日期
	char    	collect_time[8+1]="";         	//采集时间
	char    	enteract_date[10+1]="";       	//入帐日期
	char    	enteract_time[8+1]="";        	//入帐时间
	sqlint32	maindevice_id=0;              	//上传工作站标识
	sqlint32	device_id=0;                  	//转帐设备标识
	double  	transfer_fee=0;               	//转帐金额
	char    	out_account_id[16+1]="";      	//出帐帐号
	char    	in_account_id[16+1]="";       	//入帐账号
	sqlint32	card_id=0;                    	//关联卡号
	sqlint32	purse_id=0;                   	//关联卡钱包号
	char    	b_act_id[40+1]="";            	//外部系统帐号
	sqlint32	sys_id=0;                     	//外部系统标识
	sqlint32	condition_id=0;               	//自动转帐条件标识
	char    	operator_id[10+1]="";         	//操作员代码
	sqlint32	ecode=0;                      	//
	char    	comments[150+1]="";           	//
	sqlint16	indicator=0;
	char    	h_sqlcmd[1024]="";
	EXEC SQL END DECLARE SECTION;

	int    ret=0;
	int    row=0;
	int    first=0;
	char sqltmp[500]="";
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

#ifdef DEBUG
	writelog(LOG_DEBUG,"serial_no      :lvol0          [%d]",rPack->lvol0);
	writelog(LOG_DEBUG,"collect_date   :scust_no2      [%s]",rPack->scust_no2);
	writelog(LOG_DEBUG,"collect_time   :sbank_pwd2     [%s]",rPack->sbank_pwd2);
#endif

	ResetNormalCPack(&aPack,0,1);
	serial_no=rPack->lvol0;
	Strncpy_t(collect_date,rPack->scust_no2,sizeof(collect_date));
	Strncpy_t(collect_time,rPack->sbank_pwd2,sizeof(collect_time));

	strcpy(h_sqlcmd,"select  serial_no, other_seri_no, serial_type, serial_state, operate_date, operate_time, collect_date, collect_time, enteract_date, enteract_time, maindevice_id, device_id, transfer_fee, out_account_id, in_account_id, card_id, purse_id, b_act_id, sys_id, condition_id, operator_id, ecode, comments  from ykt_cur.t_tif_transfer_log ");
	if(serial_no!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  serial_no >%d ",serial_no);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and serial_no >%d ",serial_no);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(collect_date))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  collect_date ='%s' ",collect_date);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and collect_date ='%s' ",collect_date);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(collect_time))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  collect_time >'%s' ",collect_time);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and collect_time >'%s' ",collect_time);
			strcat(h_sqlcmd,sqltmp);
		}
	}

	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
		*pRetCode=E_DB_TRANSFER_LOG_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  DECLARE transfer_log_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		*pRetCode=E_DB_TRANSFER_LOG_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN transfer_log_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_TRANSFER_LOG_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	SetCol(handle,0);
	SetCol(handle,F_LVOL0,F_LVOL1,F_LVOL2,F_LVOL3,F_SCUST_NO,F_SBANK_PWD,F_SCUST_NO2,F_SBANK_PWD2,F_SORDER0,F_SDATE0,F_LVOL4,F_LVOL5,F_DAMT0,F_SSTATION0,F_SSTATION1,F_LVOL6,F_LVOL7,F_SBANK_ACC,F_LVOL8,F_LVOL9,F_SORDER1,F_LVOL10,F_SCUSTTYPES,0);
	while(1)
	{
		serial_no=0;
		other_seri_no=0;
		serial_type=0;
		serial_state=0;
		memset(operate_date,0,sizeof(operate_date));
		memset(operate_time,0,sizeof(operate_time));
		memset(collect_date,0,sizeof(collect_date));
		memset(collect_time,0,sizeof(collect_time));
		memset(enteract_date,0,sizeof(enteract_date));
		memset(enteract_time,0,sizeof(enteract_time));
		maindevice_id=0;
		device_id=0;
		transfer_fee=0;
		memset(out_account_id,0,sizeof(out_account_id));
		memset(in_account_id,0,sizeof(in_account_id));
		card_id=0;
		purse_id=0;
		memset(b_act_id,0,sizeof(b_act_id));
		sys_id=0;
		condition_id=0;
		memset(operator_id,0,sizeof(operator_id));
		ecode=0;
		memset(comments,0,sizeof(comments));

		EXEC SQL  FETCH transfer_log_cur INTO 
		:serial_no:indicator,
		:other_seri_no:indicator,
		:serial_type:indicator,
		:serial_state:indicator,
		:operate_date:indicator,
		:operate_time:indicator,
		:collect_date:indicator,
		:collect_time:indicator,
		:enteract_date:indicator,
		:enteract_time:indicator,
		:maindevice_id:indicator,
		:device_id:indicator,
		:transfer_fee:indicator,
		:out_account_id:indicator,
		:in_account_id:indicator,
		:card_id:indicator,
		:purse_id:indicator,
		:b_act_id:indicator,
		:sys_id:indicator,
		:condition_id:indicator,
		:operator_id:indicator,
		:ecode:indicator,
		:comments:indicator;
		ret=SQLCODE;
		if(ret)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL  CLOSE transfer_log_cur;
			if(DB_NOTFOUND==ret)
			{
				if(row)
					break;
				else
					*pRetCode=E_DB_TRANSFER_LOG_N;
			}
			else
				*pRetCode=E_DB_TRANSFER_LOG_R;
			goto L_RETU;
		}

		out_pack->lvol0=serial_no;
		out_pack->lvol1=other_seri_no;
		out_pack->lvol2=serial_type;
		out_pack->lvol3=serial_state;
		Strncpy_t(out_pack->scust_no,operate_date,sizeof(out_pack->scust_no));
		Strncpy_t(out_pack->sbank_pwd,operate_time,sizeof(out_pack->sbank_pwd));
		Strncpy_t(out_pack->scust_no2,collect_date,sizeof(out_pack->scust_no2));
		Strncpy_t(out_pack->sbank_pwd2,collect_time,sizeof(out_pack->sbank_pwd2));
		Strncpy_t(out_pack->sorder0,enteract_date,sizeof(out_pack->sorder0));
		Strncpy_t(out_pack->sdate0,enteract_time,sizeof(out_pack->sdate0));
		out_pack->lvol4=maindevice_id;
		out_pack->lvol5=device_id;
		out_pack->damt0=transfer_fee;
		Strncpy_t(out_pack->sstation0,out_account_id,sizeof(out_pack->sstation0));
		Strncpy_t(out_pack->sstation1,in_account_id,sizeof(out_pack->sstation1));
		out_pack->lvol6=card_id;
		out_pack->lvol7=purse_id;
		Strncpy_t(out_pack->sbank_acc,b_act_id,sizeof(out_pack->sbank_acc));
		out_pack->lvol8=sys_id;
		out_pack->lvol9=condition_id;
		Strncpy_t(out_pack->sorder1,operator_id,sizeof(out_pack->sorder1));
		out_pack->lvol10=ecode;
		Strncpy_t(out_pack->scusttypes,comments,sizeof(out_pack->scusttypes));
		row++;
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(row%15==0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
}
