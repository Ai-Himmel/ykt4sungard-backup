/* --------------------------------------------
 * 程序名称: F843376.sqc
 * 创建日期: Nov 13 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: query t_cif_cuttypefee
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

int F843376(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
		sqlint32	cut_type=0;                   	//客户类别代码
		char    	type_name[150+1]="";           	//客户类别名称
		char    	is_outfee[1+1]="";            	//是否交搭伙费
		double  	ratio=0;                      	//搭伙费费率
		sqlint32	validdate=0;                  	//正式卡有效期
		double  	deposit_fee=0;                	//押金金额
		double  	cost_fee=0;                   	//卡成本费
		double  	in_fee=0;                     	//手续金额
		sqlint32	is_firstcostfee=0;            	//第一次是否收取卡成本费
		sqlint32	is_returncostfee=0;           	//是否退卡成本费
		double  	max_bala=0;                   	//
		sqlint16	indicator=0;
		char    	h_sqlcmd[1024]="";
	EXEC SQL END DECLARE SECTION;

	int    ret=0;
	int    row=0;
	int    first=0;
	char sqltmp[500]="";
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

#ifdef DEBUG
	writelog(LOG_DEBUG,"cut_type       :lvol0          [%d]",rPack->lvol0);
#endif

	ResetNormalCPack(&aPack,0,1);
	cut_type=rPack->lvol0;

	strcpy(h_sqlcmd,"select  cut_type, type_name, is_outfee, ratio, validdate, deposit_fee, cost_fee, in_fee, is_firstcostfee, is_returncostfee, max_bala  from ykt_cur.t_cif_cuttypefee ");
	if(cut_type!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  cut_type =%d ",cut_type);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and cut_type =%d ",cut_type);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	strcat(h_sqlcmd," order by cut_type ");
	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
		*pRetCode=E_DB_CUTTYPEFEE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  DECLARE cuttypefee_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		*pRetCode=E_DB_CUTTYPEFEE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN cuttypefee_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_CUTTYPEFEE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	SetCol(handle,0);
	SetCol(handle,F_LVOL0,F_SCARD0,F_SMAIN_FLAG,F_DAMT0,F_LVOL1,F_DAMT1,F_DAMT2,F_DAMT3,F_LVOL2,F_LVOL3,F_DAMT4,0);
	while(1)
	{
		cut_type=0;
		memset(type_name,0,sizeof(type_name));
		memset(is_outfee,0,sizeof(is_outfee));
		ratio=0;
		validdate=0;
		deposit_fee=0;
		cost_fee=0;
		in_fee=0;
		is_firstcostfee=0;
		is_returncostfee=0;
		max_bala=0;

		EXEC SQL  FETCH cuttypefee_cur INTO
		:cut_type:indicator,
		:type_name:indicator,
		:is_outfee:indicator,
		:ratio:indicator,
		:validdate:indicator,
		:deposit_fee:indicator,
		:cost_fee:indicator,
		:in_fee:indicator,
		:is_firstcostfee:indicator,
		:is_returncostfee:indicator,
		:max_bala:indicator;
		ret=SQLCODE;
		if(ret)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL  CLOSE cuttypefee_cur;
			if(DB_NOTFOUND==ret)
			{
				if(row)
					break;
				else
					*pRetCode=E_DB_CUTTYPEFEE_N;
			}
			else
				*pRetCode=E_DB_CUTTYPEFEE_R;
			goto L_RETU;
		}

		out_pack->lvol0=cut_type;
		Strncpy_t(out_pack->scard0,type_name,sizeof(out_pack->scard0));
		Strncpy_t(out_pack->smain_flag,is_outfee,sizeof(out_pack->smain_flag));
		out_pack->damt0=ratio;
		out_pack->lvol1=validdate;
		out_pack->damt1=deposit_fee;
		out_pack->damt2=cost_fee;
		out_pack->damt3=in_fee;
		out_pack->lvol2=is_firstcostfee;
		out_pack->lvol3=is_returncostfee;
		out_pack->damt4=max_bala;
		row++;
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(row%15==0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
}
