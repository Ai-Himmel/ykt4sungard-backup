/* --------------------------------------------
 * 创建日期: 2008-06-29
 * 程序作者: 闻剑
 * 版本信息: 1.0.0.0
 * 程序功能:权限模板设置
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "dbfunc_foo.h"
ESQL #include "busqc.h"
ESQL #include "acctrans.h"
ESQL #include <string>
ESQL #include <sstream>
ESQL using namespace std;
EXEC SQL INCLUDE SQLCA;

#if 0
int F820311(TRUSERID * handle, int iRequest, ST_PACK * rPack, int *iRetCode, char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;

		char v_module_code[6+1] = "";
		char v_module_name[150+1] = "";
		char v_menu_set[800+1] = "";
		char v_func_set[600+1] = "";
		//char c_menu_set[100+1] = "";
		char c_func_set[100+1] = "";
		char v_opercode[10+1] = "";
		char v_oper_date[8+1] = "";
		char v_oper_time[8+1] = "";
		char v_tmp[20+1] = "";		//临时
		char temp[200+1] = "";
	EXEC SQL END DECLARE SECTION;
	
	int ret = 0;
	char tmp_flag[2+1] = "";

	Strncpy_t(v_opercode, rPack->scust_no, sizeof(v_opercode));
	Strncpy_t(v_module_code, rPack->sbank_code, sizeof(v_module_code));
	Strncpy_t(v_module_name, rPack->scust_auth2, sizeof(v_module_name));
	Strncpy_t(temp, rPack->vsvarstr0, sizeof(temp));
	sprintf(v_menu_set, temp);
	Strncpy_t(temp,rPack->vsvarstr1,sizeof(temp));
	strcat(v_menu_set,temp);
	Strncpy_t(temp,rPack->vsvarstr2,sizeof(temp));
	strcat(v_menu_set,temp);
	Strncpy_t(temp,rPack->vsvarstr3,sizeof(temp));
	strcat(v_menu_set,temp);
	Strncpy_t(c_func_set, (char*)rPack->usset1, sizeof(c_func_set));

	getsysdate(v_oper_date);
	getsystime(v_oper_time);

//	UssetConvert(1, c_menu_set, v_menu_set, 100, 800);
	UssetConvert(1, c_func_set, v_func_set, 100, 600);

	if ('1' == rPack->sstatus0[0])	//增加站点
	{

		//先检查站点是否已存在
		EXEC SQL SELECT modulename INTO:v_tmp FROM YKT_CUR.t_moduleauth WHERE modulecode =:v_module_code;
		
		ret = SQLCODE;
		
		if (SC_NOTFOUND==SQLCODE)
		{						//正确，没有插入重复记录，开始插入新数据

			EXEC SQL INSERT INTO YKT_CUR.t_moduleauth(module_code, module_name, menu_set, func_set, opercode, oper_date, oper_time) 
				VALUES(:v_module_code,:v_module_name,:v_menu_set,:v_func_set,:v_opercode,:v_oper_date,:v_oper_time);

			ret = SQLCODE;

			if(0 != SQLCODE)
			{
				*iRetCode = E_DB_MODULE_AUTH_I;
				db_chk_err(__FILE__,__LINE__,&sqlca);
				goto L_Ret;
			}
			
			writelog(LOG_ERR,"menu_set  [%s]",v_menu_set);			
		}
		else if (0 == SQLCODE)
		{
			*iRetCode = E_DB_MODULE_AUTH_RE;
			goto L_Ret;
		}
		else
		{
			*iRetCode = E_DB_MODULE_AUTH_R;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			goto L_Ret;
		}
	}
	else if ('2' == rPack->sstatus0[0] )
	{							//修改站点
		//先检查站点是否存在
		EXEC SQL SELECT modulename INTO:v_tmp FROM YKT_CUR.t_moduleauth WHERE modulecode =:v_module_code;
		
		ret = SQLCODE;
		if (0==SQLCODE)
		{						//存在，正确，继续处理，开始修改信息
			EXEC SQL UPDATE YKT_CUR.t_moduleauth SET modulename =:v_module_name, menuset =:v_menu_set, func_set =:v_func_set, opercode =:v_opercode, oper_date =:v_oper_date, oper_time =:v_oper_time WHERE module_code =:v_module_code;

			ret = SQLCODE;

			if(0 != SQLCODE)
			{
				*iRetCode = E_DB_MODULE_AUTH_U;
				db_chk_err(__FILE__,__LINE__,&sqlca);
				goto L_Ret;
			}
		}
		else
		{						//不存在，错误处理
			*iRetCode = E_DB_MODULE_AUTH_N;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			goto L_Ret;
		}
	}
	else if ('3' == rPack->sstatus0[0])
	{							//删除站点
		//先检查站点是否存在
		EXEC SQL SELECT modulename INTO:v_tmp FROM YKT_CUR.t_moduleauth WHERE modulecode =:v_module_code;
		
		ret = SQLCODE;
		if (0 == SQLCODE)
		{						//存在，正确，继续处理，开始删除站点
			EXEC SQL delete FROM YKT_CUR.t_moduleauth WHERE modulecode =:v_module_code;
			ret = SQLCODE;

			if (0 != SQLCODE)
			{
				*iRetCode = E_DB_MODULE_AUTH_D;
				db_chk_err(__FILE__,__LINE__,&sqlca);
				goto L_Ret;
			}
		}
		else
		{						//不存在，错误处理
			*iRetCode = E_DB_MODULE_AUTH_N;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			goto L_Ret;
		}
	}
	else
	{
		*iRetCode = E_NO_THIS_SYMBOL;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		ret = -1;
		goto L_Ret;
	}
	
	return 0;	
L_Ret:
	return -1;
}
#endif
static int Add820311(ST_PACK *rPack,char *szMsg)
{
	int ret=0;
	T_t_moduleauth moduleauth;
	memset(&moduleauth,0,sizeof(moduleauth));
	
	des2src(moduleauth.modulecode,rPack->sbank_code);
	des2src(moduleauth.modulename,rPack->scust_auth2);
	memcpy(moduleauth.menuset,rPack->vsvarstr0,200);
	memcpy(moduleauth.menuset+200,rPack->vsvarstr1,200);
	memcpy(moduleauth.menuset+400,rPack->vsvarstr2,200);
	memcpy(moduleauth.menuset+600,rPack->vsvarstr3,200);
	UssetConvert(1,(char*)rPack->usset1, moduleauth.funcset,100,600);
	des2src(moduleauth.opercode,rPack->scust_no);
	des2src(moduleauth.lastsaved,rPack->scust_limit2);
	
	ret=DB_t_moduleauth_add(&moduleauth);
	if(ret)
	{
	  if(DB_REPEAT==ret)
		return E_DB_MODULEAUTH_E;
	  else
		return E_DB_MODULEAUTH_I;
	}
	return 0;
}
static int Delete820311(ST_PACK *rPack,char *szMsg)
{
	int ret=0;
	T_t_moduleauth moduleauth;
	memset(&moduleauth,0,sizeof(moduleauth));
	
	des2src(moduleauth.modulecode,rPack->sbank_code);

	ret=DB_t_moduleauth_del_by_modulecode(moduleauth.modulecode);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_MODULEAUTH_N;
		else
			return E_DB_MODULEAUTH_D;
	}
	return 0;
}
static int Update820311(ST_PACK *rPack,char *szMsg)
{
	int ret=0;
	T_t_moduleauth moduleauth;
	memset(&moduleauth,0,sizeof(moduleauth));
	
	des2src(moduleauth.modulecode,rPack->sbank_code);
	
	ret=DB_t_moduleauth_read_lock_by_c0_and_modulecode(moduleauth.modulecode,&moduleauth);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_MODULEAUTH_N;
		else
			return E_DB_MODULEAUTH_R;
	}
	if(strlen(rPack->scust_auth2))
		des2src(moduleauth.modulename,rPack->scust_auth2);
	if(strlen(rPack->vsvarstr0))
		des2src(moduleauth.menuset,rPack->vsvarstr0);
	if(strlen((char*)rPack->usset1))
		UssetConvert(1, (char*)rPack->usset1, moduleauth.funcset,100,600);
	if(strlen(rPack->scust_no))
		des2src(moduleauth.opercode,rPack->scust_no);
	if(strlen(rPack->scust_limit2))
		des2src(moduleauth.lastsaved,rPack->scust_limit2);
	ret=DB_t_moduleauth_update_lock_by_c0(&moduleauth);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_MODULEAUTH_N;
		else
			return E_DB_MODULEAUTH_U;
	}
	return 0;
}
static int Read820311(TRUSERID * handle, int iRequest, ST_PACK * rPack, int *pRetCode, char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char	 modulecode[31]="";
	char	 modulename[61]="";
	char	 menuset[801]="";
	char	 funcset[601]="";
	char	 opercode[9]="";
	char	 lastsaved[31]="";
	sqlint16 indicator=0;
	char     h_sqlcmd[1024]="";
	EXEC SQL END DECLARE SECTION;
	
	int ret = 0;
	int row = 0;
	ST_CPACK aPack;
	ST_PACK *outPack = &(aPack.pack);
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,F_SBANK_CODE,F_SCUST_AUTH2,F_VSVARSTR0,
				  F_VSVARSTR1,F_VSVARSTR2,F_VSVARSTR3,
				  F_USSET1,F_SCUST_NO,F_SCUST_LIMIT2,
				  0);
	des2src(modulecode,rPack->sbank_code);
	des2src(modulename,rPack->scust_auth2);
	des2src(opercode,rPack->scust_no);
	stringstream sql;
	sql<<"SELECT ";
	sql<<"modulecode,";
	sql<<"modulename,";
	sql<<"menuset,";
	sql<<"funcset,";
	sql<<"opercode,";
	sql<<"lastsaved ";
	sql<<"FROM ykt_cur.t_moduleauth ";
	sql<<"WHERE 1=1 ";
	if(strlen(modulecode))
		sql<<" and modulecode = '"<<modulecode<<"'";
	if(strlen(modulename))
		sql<<" and modulename like '"<<modulename<<"'";
	if(strlen(opercode))
		sql<<" and opercode = '"<<opercode<<"'";
	sql<<" order by modulecode";
	strcpy(h_sqlcmd,sql.str().c_str());
	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_PREPARE;
	}
	EXEC SQL DECLARE moduleauth_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL  OPEN moduleauth_cur;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_OPEN;
	}
	while(1)
	{
		modulecode[0]=0;
		modulename[0]=0;
		menuset[0]=0;
		funcset[0]=0;
		opercode[0]=0;
		lastsaved[0]=0;
		EXEC SQL FETCH moduleauth_cur INTO
		:modulecode:indicator,
		:modulename:indicator,
		:menuset:indicator,
		:funcset:indicator,
		:opercode:indicator,
		:lastsaved:indicator;
		ret=SQLCODE;
		if(ret)
		{
		  CHECK_DB_ERR;
		  EXEC SQL CLOSE moduleauth_cur;
		  if(DB_NOTFOUND==ret)
		  {
			if(row)
			  break;
			else
			  return E_DB_MODULEAUTH_N;
		  }
		  else
			return E_DB_MODULEAUTH_R;
		}
		row++;
		des2src(outPack->sbank_code,modulecode);
		des2src(outPack->scust_auth2,modulename);
		des2src(outPack->vsvarstr0,menuset);
		memcpy(outPack->vsvarstr0,menuset,200);
		memcpy(outPack->vsvarstr1,menuset+200,200);
		memcpy(outPack->vsvarstr2,menuset+400,200);
		memcpy(outPack->vsvarstr3,menuset+600,200);
		UssetConvert(2,(char*)outPack->usset1,funcset,100,600);
		des2src(outPack->scust_no,opercode);
		des2src(outPack->scust_limit2,lastsaved);
		PutRow(handle,outPack,pRetCode,szMsg);
		if(row%15==0)
		  AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
}

int F820311(TRUSERID * handle, int iRequest, ST_PACK * rPack, int *pRetCode, char *szMsg)
{
	int ret = 0;
	CAccTrans *pAccTrans=CAccTrans::getInstance();
	pAccTrans->clear();
	GetCpackDataString(rPack,pAccTrans->cpackdata);
	switch(rPack->sstatus0[0])
	{
		//添加
		case 'A':
			pAccTrans->trans.transcode=MAKETRANSCODEADD(TCM_AUTHTPL);
			ret=Add820311(rPack,szMsg);
			break;
		//注销
		case 'D':
			pAccTrans->trans.transcode=MAKETRANSCODEDEL(TCM_AUTHTPL);
			ret=Delete820311(rPack,szMsg);
			break;
		//修改
		case 'U':
			pAccTrans->trans.transcode=MAKETRANSCODEUPD(TCM_AUTHTPL);
			ret=Update820311(rPack,szMsg);
			break;
		default:
			//查询
			pAccTrans->trans.transcode=MAKETRANSCODEQRY(TCM_AUTHTPL);
			ret=Read820311(handle,iRequest,rPack,pRetCode,szMsg);
			break;
	}
	if(ret)
		return ret;
	ret=pAccTrans->addOperDtl(rPack->semp);
	if(ret)
	{
		if(E_SYSOPER_NORIGHT==ret)
			return 0;
		else
			return ret;
	}
	return 0;
}

