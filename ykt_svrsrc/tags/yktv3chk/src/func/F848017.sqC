/* --------------------------------------------
 * 程序名称: F848012.c
 * 创建日期: 2005-10-20
 * 程序作者: 汤成
 * 版本信息: 1.0.0.0
 * 程序功能:门禁机历史流水查询
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "dbfunc.h"
ESQL #include "busqc.h"


static int Read848017(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char r_tx_date[9] = "";
	char r_door_id[9] = "";
	char r_door_name[151] = "";
	sqlint32 r_total = 0;
	sqlint32 r_success_total = 0;
	sqlint32 r_failed_total = 0;
	char r_sqlcmd[2048] = "";
	char r_sqltmp[128] = "";
	sqlint16 r_ind = 0;
	EXEC SQL END DECLARE SECTION;
	int ret = 0;
	int rows = 0;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

	ResetNormalCPack(&aPack,0 ,1);
	SetCol(handle,0);
	SetCol(handle,F_SNAME,F_SEMAIL,F_SDATE0,F_LVOL1,F_LVOL2,F_LVOL3,0);
	
#ifdef ESQL_DB2
	sprintf(r_sqlcmd,"SELECT COUNT(t.deviceid)  TX_TOTAL \
				,SUM(TX_TYPE)   TX_SUCCESS  \
				,(COUNT(t.deviceid) - SUM(TX_TYPE))  TX_TYPE_FAILED \
				,t.deviceid,d.device_name,T.TX_DATE FROM  \
				(SELECT CASE TX_MARK WHEN 153 THEN 1 ELSE 0 END  TX_TYPE  \
				,deviceid,TX_DATE,TX_TIME FROM YKT_HIS.V_DOOR_TXDTL_HIS ) T,ykt_cur.t_pif_device d \
				where d.devphyid = t.deviceid ");
#else
	sprintf(r_sqlcmd,"SELECT COUNT(t.deviceid)  TX_TOTAL \
				,SUM(TX_TYPE)   TX_SUCCESS  \
				,(COUNT(t.deviceid) - SUM(TX_TYPE))  TX_TYPE_FAILED \
				,t.deviceid,d.device_name,T.TX_DATE FROM  \
				(SELECT CASE TX_MARK WHEN 153 THEN 1 ELSE 0 END  TX_TYPE  \
				,deviceid,TX_DATE,TX_TIME FROM YKT_HIS.T_DOOR_TXDTL_HIS ) T,ykt_cur.t_pif_device d \
				where d.devphyid = t.deviceid ");

#endif
	if(strlen(in_pack->sname) > 0 )
	{
		sprintf(r_sqltmp," AND T.deviceid LIKE '%%%s%%' ",in_pack->sname);
		strcat(r_sqlcmd,r_sqltmp);
	}
	if(!IsInvalidDateTime(in_pack->sdate0,"YYYYMMDD"))
	{
		sprintf(r_sqltmp," AND T.TX_DATE >= '%s' ",in_pack->sdate0);
		strcat(r_sqlcmd,r_sqltmp);
	}
	if(!IsInvalidDateTime(in_pack->sdate1,"YYYYMMDD"))
	{
		sprintf(r_sqltmp," AND T.TX_DATE <= '%s' ",in_pack->sdate1);
		strcat(r_sqlcmd,r_sqltmp);
	}

	strcat(r_sqlcmd," GROUP BY  T.deviceid,D.DEVICE_NAME,T.TX_DATE ORDER BY T.TX_DATE desc ");
	
	EXEC SQL PREPARE query_stmt FROM :r_sqlcmd;
	if( SQLCODE )
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL  DECLARE door_tx_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL  OPEN door_tx_cur;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_OPEN;
	}
	while(1)
	{
		
		memset(r_door_id,0,sizeof(r_door_id));
		memset(r_door_name,0,sizeof(r_door_name));
		memset(r_tx_date,0,sizeof(r_tx_date));
		r_total = 0;
		r_success_total = 0;
		r_failed_total = 0;
		EXEC SQL FETCH door_tx_cur INTO :r_total:r_ind,:r_success_total:r_ind,:r_failed_total:r_ind,
			:r_door_id:r_ind,:r_door_name:r_ind,:r_tx_date:r_ind;
		if(SQLCODE)
		{
			ret = SQLCODE;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL  CLOSE door_tx_cur;
			if(DB_NOTFOUND == ret)
			{
				if(rows == 0)
					return E_DB_DOOR_TXDTL_HIS_N;
				break;
			}
			return E_DB_DOOR_TXDTL_HIS_R;
		}
		rows++;
		Strncpy_t(out_pack->sdate0,r_tx_date,sizeof out_pack->sdate0);
		Strncpy_t(out_pack->sname,r_door_id,sizeof out_pack->sname);
		Strncpy_t(out_pack->semail,r_door_name,sizeof out_pack->semail);
		out_pack->lvol1 = r_total;
		out_pack->lvol2 = r_success_total;
		out_pack->lvol3 = r_failed_total;
		PutRow( handle, out_pack, pRetCode, szMsg);
		if( rows % 20 == 0 )
		{
			AnswerDataPart(handle, *pRetCode, szMsg);
		}
		
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
}

int F848017(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	int ret = 0;
	ntrim(in_pack->sall_name,sizeof(in_pack->sall_name));
	ret=Read848017(handle,iRequest,in_pack,pRetCode,szMsg);
	if(ret)
	{
		*pRetCode=ret;
		//writelog(LOG_ERR,"Read Door TXDTL HIS err[%d]",ret);
		goto L_RETU;
	}
	return 0;
L_RETU:
	return  -1;
}





