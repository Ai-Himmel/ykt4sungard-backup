/* --------------------------------------------
 * 创建日期: 2008-07-16 
 * 程序作者: 闻剑
 * 版本信息: 1.0.0.0
 * 程序功能: 子系统查询

 * --------------------------------------------
 * 修改日期: 
 * 修改人员: 
 * 修改描述: 
 * 版本信息: 
 * 备注信息: 
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "dbfunc_foo.h"
ESQL #include "busqc.h"
ESQL #include "acctrans.h"

ESQL #include <string>
ESQL #include <iostream>
ESQL #include <sstream>
ESQL using namespace std;
EXEC SQL INCLUDE SQLCA;

int F820005(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
#if 0
    EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	system_id=0;                  	//子系统标识
	char    	system_name[150+1]="";         	//子系统名称
	sqlint32	system_type=0;                	//子系统类别
	sqlint32	state=0;                      	//子系统状态
	sqlint32	area=0;                       	//子系统所在区域
	sqlint32	server_id=0;                  	//工作站号（设备注册号）
	char    	ip[20+1]="";                  	//IP地址
	char    	mac_addr[20+1]="";            	//网卡物理地址
	char    	synch_time[26+1]="";          	//前次时钟同步时间
	sqlint32	version=0;                    	//子系统版本号
	char    	manager[20+1]="";             	//负责人员工号
	char    	tel[20+1]="";                 	//联系电话
	char    	addr[150+1]="";            	//联系地址
	char    	comments[150+1]="";           	//备注
	sqlint32	port = 0;
	sqlint32	enc_type=0;
	char		funclist[256] = "";
	sqlint16	indicator=0;
	char    	h_sqlcmd[1024]="";
	EXEC SQL END DECLARE SECTION;

	int    ret=0;
	int    row=0;
	int    first=0;
	char sqltmp[500]="";
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

#ifdef DEBUG
	writelog(LOG_DEBUG,"system_name    :scust_auth     [%s]",rPack->scust_auth);
	writelog(LOG_DEBUG,"system_type    :lvol1          [%d]",rPack->lvol1);
	writelog(LOG_DEBUG,"state          :lvol2          [%d]",rPack->lvol2);
	writelog(LOG_DEBUG,"area           :lvol3          [%d]",rPack->lvol3);
	writelog(LOG_DEBUG,"server_id      :lvol4          [%d]",rPack->lvol4);
	writelog(LOG_DEBUG,"ip             :scust_auth2    [%s]",rPack->scust_auth2);
	writelog(LOG_DEBUG,"mac_addr       :sname          [%s]",rPack->sname);
	writelog(LOG_DEBUG,"manager        :sname2         [%s]",rPack->sname2);
	writelog(LOG_DEBUG,"addr        :scusttypes     [%s]",rPack->scusttypes);
#endif

	ResetNormalCPack(&aPack,0,1);
	Strncpy_t(system_name,rPack->scust_auth,sizeof(system_name));
	system_type=rPack->lvol1;
	state=rPack->lvol2;
	area=rPack->lvol3;
	server_id=rPack->lvol4;
	Strncpy_t(ip,rPack->scust_auth2,sizeof(ip));
	Strncpy_t(mac_addr,rPack->sname,sizeof(mac_addr));
	Strncpy_t(manager,rPack->sname2,sizeof(manager));
	Strncpy_t(addr,rPack->scusttypes,sizeof(addr));

	strcpy(h_sqlcmd,"select  system_id, system_name, system_type, state, area, server_id, ip, mac_addr, synch_time, version, manager, tel, addr, comments \
			,port,enc_type,func_list from ykt_cur.t_pif_subsystem ");
	if(strlen(system_name))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  system_name like '%%%s%%' ",system_name);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and system_name like '%%%s%%' ",system_name);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(system_type!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  system_type =%d ",system_type);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and system_type =%d ",system_type);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(state!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  state =%d ",state);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and state =%d ",state);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(area!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  area =%d ",area);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and area =%d ",area);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(server_id!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  server_id =%d ",server_id);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and server_id =%d ",server_id);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(ip))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  ip = '%s' ",ip);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and ip = '%s' ",ip);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(mac_addr))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  mac_addr = '%s' ",mac_addr);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and mac_addr = '%s' ",mac_addr);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(manager))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  manager like '%%%s%%' ",manager);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and manager like '%%%s%%' ",manager);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(addr))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  addr like '%%%s%%' ",addr);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and addr like '%%%s%%' ",addr);
			strcat(h_sqlcmd,sqltmp);
		}
	}

	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
		*pRetCode=E_DB_SUBSYSTEM_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  DECLARE subsystem_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		*pRetCode=E_DB_SUBSYSTEM_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN subsystem_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_SUBSYSTEM_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	SetCol(handle,0);
	SetCol(handle,F_LVOL0,F_SCUST_AUTH,F_LVOL1,F_LVOL2,F_LVOL3,F_LVOL4,F_SCUST_AUTH2,F_SNAME,F_SPAGER,F_LVOL5,F_SNAME2,F_SPHONE,F_SCUSTTYPES,F_SSECTYPES
		,F_LVOL6,F_LVOL7,F_VSVARSTR0,0);
	while(1)
	{
		system_id=0;
		memset(system_name,0,sizeof(system_name));
		system_type=0;
		state=0;
		area=0;
		server_id=0;
		memset(ip,0,sizeof(ip));
		memset(mac_addr,0,sizeof(mac_addr));
		memset(synch_time,0,sizeof(synch_time));
		version=0;
		memset(manager,0,sizeof(manager));
		memset(tel,0,sizeof(tel));
		memset(addr,0,sizeof(addr));
		memset(comments,0,sizeof(comments));

		EXEC SQL  FETCH subsystem_cur INTO 
		:system_id:indicator,
		:system_name:indicator,
		:system_type:indicator,
		:state:indicator,
		:area:indicator,
		:server_id:indicator,
		:ip:indicator,
		:mac_addr:indicator,
		:synch_time:indicator,
		:version:indicator,
		:manager:indicator,
		:tel:indicator,
		:addr:indicator,
		:comments:indicator,
		:port:indicator,
		:enc_type:indicator,
		:funclist:indicator;
		ret=SQLCODE;
		if(ret)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL  CLOSE subsystem_cur;
			if(DB_NOTFOUND==ret)
			{
				if(row)
					break;
				else
					*pRetCode=E_DB_SUBSYSTEM_N;
			}
			else
				*pRetCode=E_DB_SUBSYSTEM_R;
			goto L_RETU;
		}

		out_pack->lvol0=system_id;
		Strncpy_t(out_pack->scust_auth,system_name,sizeof(out_pack->scust_auth));
		out_pack->lvol1=system_type;
		out_pack->lvol2=state;
		out_pack->lvol3=area;
		out_pack->lvol4=server_id;
		Strncpy_t(out_pack->scust_auth2,ip,sizeof(out_pack->scust_auth2));
		Strncpy_t(out_pack->sname,mac_addr,sizeof(out_pack->sname));
		Strncpy_t(out_pack->spager,synch_time,sizeof(out_pack->spager));
		out_pack->lvol5=version;
		Strncpy_t(out_pack->sname2,manager,sizeof(out_pack->sname2));
		Strncpy_t(out_pack->sphone,tel,sizeof(out_pack->sphone));
		Strncpy_t(out_pack->scusttypes,addr,sizeof(out_pack->scusttypes));
		Strncpy_t(out_pack->ssectypes,comments,sizeof(out_pack->ssectypes));
		out_pack->lvol6 = port;
		out_pack->lvol7 = enc_type;
		Strncpy_t(out_pack->vsvarstr0,funclist,sizeof out_pack->vsvarstr0);
		row++;
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(row%15==0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
#endif
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32 sysid=0;
	char     sysname[61]="";
	sqlint32 systype=0;
	char     runstatus[2]="";
	char     areacode[4]="";
	sqlint32 serverid=0;
	char     ip[21]="";
	char     macaddr[21]="";
	char     initkey[33]="";
	char     dynakey[33]="";
	char     synctime[27]="";
	sqlint32 version=0;
	char     manager[21]="";
	char     tel[21]="";
	char     addr[101]="";
	char     remark[101]="";
	sqlint32 port=0;
	char     funclist[256]="";
	sqlint32 enctype=0;
	sqlint16 indicator=0;
	char     h_sqlcmd[2048]="";
	EXEC SQL END DECLARE SECTION;

	int ret = 0;
	int row = 0;
	ST_CPACK aPack;
	ST_PACK *outPack = &(aPack.pack);
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,F_LVOL0,F_SCUST_AUTH,F_LVOL1,F_LVOL2,F_LVOL3,F_LVOL4,F_SCUST_AUTH2,F_SNAME,F_SPAGER,F_LVOL5,F_SNAME2,F_SPHONE,F_SCUSTTYPES,F_SSECTYPES
		,F_LVOL6,F_LVOL7,F_VSVARSTR0,0);
	
	CAccTrans *pAccTrans=CAccTrans::getInstance();
	pAccTrans->clear();
	pAccTrans->trans.transcode=MAKETRANSCODEQRY(TCM_SUBSYS);
	GetCpackDataString(rPack,pAccTrans->cpackdata);
	if(ret)
		return ret;
	ret=pAccTrans->addOperDtl(rPack->semp);
	if(ret)
		return ret;	
	des2src(sysname,rPack->scust_auth);
	systype=rPack->lvol1;
	des2src(areacode,rPack->sbranch_code0);
	serverid=rPack->lvol4;
	des2src(ip,rPack->scust_auth2);
	des2src(macaddr,rPack->sname);
	des2src(manager,rPack->sname2);
	des2src(tel,rPack->sphone);
	des2src(addr,rPack->scusttypes);

	stringstream sql;
	sql<<"SELECT ";
	sql<<"sysid,";
	sql<<"sysname,";
	sql<<"systype,";
	sql<<"runstatus,";
	sql<<"areacode,";
	sql<<"serverid,";
	sql<<"ip,";
	sql<<"macaddr,";
	sql<<"initkey,";
	sql<<"dynakey,";
	sql<<"synctime,";
	sql<<"version,";
	sql<<"manager,";
	sql<<"tel,";
	sql<<"addr,";
	sql<<"remark,";
	sql<<"port,";
	sql<<"funclist,";
	sql<<"enctype ";
	sql<<" FROM t_subsystem ";
	sql<<" WHERE status='1'  ";
	if(sysid)
	    sql<<" and sysid="<<sysid;
	if(strlen(sysname))
	    sql<<" and sysname like '"<<sysname<<"'";
	if(systype)
	    sql<<" and systype="<<systype;
	if(strlen(areacode))
	    sql<<" and areacode = '"<<areacode<<"'";
	if(serverid)
	    sql<<" and serverid="<<serverid;
	if(strlen(ip))
	    sql<<" and ip = '"<<ip<<"'";
	if(strlen(macaddr))
	    sql<<" and macaddr = '"<<macaddr<<"'";
	if(strlen(initkey))
	    sql<<" and initkey = '"<<initkey<<"'";
	if(strlen(dynakey))
	    sql<<" and dynakey = '"<<dynakey<<"'";
	if(strlen(synctime))
	    sql<<" and synctime = '"<<synctime<<"'";
	if(version)
	    sql<<" and version="<<version;
	if(strlen(manager))
	    sql<<" and manager = '"<<manager<<"'";
	if(strlen(tel))
	    sql<<" and tel = '"<<tel<<"'";
	if(strlen(addr))
	    sql<<" and addr = '"<<addr<<"'";
	if(strlen(remark))
	    sql<<" and remark = '"<<remark<<"'";
	if(port)
	    sql<<" and port="<<port;
	if(strlen(funclist))
	    sql<<" and funclist = '"<<funclist<<"'";
	if(enctype)
	    sql<<" and enctype="<<enctype;
	sql<<" order by sysid";
	strcpy(h_sqlcmd,sql.str().c_str());
	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
	    CHECK_DB_ERR;
	    return E_DB_PREPARE;
	}
	EXEC SQL DECLARE subsystem_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
	    CHECK_DB_ERR;
	    return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL  OPEN subsystem_cur;
	if(SQLCODE)
	{
	    CHECK_DB_ERR;
	    return E_DB_CURSOR_OPEN;
	}
	while(1)
	{
	    sysid=0;
	    sysname[0]=0;
	    systype=0;
	    runstatus[0]=0;
	    areacode[0]=0;
	    serverid=0;
	    ip[0]=0;
	    macaddr[0]=0;
	    initkey[0]=0;
	    dynakey[0]=0;
	    synctime[0]=0;
	    version=0;
	    manager[0]=0;
	    tel[0]=0;
	    addr[0]=0;
	    remark[0]=0;
	    port=0;
	    funclist[0]=0;
	    enctype=0;
	    EXEC SQL FETCH subsystem_cur INTO
	    :sysid:indicator,
	    :sysname:indicator,
	    :systype:indicator,
	    :runstatus:indicator,
	    :areacode:indicator,
	    :serverid:indicator,
	    :ip:indicator,
	    :macaddr:indicator,
	    :initkey:indicator,
	    :dynakey:indicator,
	    :synctime:indicator,
	    :version:indicator,
	    :manager:indicator,
	    :tel:indicator,
	    :addr:indicator,
	    :remark:indicator,
	    :port:indicator,
	    :funclist:indicator,
	    :enctype:indicator;
	    ret=SQLCODE;
	    if(ret)
	    {
	      CHECK_DB_ERR;
	      EXEC SQL CLOSE subsystem_cur;
	      if(DB_NOTFOUND==ret)
	      {
	        if(row)
	          break;
	        else
	          return E_DB_SUBSYSTEM_N;
	      }
	      else
	        return E_DB_SUBSYSTEM_R;
	    }
	    row++;		
	 	outPack->lvol0=sysid;
    	des2src(outPack->scust_auth,sysname);
		outPack->lvol1=systype;
	    outPack->lvol2=atoi(runstatus);
	    outPack->lvol3=atoi(areacode);
	    outPack->lvol4=serverid;
	    des2src(outPack->scust_auth2,ip);
	    des2src(outPack->sname,macaddr);
		des2src(outPack->spager,synctime);
		outPack->lvol5=version;
	    des2src(outPack->scert_addr,manager);
	    des2src(outPack->sphone,tel);
	    des2src(outPack->scusttypes,addr);
	    des2src(outPack->ssectypes,remark);
	    outPack->lvol6=port;
	    des2src(outPack->vsvarstr0,funclist);
	    outPack->lvol7=enctype;
	    PutRow(handle,outPack,pRetCode,szMsg);
	    if(row%15==0)
	      AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
}
