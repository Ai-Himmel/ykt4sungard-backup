#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#include <time.h>
#include<syslog.h>
#include<assert.h>
#include "errdef.h"
#include "pubdef.h"
#include "pubfunc.h"
#include "pubdb.h"
#include "dbfunc.h"

#define DB_CHK_ERR_INVALID

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
	char	customer_stuempno[30] = "";
	char	customer_stuempname[120] = "";
	char	customer_sex[1] = "";
	char	customer_cuttype[60] = "";
	char	customer_deptcode[10] = "";
	char	customer_deptname[120] = "";
	char	customer_scode[20] = "";
	sqlint32 customer_isinschool = 0;
	char	customer_nation[2] = "";
	char	customer_area[2] = "";
	char	customer_status[2] = "";
	char	customer_tel[60] = "";
	char	customer_address[150] = "";
	char	customer_updstatus[1] = "";
	char	customer_buildingno[10]	 = "";
	char	customer_floorno[10] = "";
	char	customer_roomno[10] = "";
	char	customer_medfeetype[5] = "";
	char	customer_feetype[5] = "";
	char	customer_indate[11] = "";
	char	customer_outdate[11] = "";
	char	customer_upddate[11] = "";
	char	customer_updtime[9] = "";


	char	photo_cuttype[60] = "";
	char 	photo_stuempno[30] = "";
	char	photo_stuempname[120] = "";
	char 	photo_scode[20] = "";
	sqlint32	photo_isinschool = 0;
	char	photo_sex[1] = "";
	char	photo_area[2] = "";
	char	photo_status[2] = "";
	char	photo_nation[2] = "";
	char	photo_medfeetype[5] = "";
	char	photo_feetype[5] = "";
	char	photo_syntime[15] = "";


	sqlint16	indicator=0;
	char	v_strsql[1024]="";
	char	dbname[50]="";
	char	user[50]="";
	char	passwd[50]="";	
EXEC SQL END DECLARE SECTION;

int Init()
{
	char *p=NULL;
	printf("start to initialize photo database........................\n");
	
	p=getenv("PHOTO_DBNAME");
	if(p==NULL)
	{
		writelog(LOG_ERR,"Get PHOTO_DBNAME error!");
		goto ERR;
	}
	strcpy(dbname,p);
	
	p=getenv("PHOTO_USER");
	if(p==NULL)
	{
		writelog(LOG_ERR,"Get PHOTO_USER error!");
		goto ERR;
	}
	strcpy(user,p);
	
	p=getenv("PHOTO_PWD");
	if(p==NULL)
	{
		writelog(LOG_ERR,"Get PHOTO_PWD error!");
		goto ERR;
	}	
	strcpy(passwd,p);
	
    EXEC SQL CONNECT TO :dbname USER :user USING :passwd;
	if(SQLCODE)
	{
		writelog(LOG_ERR,"Connect to database error!");
		goto ERR;
	}
	printf("end to initialize photo database.............\n");
	return 0;
ERR:
	db_rollback();
	EXEC SQL CONNECT RESET; 
	return 1;
}

int DoWork(){
	int ret=0;
	char sqltmp[500]="";
	
	ret=Init();
	if(ret)
	{
		writelog(LOG_ERR,"Initialize database error!");
		goto ERR;
	}

	printf("initialize successfully............\n");

	EXEC SQL DECLARE urp_customer_cur CURSOR WITH HOLD FOR 
		SELECT STUEMP_NO,STUEMP_NAME,SEX,CUT_TYPE,DEPT_NAME,IS_INSCHOOL,
		S_CODE,CAST(IN_DATE AS CHAR(10)),CAST(OUT_DATE AS CHAR(10)),NATION,
		AREA,STATUS,TEL,ADDRESS,BUILDING_NO,FLOOR_NO,ROOM_NO,MED_FEETYPE,
		FEE_TYPE,CAST(UPD_DATE AS CHAR(10)),CAST(UPD_TIME AS CHAR(8))
		 FROM YKT_CUR.URP_CUSTOMER_TMP 
		WHERE UPD_STATUS='0'
		ORDER BY STUEMP_NO
		FOR UPDATE;	

	if(SQLCODE){
		writelog(LOG_ERR,"Declare cursor error!");
		goto ERR;
	}

	EXEC SQL OPEN urp_customer_cur;
	if(SQLCODE){
		writelog(LOG_ERR,"open cursor error!");
		goto ERR;
	}

	while(1){

		memset(customer_stuempno,0,sizeof(customer_stuempno));
		memset(customer_stuempname,0,sizeof(customer_stuempname));
		memset(customer_sex,0,sizeof(customer_sex));
		memset(customer_cuttype,0,sizeof(customer_cuttype));
		memset(customer_deptname,0,sizeof(customer_deptname));
		customer_isinschool = 0;
		memset(customer_scode,0,sizeof(customer_scode));
		memset(customer_indate,0,sizeof(customer_indate));
		memset(customer_outdate,0,sizeof(customer_outdate));
		memset(customer_nation,0,sizeof(customer_nation));
		memset(customer_area,0,sizeof(customer_area));
		memset(customer_status,0,sizeof(customer_status));
		memset(customer_tel,0,sizeof(customer_tel));
		memset(customer_address,0,sizeof(customer_address));
		memset(customer_buildingno,0,sizeof(customer_buildingno));
		memset(customer_floorno,0,sizeof(customer_floorno));
		memset(customer_roomno,0,sizeof(customer_roomno));
		memset(customer_medfeetype,0,sizeof(customer_medfeetype));
		memset(customer_feetype,0,sizeof(customer_feetype));
		memset(customer_upddate,0,sizeof(customer_upddate));
		memset(customer_updtime,0,sizeof(customer_updtime));
	

		EXEC SQL FETCH urp_customer_cur	INTO 
			:customer_stuempno:indicator,
			:customer_stuempname:indicator,
			:customer_sex:indicator,
			:customer_cuttype:indicator,
			:customer_deptname:indicator,
			:customer_isinschool:indicator,
			:customer_scode:indicator,
			:customer_indate:indicator,
			:customer_outdate:indicator,
			:customer_nation:indicator,
			:customer_area:indicator,
			:customer_status:indicator,
			:customer_tel:indicator,
			:customer_address:indicator,
			:customer_buildingno:indicator,
			:customer_floorno:indicator,
			:customer_roomno:indicator,
			:customer_medfeetype:indicator,
			:customer_feetype:indicator,
			:customer_upddate:indicator,
			:customer_updtime:indicator;
					
		ret=SQLCODE;

		printf("return code is %d\n",ret);

		if(ret){
			EXEC SQL CLOSE urp_customer_cur;
			if(DB_NOTFOUND==ret){				
				writelog(LOG_ERR,"Record can't find!");
				goto ERR;
			}
			else{
				writelog(LOG_ERR,"Error Happened when Fetch Cursor!");
				goto ERR;
			}
		}
			
		strcpy(v_strsql,"select stuemp_no,stuemp_name, sex,cut_type,is_inschool,s_code,nation,area,status,med_feetype,fee_type  from ykt_cur.t_cif_photo_tmp ");
		sprintf(sqltmp," where stuemp_no ='%s'",customer_stuempno);
		strcat(v_strsql,sqltmp);
		
		EXEC SQL PREPARE query_stmt from :v_strsql;

		if(SQLCODE){
			writelog(LOG_ERR,"prepare query stmt error!");
			goto ERR;
		}

		EXEC SQL DECLARE v_cur CURSOR FOR query_stmt;

		if(SQLCODE){
			writelog(LOG_ERR,"dynamic declare cursor error!");
			goto ERR;
		}
		EXEC SQL OPEN v_cur;

		if(SQLCODE){
			writelog(LOG_ERR,"dynamic open cursor error!");
			goto ERR;
		}
		
		while(1){

			memset(photo_stuempno,0,sizeof(photo_stuempno));
			memset(photo_stuempname,0,sizeof(photo_stuempname));
			memset(photo_sex,0,sizeof(photo_sex));
			memset(photo_cuttype,0,sizeof(photo_cuttype));
			photo_isinschool = 0;
			memset(photo_scode,0,sizeof(photo_scode));
			memset(photo_nation,0,sizeof(photo_nation));
			memset(photo_area,0,sizeof(photo_area));
			memset(photo_status,0,sizeof(photo_status));
			memset(photo_medfeetype,0,sizeof(photo_medfeetype));
			memset(photo_feetype,0,sizeof(photo_feetype));

			memset(photo_syntime,0,sizeof(photo_syntime));



			EXEC SQL FETCH v_cur INTO 
				:photo_stuempno:indicator,
				:photo_stuempname:indicator,
				:photo_sex:indicator,
				:photo_cuttype:indicator,
				:photo_isinschool:indicator,
				:photo_scode:indicator,
				:photo_nation:indicator,
				:photo_area:indicator,
				:photo_status:indicator,
				:photo_medfeetype:indicator,
				:photo_feetype:indicator;

			ret=SQLCODE;

			printf("fetch v_cur return is:%d\n",ret);


			getsysdatetime(photo_syntime);
			printf("syntime is:%s\n",photo_syntime);
			
			if(ret)
			{

				EXEC SQL CLOSE v_cur;
				if(DB_NOTFOUND == ret)
				{
			/*		customer_status = atoi(customer_status);
					customer_area = atoi(customer_area);
					customer_nation = atoi(customer_nation);
			*/
			
					printf("begin to insert into photo_tmp...................\n");

					EXEC SQL INSERT INTO YKT_CUR.T_CIF_PHOTO_TMP(CUT_TYPE,STUEMP_NO,STUEMP_NAME,DEPT_NAME,S_CODE,
										STATUS,AREA,SEX,NATION,TEL,ADDRESS,IS_INSCHOOL,BUILDING_NO,FLOOR_NO,
										ROOM_NO,MED_FEETYPE,FEE_TYPE,IN_DATE,OUT_DATE,UPD_DATE,UPD_TIME,SYN_TIME)
							VALUES(:customer_cuttype,:customer_stuempno,:customer_stuempname,:customer_deptname,
								   	:customer_scode,:customer_status,:customer_area,:customer_sex,:customer_nation,
									:customer_tel,:customer_address,:customer_isinschool,:customer_buildingno,
									:customer_floorno,:customer_roomno,:customer_medfeetype,:customer_feetype,
									:customer_indate,:customer_outdate,:customer_upddate,:customer_updtime,
									:photo_syntime);

					if(SQLCODE)
					{
						writelog(LOG_ERR,"Insert Into Photo Database t_cif_photo_tmp Error!");	
						goto ERR;
					}

					printf("end to insert .................\n");
					break;	
				}
				else
				{
					writelog(LOG_ERR,"fetch cursor error");
					break;
//					goto ERR;			
				}
			}
			else
			{

				printf("find record in t_cif_customer_tmp\n");
				printf("customer_cuttype is:%s\n",customer_cuttype);
				printf("customer_stuempno is:%s\n",customer_stuempno);
				if(customer_cuttype != photo_cuttype || customer_stuempno != photo_stuempno ||
					customer_sex != photo_sex || customer_isinschool != photo_isinschool ||
					customer_scode != photo_scode || customer_nation != photo_nation ||
					customer_area != photo_area || customer_status != photo_status ||
					customer_medfeetype != photo_medfeetype || customer_feetype != photo_feetype )
				{	

					printf("start to update photo....\n");

					EXEC SQL UPDATE YKT_CUR.T_CIF_PHOTO_TMP
							SET CUT_TYPE = :customer_cuttype,
								STUEMP_NAME = :customer_stuempname,
								S_CODE = :customer_scode,
								NATION = :customer_nation,
								STATUS = :customer_status,
								IS_INSCHOOL = :customer_isinschool,
								AREA =	:customer_area,
								TEL =	:customer_tel,
								ADDRESS = :customer_address,
								BUILDING_NO = :customer_buildingno,
								FLOOR_NO = :customer_floorno,
								ROOM_NO	= :customer_roomno,	
								MED_FEETYPE	= :customer_medfeetype,			
								FEE_TYPE = :customer_feetype,
								IN_DATE = :customer_indate,
								OUT_DATE = :customer_outdate,
								UPD_DATE = :customer_upddate,
								UPD_TIME = :customer_updtime,
								SYN_TIME = :photo_syntime
							WHERE STUEMP_NO = :customer_stuempno;

					if(SQLCODE)
					{
						writelog(LOG_ERR,"update t_cif_photo error");
						goto ERR;
					}
					printf("end to update....\n");
					break;
				}
			}
		}

		printf("start to update customer_tmp......\n");

		EXEC SQL UPDATE YKT_CUR.URP_CUSTOMER_TMP
			SET UPD_STATUS = '1'
			where current of urp_customer_cur;
//			where stuemp_no=:customer_stuempno;
	
		if(SQLCODE){
			writelog(LOG_ERR,"update upd_status error");
			goto ERR;
		}

		printf("end to update customer tmp......\n");

		printf("start to commit ......\n");

		EXEC SQL COMMIT;

		if(SQLCODE)
		{
			writelog(LOG_ERR,"commit transaction error");
			goto ERR;
		}
		printf("operation successfully!");
	}
	
	return 0;
ERR:
	db_rollback();
	EXEC SQL CONNECT RESET;
	return 1;
}

void finally(){
	EXEC SQL CONNECT RESET;
	if(SQLCODE){
		writelog(LOG_ERR,"connect reset error");
	}
}

int main(){
	int ret=0;
	openlog("fdykt_hr",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL6);

	printf("start to call dowork.....\n");

	ret=DoWork();

	printf("\nreturn code is:%d",ret);
	if(0==ret){
		finally();
	}
	closelog();

	return 0;
}
