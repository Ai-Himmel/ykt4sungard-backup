/* --------------------------------------------
 * 程序名称: F800761.sqc
 * 创建日期: Sep 29 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: query t_pif_operator
 * --------------------------------------------
 * 修改日期: 
 * 修改人员: 
 * 修改描述: 
 * 版本信息: 
 * 备注信息: 
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

int F800761(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char    	oper_code[10+1]="";           	//操作员代码
	char    	employee_id[20+1]="";         	//员工号
	sqlint32	card_id=0;                    	//操作卡号
	char    	oper_name[150+1]="";           	//操作员名称
	char    	phone[40+1]="";               	//电话
	char    	mobile[40+1]="";              	//手机
	char    	addr[150+1]="";                	//地址
	char    	zip[6+1]="";                  	//邮编
	char    	email[60+1]="";               	//Email
	char    	status[1+1]="";               	//操作员状态
	char    	login_time[26+1]="";          	//登录时间
	char    	logout_time[26+1]="";         	//录出时间
	char    	login_ip[20+1]="";            	//登录IP地址
	char    	mac_addr[20+1]="";            	//网卡地址
	char    	login_flag[1+1]="";           	//登录标志
	char    	login_app[1+1]="";            	//登录模块
	char    	reg_date[8+1]="";             	//注册日期
	char    	reg_time[8+1]="";             	//注册时间
	char    	comments[150+1]="";           	//备注
	sqlint16	indicator=0;
	char    	h_sqlcmd[1024]="";
	EXEC SQL END DECLARE SECTION;

	int    ret=0;
	int    row=0;
	int    first=0;
	char sqltmp[500]="";
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

#ifdef DEBUG
	writelog(LOG_DEBUG,"oper_code      :scust_no       [%s]",rPack->scust_no);
	writelog(LOG_DEBUG,"employee_id    :scust_auth     [%s]",rPack->scust_auth);
	writelog(LOG_DEBUG,"card_id        :lvol0          [%d]",rPack->lvol0);
	writelog(LOG_DEBUG,"oper_name      :scust_limit    [%s]",rPack->scust_limit);
	writelog(LOG_DEBUG,"phone          :sbank_acc      [%s]",rPack->sbank_acc);
	writelog(LOG_DEBUG,"mobile         :sbank_acc2     [%s]",rPack->sbank_acc2);
	writelog(LOG_DEBUG,"email          :semail         [%s]",rPack->semail);
	writelog(LOG_DEBUG,"status         :smain_flag     [%s]",rPack->smain_flag);
	writelog(LOG_DEBUG,"login_time     :spager         [%s]",rPack->spager);
	writelog(LOG_DEBUG,"logout_time    :sphone         [%s]",rPack->sphone);
	writelog(LOG_DEBUG,"login_ip       :scust_auth2    [%s]",rPack->scust_auth2);
	writelog(LOG_DEBUG,"mac_addr       :sname          [%s]",rPack->sname);
	writelog(LOG_DEBUG,"login_flag     :smain_flag2    [%s]",rPack->smain_flag2);
	writelog(LOG_DEBUG,"login_app      :smarket_code   [%s]",rPack->smarket_code);
	writelog(LOG_DEBUG,"reg_date       :sbank_pwd      [%s]",rPack->sbank_pwd);
	writelog(LOG_DEBUG,"reg_time       :sbank_pwd2     [%s]",rPack->sbank_pwd2);
#endif

	ResetNormalCPack(&aPack,0,1);
	Strncpy_t(oper_code,rPack->scust_no,sizeof(oper_code));
	Strncpy_t(employee_id,rPack->scust_auth,sizeof(employee_id));
	card_id=rPack->lvol0;
	Strncpy_t(oper_name,rPack->scust_limit,sizeof(oper_name));
	Strncpy_t(phone,rPack->sbank_acc,sizeof(phone));
	Strncpy_t(mobile,rPack->sbank_acc2,sizeof(mobile));
	Strncpy_t(email,rPack->semail,sizeof(email));
	Strncpy_t(status,rPack->smain_flag,sizeof(status));
	Strncpy_t(login_time,rPack->spager,sizeof(login_time));
	Strncpy_t(logout_time,rPack->sphone,sizeof(logout_time));
	Strncpy_t(login_ip,rPack->scust_auth2,sizeof(login_ip));
	Strncpy_t(mac_addr,rPack->sname,sizeof(mac_addr));
	Strncpy_t(login_flag,rPack->smain_flag2,sizeof(login_flag));
	Strncpy_t(login_app,rPack->smarket_code,sizeof(login_app));
	Strncpy_t(reg_date,rPack->sbank_pwd,sizeof(reg_date));
	Strncpy_t(reg_time,rPack->sbank_pwd2,sizeof(reg_time));

	strcpy(h_sqlcmd,"select  oper_code, employee_id, card_id, oper_name, phone, mobile, addr, zip, email, status, login_time, logout_time, login_ip, mac_addr, login_flag, login_app, reg_date, reg_time, comments  from ykt_cur.t_pif_operator ");
	if(strlen(oper_code))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  oper_code ='%s' ",oper_code);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and oper_code ='%s' ",oper_code);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(employee_id))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  employee_id ='%s' ",employee_id);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and employee_id ='%s' ",employee_id);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(card_id!=0)
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  card_id =%d ",card_id);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and card_id =%d ",card_id);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(oper_name))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  oper_name ='%s' ",oper_name);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and oper_name ='%s' ",oper_name);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(phone))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  phone ='%s' ",phone);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and phone ='%s' ",phone);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(mobile))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  mobile ='%s' ",mobile);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and mobile ='%s' ",mobile);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(email))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  email ='%s' ",email);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and email ='%s' ",email);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(status))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  status ='%s' ",status);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and status ='%s' ",status);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(login_time))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  login_time ='%s' ",login_time);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and login_time ='%s' ",login_time);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(logout_time))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  logout_time ='%s' ",logout_time);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and logout_time ='%s' ",logout_time);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(login_ip))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  login_ip ='%s' ",login_ip);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and login_ip ='%s' ",login_ip);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(mac_addr))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  mac_addr ='%s' ",mac_addr);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and mac_addr ='%s' ",mac_addr);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(login_flag))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  login_flag ='%s' ",login_flag);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and login_flag ='%s' ",login_flag);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(login_app))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  login_app ='%s' ",login_app);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and login_app ='%s' ",login_app);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(reg_date))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  reg_date ='%s' ",reg_date);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and reg_date ='%s' ",reg_date);
			strcat(h_sqlcmd,sqltmp);
		}
	}
	if(strlen(reg_time))
	{
		if(!first)
		{
			first=1;
			sprintf(sqltmp," where  reg_time ='%s' ",reg_time);
			strcat(h_sqlcmd,sqltmp);
		}
		else
		{
			sprintf(sqltmp," and reg_time ='%s' ",reg_time);
			strcat(h_sqlcmd,sqltmp);
		}
	}

	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
		*pRetCode=E_DB_OPERATOR_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  DECLARE operator_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		*pRetCode=E_DB_OPERATOR_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN operator_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_OPERATOR_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	SetCol(handle,0);
	SetCol(handle,F_SCUST_NO,F_SCUST_AUTH,F_LVOL0,F_SCUST_LIMIT,F_SBANK_ACC,F_SBANK_ACC2,F_SADDR,F_SBANK_CODE,F_SEMAIL,F_SMAIN_FLAG,F_SPAGER,F_SPHONE,F_SCUST_AUTH2,F_SNAME,F_SMAIN_FLAG2,F_SMARKET_CODE,F_SBANK_PWD,F_SBANK_PWD2,F_SCUSTTYPES,0);
	while(1)
	{
		memset(oper_code,0,sizeof(oper_code));
		memset(employee_id,0,sizeof(employee_id));
		card_id=0;
		memset(oper_name,0,sizeof(oper_name));
		memset(phone,0,sizeof(phone));
		memset(mobile,0,sizeof(mobile));
		memset(addr,0,sizeof(addr));
		memset(zip,0,sizeof(zip));
		memset(email,0,sizeof(email));
		memset(status,0,sizeof(status));
		memset(login_time,0,sizeof(login_time));
		memset(logout_time,0,sizeof(logout_time));
		memset(login_ip,0,sizeof(login_ip));
		memset(mac_addr,0,sizeof(mac_addr));
		memset(login_flag,0,sizeof(login_flag));
		memset(login_app,0,sizeof(login_app));
		memset(reg_date,0,sizeof(reg_date));
		memset(reg_time,0,sizeof(reg_time));
		memset(comments,0,sizeof(comments));

		EXEC SQL  FETCH operator_cur INTO 
		:oper_code:indicator,
		:employee_id:indicator,
		:card_id:indicator,
		:oper_name:indicator,
		:phone:indicator,
		:mobile:indicator,
		:addr:indicator,
		:zip:indicator,
		:email:indicator,
		:status:indicator,
		:login_time:indicator,
		:logout_time:indicator,
		:login_ip:indicator,
		:mac_addr:indicator,
		:login_flag:indicator,
		:login_app:indicator,
		:reg_date:indicator,
		:reg_time:indicator,
		:comments:indicator;
		ret=SQLCODE;
		if(ret)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL  CLOSE operator_cur;
			if(DB_NOTFOUND==ret)
			{
				if(row)
					break;
				else
					*pRetCode=E_DB_OPERATOR_N;
			}
			else
				*pRetCode=E_DB_OPERATOR_R;
			goto L_RETU;
		}

		Strncpy_t(out_pack->scust_no,oper_code,sizeof(out_pack->scust_no));
		Strncpy_t(out_pack->scust_auth,employee_id,sizeof(out_pack->scust_auth));
		out_pack->lvol0=card_id;
		Strncpy_t(out_pack->scust_limit,oper_name,sizeof(out_pack->scust_limit));
		Strncpy_t(out_pack->sbank_acc,phone,sizeof(out_pack->sbank_acc));
		Strncpy_t(out_pack->sbank_acc2,mobile,sizeof(out_pack->sbank_acc2));
		Strncpy_t(out_pack->saddr,addr,sizeof(out_pack->saddr));
		Strncpy_t(out_pack->sbank_code,zip,sizeof(out_pack->sbank_code));
		Strncpy_t(out_pack->semail,email,sizeof(out_pack->semail));
		Strncpy_t(out_pack->smain_flag,status,sizeof(out_pack->smain_flag));
		Strncpy_t(out_pack->spager,login_time,sizeof(out_pack->spager));
		Strncpy_t(out_pack->sphone,logout_time,sizeof(out_pack->sphone));
		Strncpy_t(out_pack->scust_auth2,login_ip,sizeof(out_pack->scust_auth2));
		Strncpy_t(out_pack->sname,mac_addr,sizeof(out_pack->sname));
		Strncpy_t(out_pack->smain_flag2,login_flag,sizeof(out_pack->smain_flag2));
		Strncpy_t(out_pack->smarket_code,login_app,sizeof(out_pack->smarket_code));
		Strncpy_t(out_pack->sbank_pwd,reg_date,sizeof(out_pack->sbank_pwd));
		Strncpy_t(out_pack->sbank_pwd2,reg_time,sizeof(out_pack->sbank_pwd2));
		Strncpy_t(out_pack->scusttypes,comments,sizeof(out_pack->scusttypes));
		row++;
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(row%15==0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
}
