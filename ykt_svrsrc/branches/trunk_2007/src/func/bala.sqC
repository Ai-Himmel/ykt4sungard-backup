/* ----------------------------------------------------------
 * 程序名称：bala.sqc
 * 创建日期：2004-10-10 14:58
 * 程序作者：韩海东
 * 版本信息：1.0.0.0
 * 程序功能：结算过程的主程序
 * ----------------------------------------------------------
 * 程序名称：bala.sqc
 * 创建日期：2005-10-27 14:58
 * 程序作者：韩海东
 * 版本信息：1.0.0.1
 * 程序功能：增加各个业务处理失败后的处理
 				   一些业务处理失败，照常运行
 * ----------------------------------------------------------
 * 程序名称：bala.sqc
 * 创建日期：2009-05-15 17:47
 * 程序作者：李晓阳
 * 版本信息：1.0.0.2
 * 程序功能： 根据上海外国语大学的要求，
  			  重新生成可扩展的用户运行情况的财务流向报表。
 * ----------------------------------------------------------

 * ----------------------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "syslog.h"
ESQL #include "errdef.h"
ESQL #include "balance.h"
ESQL #include "mypub.h"
ESQL #include "pubfunc.h"
ESQL #include "profile.h"
ESQL #include "dbfunc.h"
ESQL #include "dbfunc_foo.h"

#define DEBUG

int CreateUserStatistics();
long SQLConnectToServer(char *db_name,char *db_user,char *db_password);
void SQLExit();
void PrintBalaMessage(char *buffer);


 /////////////////////////////////////////////////////////////////////////

EXEC SQL INCLUDE SQLCA;

static int do_update_balance_step(int *step)
{
	int ret;
	char buffer[20] = "";
	(*step)++;
	sprintf(buffer,"%d",*step);
	ret=SetParameter(GLOBE_FLAG_BALANCE,buffer);
	if(ret)
	{
		writelog(LOG_ERR,"Write syspara err [%d]",ret);
		return E_CHANGE_FLAG;
	}
	ret=db_commit();
	if(ret)
	{
		writelog(LOG_ERR,"db_commit ret[%d]",ret);
		db_rollback();
		return ret;
	}
	//printf("balance in step [%d]\n",*step);
	return 0;
}
  


/****************************************************
  作    者	: XiaoYang.Lee
  创建日期	: 2009-05-15 17:47
  描    述 	: 根据上海外国语大学的要求，
  			  重新生成可扩展的用户运行情况的财务流向报表。
*****************************************************/
int CreateUserStatistics()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char in_date[9]="";
	char out_oper_code[10]="";
	sqlint32 out_seri_type = 0;
	char out_subno[20]="";
	sqlint32 out_d_cnt=0;
	double out_d_amt=0;
	sqlint32 out_c_cnt=0;
	double out_c_amt=0;
	sqlint16 indr=0;
	char query_cmd[2048]="";
	EXEC SQL END DECLARE SECTION;
	int ret=0;
	int count=0;
	sprintf(query_cmd,"select h.RECORD_OPER,h.subno,h.SERI_TYPE,sum(crebit_cnt),sum(crebit_fee),sum(debit_cnt),sum(debit_fee) from ( \
						select h.subno,h.RECORD_OPER,h.SERI_TYPE,count(*) crebit_cnt,sum(h.op_fee) crebit_fee,0 debit_cnt,0.0 debit_fee \
                        from ykt_cur.t_tif_tradelog h where h.OUTORIN=1 group by h.subno,h.RECORD_OPER,h.SERI_TYPE \
						union all select h.subno,h.RECORD_OPER,h.SERI_TYPE,0 crebit_cnt,0 crebit_fee,count(*) debit_cnt,sum(h.op_fee) debit_fee \
						from ykt_cur.t_tif_tradelog h where  h.OUTORIN=2 group by h.subno,h.RECORD_OPER,h.SERI_TYPE) h \
						group  by h.subno,h.RECORD_OPER,h.SERI_TYPE order by h.record_oper,h.subno,h.seri_type;");
						
	EXEC SQL PREPARE stmt FROM :query_cmd;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		writelog(LOG_ERR," Read table t_tif_tradelog is Error By PREPARE");
		return -1;
	}
	
	EXEC SQL DECLARE TRADDS CURSOR FOR stmt;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		writelog(LOG_ERR," Read table t_tif_tradelog is Error By DECLARE TRADDS CURSOR");
		return -1;
	}

	EXEC SQL OPEN TRADDS;
	if(SQLCODE)
	{
		ret=SQLCODE;
		CHECK_DB_ERR;
		return -1;
	}

<<<<<<< .mine
	if(GetLogicDate(in_date))
		getsysdate(in_date);
	
=======
	GetLogicDate(in_date);
>>>>>>> .r1919
	while(1)
	{
		memset(out_oper_code,0,sizeof(out_oper_code));
		memset(out_subno,0,sizeof(out_subno));
		out_seri_type=0;
		out_d_cnt=0;
		out_d_amt=0;
		out_c_cnt=0;
		out_c_amt=0;
		
		EXEC SQL FETCH TRADDS INTO
			:out_oper_code:indr,
			:out_subno:indr,
			:out_seri_type:indr,
			:out_c_cnt:indr,
			:out_c_amt:indr,
			:out_d_cnt:indr,
			:out_d_amt:indr;
		
		if(SQLCODE)
		{
			
			ret=SQLCODE;
			EXEC SQL CLOSE TRADDS;
			if(ret==DB_NOTFOUND)
			{
				if(count)
		        	break;
				else
					return 0;
			}
			return -1;
		}
		trim(out_oper_code);
		trim(out_subno);
		EXEC SQL INSERT INTO YKT_CUR.T_TIF_REPORT_OPER_STATISTICS(BALANCE_DATE,OPER_CODE,SERIAL_TYPE,SUBNO,DEBIT_AMT,DEBIT_COUNT,CREDIT_AMT,CREDIT_COUNT)
			VALUES(:in_date,:out_oper_code,:out_seri_type,:out_subno,:out_d_amt,:out_d_cnt,:out_c_amt,:out_c_cnt);
		
		if(SQLCODE)
		{
			ret=SQLCODE;
			EXEC SQL CLOSE TRADDS;
			writelog(LOG_ERR,"Insert into table T_TIF_REPORT_OPER_STATISTICS error,errcode=[%d]",ret);
			return ret;
		}	
		db_commit();
		count++;
	}
	
	return db_commit();
	
}

 
int  main()
{

	int ret=0;
	int balance_step = 0;
	//char buffer[50+1]="";

	openlog("bala",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL4);

	TIniFile tf;
	char db_name[32]="";
	char db_user[32]="";
	char db_password[32]="";
	char db_authtype[10] = "";
	char time[10]="";
	char date[12]="";
	char inifile[256]="";
	char *p=getenv("BIN_PATH");
	if(p==NULL)
	{
	   	writelog(LOG_ERR,"Cann't get env HOME PATH\n");
	   	return -1;
	}
	sprintf(inifile,"%s/bala.ini",p);
	if (!tf.Open(inifile))
	{
	   	writelog(LOG_ERR,"Cann't open ini file,file=[%s]\n",inifile);
	   	return -1;
	}
	if(-1 == tf.ReadString("DB","AUTH_TYPE","env",db_authtype,sizeof db_authtype))
	{
		writelog(LOG_ERR,"cann't read from ini file!");
	}
	if(strcmp(db_authtype,"env")==0)
	{
		if((p = getenv("YKT_DBNAME")) !=NULL)
		{
			strncpy(db_name,p,sizeof(db_name) -1 );
		}
		if((p = getenv("YKT_USER")) !=NULL)
		{
			strncpy(db_user,p,sizeof(db_user) - 1);
		}
		if((p = getenv("YKT_PWD")) != NULL)
		{
			strncpy(db_password,p,sizeof(db_password) - 1);
		}
		
	}
	else if(strcmp(db_authtype,"config") == 0)
	{
		if(-1==tf.ReadString("DB", "DB_NAME", "yktbase", db_name,sizeof(db_name)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
		if(-1==tf.ReadString("DB", "DB_USER", "yktinst1", db_user,sizeof(db_user)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
		if(-1==tf.ReadString("DB", "DB_PASSWORD", "fdksykt", db_password,sizeof(db_password)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
	}
	else
	{
		writelog(LOG_ERR,"unknown auth type!");
	}
	tf.Close();

	getdbtime(time);
	getdbdate(date);
	int cnt=0;
	while(1)
	{
		ret=SQLConnectToServer(db_name,db_user,db_password);
		if (ret)
	   	{
	   		writelog(LOG_ERR,"Cann't connect to database,errcode=[%d],db_name=[%s],db_user=[%s]",ret,db_name,db_user);;
			sleep(10);
			if(cnt<=3)
			{
				cnt++;
				continue;
			}
			else
			{
		   		printf("%s:",date);
		   		printf("%s bala:",time);
				printf("连接数据库失败!\n");
		      		return(-100);
			}
	   	}
		else
		{
			printf("%s:",date);
			printf("%s bala:",time);
			printf("连接数据库成功!\n");
			break;
		}

	}
     	//停止入帐，改数据库全局参数表中的入帐标志
	ret=StopInBalance(&balance_step);
	if(ret)
	{
		PrintBalaMessage("停止入帐业务失败!");
	   	writelog(LOG_ERR,"Update balance flag failed!");
		return ret;
	}
	else
	{
		PrintBalaMessage("停止入帐业务成功!");
	}
	if(balance_step == 1)
	{
		//生成 部门账户交易情况表--领导查询需要
		ret=Db_t_tif_report_depttrade_generate();
		if(ret)
		{
			PrintBalaMessage("生成部门交易情况报表失败!");
			writelog(LOG_ERR,"Generate dept trade report table failed!");
		}
		else
		{
			PrintBalaMessage("生成部门交易情况表成功!");
		}
		//按照操作员组进行现金的划拨工作,统计组的当天金额
		ret=PayInCashForOperateGroup();
		if(ret)
		{
			PrintBalaMessage("生成操作员组划拨表失败!");
			writelog(LOG_ERR,"Generate operate group report table failed!");
		}
		else
		{
			PrintBalaMessage("生成操作员组划拨表成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}

	if(balance_step == 2)
	{
		//批量冻结账户
		ret=DoFrozenCustomer();
		if(ret)
		{
			PrintBalaMessage("批量冻结异常客户失败!");
			//return ret;
		}
		else
		{
			PrintBalaMessage("批量冻结异常客户成功!");
		}

		//检查个人账户
		ret=CheckPersonAccount();
		if(!(ret==E_TOTAL_ACC||ret==0))
		{
			PrintBalaMessage("生成个人对帐不符报表数据失败!");
			writelog(LOG_ERR,"Check individual account failed!");
		}
		else
		{
			PrintBalaMessage("生成个人对帐不符报表数据成功!");
		}
		//检查总账是否平衡
		ret=CheckTotalAccount();
		if(!(ret==E_TOTAL_ACC||ret==0))
		{
			writelog(LOG_ERR,"Check total account failed!errcode=[%d]",ret);
		}
		/*
		ret=CardDBNotBalance();
		if(!(ret==E_DB_VIEW_DBCARD_N||ret==0))
		{
			PrintBalaMessage("生成卡库不平报表数据失败!");
			writelog(LOG_ERR,"Create table that card and datebase is not equal failed!");
		}
		else
		{
			PrintBalaMessage("生成卡库不平报表数据成功!");
		}
		*/
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}

<<<<<<< .mine
	//生成操作员情况表
	ret=CreateUserStatistics();
	if(ret)
	{
		PrintBalaMessage("生成操作员情况报表数据失败!");	
		writelog(LOG_ERR,"Create OPER Runing STATISTICS table failed!");
	}
	else
	{
		PrintBalaMessage("生成操作员情况报表数据成功!");	
	}

	//生成运行情况报表
	ret=CreateActiveReport();
	if(ret)
=======
	if(balance_step == 3)
>>>>>>> .r1919
	{
		//备份交易明细表和流水表
		ret=BackupData();
		if(ret)
		{
			PrintBalaMessage("备份交易明细/交易流水失败!");
			writelog(LOG_ERR,"Backup tradelog table and tradeserial table failed!");
			return ret;
		}
		else
		{
			PrintBalaMessage("备份交易明细/交易流水成功!");
		}
		//备份帐户表，更新前次帐户余额
		ret=BackupAccount();
		if(ret)
		{
			PrintBalaMessage("备份账户表失败!");
			writelog(LOG_ERR,"Backup account table failed!");
			//return ret;
		}
		else
		{
			PrintBalaMessage("备份账户表成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}

	if(balance_step == 4)
	{
		//生成运行情况报表
		ret=CreateActiveReport();
		if(ret)
		{
			PrintBalaMessage("生成运行情况报表数据失败!");
			writelog(LOG_ERR,"Create active report table failed!");
		}
		else
		{
			PrintBalaMessage("生成运行情况报表数据成功!");
		}
		//生成操作情况报表
		ret=CreateOperReport();
		if(ret)
		{
			PrintBalaMessage("生成操作情况报表数据失败!");
			writelog(LOG_ERR,"Create operate report table failed!");
		}
		else
		{
			PrintBalaMessage("生成操作情况报表数据成功!");
		}
		//生成科目交易情况报表
		ret=CreateSubjectTradeReport();
		if(ret)
		{
			PrintBalaMessage("生成科目交易情况报表失败!");
			writelog(LOG_ERR,"Create subject trade report table failed!");
		}
		else
		{
			PrintBalaMessage("生成科目交易情况报表成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
	if(balance_step == 5)
	{
		//生成商户报表
		ret=CreateShopReport();
		if(ret)
		{
			PrintBalaMessage("生成普通商户报表数据失败!");
			writelog(LOG_ERR,"Create shop balance table failed!");
		}
		else
		{
			PrintBalaMessage("生成普通商户报表数据成功!");
		}
		//生成商户报表
		ret=CreateShopReport_01();
		if(ret)
		{
			PrintBalaMessage("生成普通商户报表01数据失败!");
			writelog(LOG_ERR,"Create shop balance table failed!");
		}
		else
		{
			PrintBalaMessage("生成普通商户报表01数据成功!");
		}

		//生成分设备、餐次报表
		ret=CreateShopDevMealReport();
		if(ret)
		{
			PrintBalaMessage("生成商户分餐次报表数据失败!");
			writelog(LOG_ERR,"Create shop device meal table failed!");
		}
		else
		{
			PrintBalaMessage("生成商户分餐次报表数据成功!");
		}
<<<<<<< .mine
=======

		//生成资产负债报表
		ret=CreateRichDebtReport();
		if(ret)
		{
			PrintBalaMessage("生成资产负债报表数据失败!");
			writelog(LOG_ERR,"Create balance sheet failed!");
		}
		else
		{
			PrintBalaMessage("生成资产负债报表数据成功!");
		}
			//生成操作员情况表
		/*
		ret=CreateUserStatistics();
		if(ret)
		{
			PrintBalaMessage("生成操作员情况报表数据失败!");	
			writelog(LOG_ERR,"Create OPER Runing STATISTICS table failed!");
		}
		else
		{
			PrintBalaMessage("生成操作员情况报表数据成功!");	
		}
		*/
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;

	}
	if(balance_step == 6)
	{
		ret=DelTradeDate();
		if(ret)
		{
			PrintBalaMessage("清理当日交易明细/交易流水失败!");
			writelog(LOG_ERR,"Delete tradelog and tradeserial table today failed!");
			return ret;
		}
		else
		{
			PrintBalaMessage("清理当日交易明细/交易流水成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
>>>>>>> .r1919
	if(balance_step == 7)
	{
		ret = CreateDevSerinumInfo();
		if(ret)
		{
			PrintBalaMessage("生成设备发生流水报表失败!");
			writelog(LOG_ERR,"CreateDevSerinumInfo failed!");
		}
		else
		{
			PrintBalaMessage("生成设备发生流水报表成功!");
			writelog(LOG_INFO,"生成设备发生流水报表成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}

	if(balance_step == 8)
	{
		ret=ChangeConfigPara();
		if(ret)
		{
			PrintBalaMessage("更新全局参数失败!");
			writelog(LOG_ERR,"Change parameter of system next day failed!");
			return ret;
		}
		else
		{
			PrintBalaMessage("更新全局参数成功!");
		}
		ret=Startup();
		if(ret)
		{
			PrintBalaMessage("启动服务失败!");
			writelog(LOG_ERR,"System start service faild!");
			return ret;
		}
		else
		{
			PrintBalaMessage("结算完毕，启动服务成功!");
	  		writelog(LOG_ERR,"Automatic balance succeed![%d]",ret);
		}
	}
	closelog();
	SQLExit();
	return 0;
}

long SQLConnectToServer(char *db_name,char *db_user,char *db_password)
{
   EXEC SQL BEGIN DECLARE SECTION;
	char szConnectToDatabase[32] = "";
	char szConnectToLogin[32] = "";
	char szConnectToPassword[32] = "";
   EXEC SQL END DECLARE SECTION;

	strcpy(szConnectToDatabase,db_name);
   	strcpy(szConnectToLogin,db_user);
	strcpy(szConnectToPassword,db_password);


   // attempt connection to db2-Server
#ifdef ESQL_DB2	
	EXEC SQL CONNECT TO :szConnectToDatabase USER :szConnectToLogin USING :szConnectToPassword;
#else
	EXEC SQL CONNECT :szConnectToLogin IDENTIFIED BY :szConnectToPassword USING :szConnectToDatabase;
#endif

	if (SQLCODE != 0)
	{
		return(SQLCODE);
	}
	return 0;
}


void SQLExit()
{
#ifdef ESQL_DB2
	EXEC SQL CONNECT RESET;
#else
	EXEC SQL COMMIT WORK RELEASE;
#endif
}

void PrintBalaMessage(char *buffer)
{
	char time1[10]="";
	char date1[10]="";
	getdbtime(time1);
	getdbdate(date1);

	printf("%s:",date1);
	printf("%s bala:",time1);
	printf("%s",buffer);
	printf("\n");
}
