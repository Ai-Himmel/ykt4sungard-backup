/* --------------------------------------------
 * 程序名称: F848273.sqc
 * 创建日期: 2008－3－11
 * 程序作者: 汤成
 * 版本信息: 1.0.0.0
 * 程序功能: 
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"
ESQL #include "dbfunc_foo.h"

static int do_check_date_time(char *dt_str)
{
	int ret;
	char check_time[15] = "";
	// 判断日期，时间合法性
	memcpy(check_time,dt_str,8);
	ret = IsInvalidDateTime(check_time,"YYYYMMDD");
	if(ret)
	{
		return ret;
	}
	memset(check_time,0,sizeof check_time);
	memcpy(check_time,dt_str+8,6);
	ret = IsInvalidDateTime(check_time,"HHMMSS");
	if(ret)
	{
		return ret;
	}
	return 0;
}

static int Add848273(ST_PACK *in_pack,char *szMsg)
{
	int ret;
	T_t_tif_push_task push_task;
	T_t_pif_device device;

	memset(&push_task,0,sizeof push_task);
	memset(&device,0,sizeof device);

	ret = DB_t_pif_device_read_by_device_id(in_pack->lvol0,&device);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DEVICE_N;
		else
			return E_DB_DEVICE_R;
	}

	if(device.state_id == DEVISTAT_LOGOUT)
	{
		return E_DEVICE_NOT_EXIST;
	}

	ret = ora_gen_sequence(KEYTYPE_TIF_PUSH_TASK,&(push_task.task_id));
	if(ret)
	{
		return ret;
	}
	push_task.sys_id = device.subsystem_id;
	push_task.device_id = device.device_id;
	push_task.task_seq = in_pack->lvol5;
	push_task.function_id = in_pack->lvol2;

	getsysdatetime(push_task.add_time);
	// 检查时间
	in_pack->sholder_ac_no[12] = '0';
	in_pack->sholder_ac_no[13] = '0';
	ret = do_check_date_time(in_pack->sholder_ac_no);	
	if(ret)
	{
		return ret;
	}
	des2src(push_task.begin_time,in_pack->sholder_ac_no);

	if(strncmp(push_task.add_time,push_task.begin_time,12)>=0)
	{
		writelog(LOG_ERR,"add_time[%s],begin_time[%s]",push_task.add_time,push_task.begin_time);
		return E_INPUT_DATA_INVAILD;
	}

	// 检查终止时间
	if(strlen(in_pack->sholder_ac_no2) > 0)
	{
		in_pack->sholder_ac_no2[12] = '0';
		in_pack->sholder_ac_no2[13] = '0';
		ret = do_check_date_time(in_pack->sholder_ac_no2);	
		if(ret)
		{
			return ret;
		}
		des2src(push_task.invalid_time,in_pack->sholder_ac_no2);
	}
	else
	{
		strcpy(push_task.invalid_time,"20501231235959");
		push_task.max_exec = 5;
	}
	// 下次执行时间间隔
	push_task.next_interval = 1;

	push_task.status = PUSHTASK_NEW;
	push_task.send_type = 1;
	// 任务内容
	AddXmlItemInt(push_task.content_str,XML_KEY_FTFLAG,in_pack->lvol2);

	// 增加计划任务
	ret = DB_t_tif_push_task_add(&push_task);
	if(ret)
	{
		if(DB_REPEAT == ret)
			return E_DB_PUSHTASK_E;
		else
			return E_DB_PUSHTASK_I;
	}
	return 0;
}

static int Read848273(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	ho_task_id = 0;
	sqlint32 ho_device_id = 0;
	char	ho_device_name[101] = "";
	char	ho_begin_time[13] = "";
	char	ho_invalid_time[13] = "";
	sqlint32 ho_function = 0;
	char	ho_exec_time[25] = "";
	sqlint32	ho_status = 0;
	sqlint32	ho_exec = 0;
	char	ho_code[21] = "";
	char	ho_msg[1001] = "";
	char    	h_sqlcmd[1024]="";
	sqlint16	indr = 0;
	EXEC SQL END DECLARE SECTION;

	int    ret=0;
	int    row=0;
	char sqltmp[500]="";
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

	ResetNormalCPack(&aPack,0,1);

	sprintf(h_sqlcmd,"select p.task_id,d.device_id,d.device_name,p.begin_time,p.invalid_time,\
			p.function_id,p.exec_time,p.status,p.exec_cnt,p.ret_code,p.ret_msg \
			from ykt_cur.t_tif_push_task p,ykt_cur.t_pif_device d where \
			p.device_id=d.device_id ");

	if(strlen(in_pack->semail2) > 0)
	{
		sprintf(sqltmp," and d.device_name like '%%%s%%' ",in_pack->semail2);
		strcat(h_sqlcmd,sqltmp);
	}

	if(in_pack->lvol2 > 0)
	{
		sprintf(sqltmp," and p.function_id = %d ",in_pack->lvol2);
		strcat(h_sqlcmd,sqltmp);
	}

	if(strlen(in_pack->sholder_ac_no) > 0)
	{
		sprintf(sqltmp," and p.begin_time >= '%s' ",in_pack->sholder_ac_no);
		strcat(h_sqlcmd,sqltmp);
	}

	if(in_pack->lvol3 > 0)
	{
		sprintf(sqltmp," and p.status=%d ",in_pack->lvol3);
		strcat(h_sqlcmd,sqltmp);
	}

	strcat(h_sqlcmd," order by p.begin_time ");

	EXEC SQL PREPARE stmt FROM :h_sqlcmd;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}

	EXEC SQL DECLARE task_cur CURSOR FOR stmt;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL  OPEN task_cur;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_OPEN;
	}
	SetCol(handle,0);
	SetCol(handle,F_LVOL0,F_LVOL2,F_LVOL3,F_LVOL4,F_SEMAIL2,F_LSERIAL0,F_SHOLDER_AC_NO,F_SHOLDER_AC_NO2,
		   F_SSTATION0,F_SCUST_AUTH2,F_VSVARSTR0,0);

	while(1)
	{
		ho_task_id = 0;
		ho_device_id = 0;
		memset(ho_device_name,0,sizeof ho_device_name);
		memset(ho_begin_time,0,sizeof ho_begin_time);
		memset(ho_invalid_time,0,sizeof ho_invalid_time);
		ho_function = 0;
		memset(ho_exec_time,0,sizeof ho_exec_time);
		ho_status = 0;
		ho_exec = 0;
		memset(ho_code,0,sizeof ho_code);
		memset(ho_msg,0,sizeof ho_msg);

		EXEC SQL  FETCH task_cur INTO
			:ho_task_id:indr,
			:ho_device_id:indr,
			:ho_device_name:indr,
			:ho_begin_time:indr,
			:ho_invalid_time:indr,
			:ho_function:indr,
			:ho_exec_time:indr,
			:ho_status:indr,
			:ho_exec:indr,
			:ho_code:indr,
			:ho_msg:indr;

		ret=SQLCODE;
		if(ret)
		{
			CHECK_DB_ERR;
			EXEC SQL  CLOSE task_cur;
			if(DB_NOTFOUND==ret)
			{
				if(row)
					break;
				else
					return E_DB_PUSHTASK_N;
			}
			else
				return E_DB_PUSHTASK_R;
		}
		out_pack->lvol0 = ho_device_id;
		des2src(out_pack->semail2,ho_device_name);
		out_pack->lserial0 = ho_task_id;
		des2src(out_pack->sholder_ac_no,ho_begin_time);
		des2src(out_pack->sholder_ac_no2,ho_invalid_time);
		out_pack->lvol2 = ho_function;
		des2src(out_pack->sstation0,ho_exec_time);
		out_pack->lvol3 = ho_status;
		out_pack->lvol4 = ho_exec;
		des2src(out_pack->scust_auth2,ho_code);
		des2src(out_pack->vsvarstr0,ho_msg);

		row++;
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(row%15==0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
}

int Delete848273(ST_PACK *in_pack)
{
	int ret;
	ret = DB_t_tif_push_task_del_by_task_id(in_pack->lserial0);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_PUSHTASK_N;
		else
			return E_DB_PUSHTASK_D;
	}
	return 0;
}

int F848273(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	int ret = 0;

	switch(rPack->sstatus0[0])
	{
	case 'R':
		ret=Read848273(handle,iRequest,rPack,pRetCode,szMsg);
		break;
	case 'A':
		ret = Add848273(rPack,szMsg);
		break;
	case 'D':
		ret = Delete848273(rPack);
		break;
	default:
		writelog(LOG_ERR,"invalid request");
		ret = E_INPUT_DATA_INVAILD;
		break;
	}
	if(ret)
	{
		*pRetCode=ret;
		goto L_RETU;
	}
	return 0;
L_RETU:
	return  -1;
}



