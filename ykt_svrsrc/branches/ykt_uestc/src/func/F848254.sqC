/* --------------------------------------------
 * 程序名称: F848250.c
 * 创建日期: 2007-03-30
 * 程序作者: 汤成
 * 版本信息: 1.0.0.0
 * 程序功能:门禁时间段明细查询
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"
ESQL #include "dbfunc_foo.h"

static int push_one_row(int timeid,TRUSERID *handle,ST_PACK *out_pack,int *pRetCode,char *szMsg)
{
	T_t_door_time_sect sect;
	memset(&sect,0,sizeof sect);
	int ret;
	if(timeid == 0)
		return 0;
	ret = DB_t_door_time_sect_read_by_sid(timeid,&sect);
	if(ret)
	{
		writelog(LOG_ERR,"时间段读取失败timeid[%d]",timeid);
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_TIMESECT_N;
		return E_DB_DOOR_TIMESECT_R;
	}
	des2src(out_pack->semail2,sect.sname);
	des2src(out_pack->sdate1,sect.begin_time);
	des2src(out_pack->sdate2,sect.end_time);
	out_pack->lvol2 = sect.sid;
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;
}

static int do_query848254(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char ho_tgname[61]= "";
	sqlint32 ho_tgid = 0;
	sqlint32 ho_time1 = 0;
	sqlint32 ho_time2 = 0;
	sqlint32 ho_time3 = 0;
	sqlint32 ho_time4 = 0;
	sqlint32 ho_time5 = 0;
	sqlint32 ho_time6 = 0;
	sqlint32 ho_time7 = 0;
	sqlint32 ho_time8 = 0;
	
	sqlint16 ho_indr = 1;
	char sqlcmd[1024] = "";
	EXEC SQL END DECLARE SECTION;
	char sqltmp[128];
	int rows;
	int ret;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

	if(unlike_tbl_id(in_pack->lvol0))
		return E_INPUT_ERROR;
	/*
	sprintf(sqlcmd,"select w.wid,w.week_name,t.day_of_week, \
	s1.begin_time begin_time_1,s1.end_time end_time_1,s1.sname sname_1, \
	s2.begin_time begin_time_2,s2.end_time end_time_2,s1.sname sname_2, \
	s3.begin_time begin_time_3,s3.end_time end_time_3,s1.sname sname_3, \
	s4.begin_time begin_time_4,s4.end_time end_time_4,s1.sname sname_4, \
	s5.begin_time begin_time_5,s5.end_time end_time_5,s1.sname sname_5, \
	s6.begin_time begin_time_6,s6.end_time end_time_6,s1.sname sname_6, \
	s7.begin_time begin_time_7,s7.end_time end_time_7,s1.sname sname_7, \
	s8.begin_time begin_time_8,s8.end_time end_time_8,s1.sname sname_8  \
	from ykt_cur.t_door_weeks w,ykt_cur.t_door_week_times t \
	left join ykt_cur.t_door_time_sect s1 on(t.time1_id=s1.sid) \
	left join ykt_cur.t_door_time_sect s2 on(t.time2_id=s2.sid) \
	left join ykt_cur.t_door_time_sect s3 on(t.time3_id=s3.sid) \
	left join ykt_cur.t_door_time_sect s4 on(t.time4_id=s4.sid) \
	left join ykt_cur.t_door_time_sect s5 on(t.time5_id=s5.sid) \
	left join ykt_cur.t_door_time_sect s6 on(t.time6_id=s6.sid) \
	left join ykt_cur.t_door_time_sect s7 on(t.time7_id=s7.sid) \
	left join ykt_cur.t_door_time_sect s8 on(t.time8_id=s8.sid) \
	where w.wid=t.wid and w.wid=%d ",in_pack->lvol0);
	*/
	sprintf(sqlcmd,"select t.tgid,t.tgname,t.time1_id, \
	time2_id,time3_id,time4_id,time5_id,time6_id,time7_id,time8_id \
	from ykt_cur.t_door_times_group t \
	where  t.tgid=%d  ",in_pack->lvol0);
	
	EXEC SQL PREPARE stmt FROM :sqlcmd;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_PREPARE;
	}
	EXEC SQL DECLARE cur CURSOR FOR stmt;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL OPEN cur;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_OPEN;
	}

	memset(&aPack,0,sizeof aPack);
	rows=0;
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	SetCol(handle,F_SEMAIL,F_SEMAIL2,F_LVOL0,F_SDATE1,F_SDATE2,F_LVOL1,F_LVOL2,0);
	while(1)
	{
		memset(ho_tgname,0,sizeof ho_tgname);
		ho_tgid = 0;
		ho_time1 = 0;
		ho_time2 = 0;
		ho_time3 = 0;
		ho_time4 = 0;
		ho_time5 = 0;
		ho_time6 = 0;
		ho_time7 = 0;
		ho_time8 = 0;

		EXEC SQL FETCH cur INTO ho_tgid:ho_indr,ho_tgname:ho_indr,
		:ho_time1:ho_indr,:ho_time2:ho_indr,:ho_time3:ho_indr,
		:ho_time4:ho_indr,:ho_time5:ho_indr,:ho_time6:ho_indr,:ho_time7:ho_indr,
		:ho_time8:ho_indr;
		if(SQLCODE)
		{
			ret = SQLCODE;
			CHECK_DB_ERR;
			EXEC SQL CLOSE cur;
			if(DB_NOTFOUND == ret)
			{
				if(rows > 0)
					break;
				return E_DB_DOOR_TIME_GROUP_N;
			}
			return E_DB_DOOR_TIME_GROUP_R;
		}
		rows++;
		out_pack->lvol0 = ho_tgid;
		des2src(out_pack->semail,ho_tgname);
		
		ret = push_one_row(ho_time1,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
		ret = push_one_row(ho_time2,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
		ret = push_one_row(ho_time3,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
		ret = push_one_row(ho_time4,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
		ret = push_one_row(ho_time5,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
		ret = push_one_row(ho_time6,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
		ret = push_one_row(ho_time7,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
		ret = push_one_row(ho_time8,handle,out_pack,pRetCode,szMsg);
		if(ret)
			goto L_END;
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
L_END:
	EXEC SQL CLOSE cur;
	return ret;
}

int F848254(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	int ret;
	ret = do_query848254(handle,iRequest,in_pack,pRetCode,szMsg);
	if(ret)
	{
		*pRetCode = ret;
		return -1;
	}
	return 0;
}


