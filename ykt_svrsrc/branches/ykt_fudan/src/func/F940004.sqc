/* --------------------------------------------
 * 程序名称: F940004.sqc
 * 创建日期: 8 29 2005
 * 程序作者: 汤成
 * 版本信息: 1.0.0.0
 * 程序功能: 获取子系统客户信息更新名单
 * --------------------------------------------*/
#define _IN_SQC_                    
#include <string.h>
#include <stdio.h>
#include "pubfunc.h"
#include "pubdb.h"
#include "pubdef.h"
#include "errdef.h"
#include "dbfunc.h"
#include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

int F940004(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32 cardid = 0;
	char phycardid[9] = "";
	char stuempno[21] = "";
	char deptno[11] = "";
	char s_code[101] = "";
	char sex[2] = "";
	sqlint32 cut_type = 0;
	sqlint32 fee_type = 0;
	char endtime[27] = "";
	char volume[13] = "";
	char uname[151] = "";
	sqlint16 ind = 0;
    sqlint32 cardvertype = 0;
	char sqlcmd[1024] = "";
	EXEC SQL END DECLARE SECTION;
	int ret = 0;
	int rows = 0;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	T_t_cif_cuttypefee tCutTypeFee;
	T_t_cif_dept tDept;
	char logical_date[8+1];

	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	SetCol(handle,F_LVOL2,F_LVOL3,F_LVOL4,F_LVOL5,F_SNAME,F_SNAME2,F_SCUST_NO,
		   F_SCUST_AUTH,F_SDATE0,F_SDATE1,F_SHOLDER_AC_NO,F_VSVARSTR0,F_VSVARSTR1,F_VSVARSTR2,
		   F_LVOL6,F_LVOL7,0);

    if(in_pack->lvol5 == 0)
    {
    	if(-1 == in_pack->lvol6)
    	{
    		sprintf(sqlcmd,"select a.card_id,a.physical_no,a.stuemp_no,a.classdept_no   \
    				,a.s_code,a.sex,a.cut_type,a.fee_type,a.end_time,a.volume,a.cut_name,1 from   \
    				YKT_CUR.V_CUT_CARD_INFO as a   \
    				left join YKT_CUR.T_PIF_SUB_UPDATE on( sub_id=%d and sub_flag=%d)  \
    				where  ((volume > sub_volume) or (sub_volume is null)) and cut_state<>%d  \
    				order by volume with ur"
    				,in_pack->lvol0,in_pack->lvol1);
    	}
    	else
    	{
    		sprintf(sqlcmd,"select a.card_id,a.physical_no,a.stuemp_no,a.classdept_no   \
    				,a.s_code,a.sex,a.cut_type,a.fee_type,a.end_time,a.volume,a.cut_name,1 from   \
    				YKT_CUR.V_CUT_CARD_INFO as a \
    				left join YKT_CUR.T_PIF_SUB_UPDATE on( sub_id=%d and sub_flag=%d)  \
    				where  ((volume > sub_volume) or (sub_volume is null)) and cut_state<>%d  \
    				and flag = %d order by volume with ur"
    				,in_pack->lvol0,in_pack->lvol1,CUSTSTAT_LOGOUT,in_pack->lvol6);
    	}
    }
    else
    {
        sprintf(sqlcmd,"select p.card_id,p.physical_no,c.stuemp_no,c.classdept_no   \
                    ,c.s_code,c.sex,c.cut_type,c.fee_type,p.end_time,a.cardverno,c.cut_name,a.cardvertype \
                    from ykt_cur.t_cardver as a,ykt_cur.t_cif_customer c,ykt_cur.t_pif_card p, \
                    ykt_cur.t_pif_sub_update as d where a.CARDVERNO > d.sub_volume \
                    and a.cardno=p.card_id and p.cosumer_id=c.cut_id  \
                    and d.sub_id=%d and sub_flag=%d and cut_state <> 2 order by a.cardverno \
                    with ur",in_pack->lvol0,in_pack->lvol1);
    }

#ifdef DEBUG
	writelog(LOG_DEBUG," lvol0		: %d",in_pack->lvol0);
	writelog(LOG_DEBUG," lvol1		: %d",in_pack->lvol1);
	writelog(LOG_DEBUG," lvol6		: %d",in_pack->lvol6);
#endif

	EXEC SQL PREPARE query_stmt FROM :sqlcmd;
	if( SQLCODE )
	{
		*pRetCode = E_DB_SUBUPDATE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL DECLARE subsys_cur CURSOR FOR query_stmt;
	if( SQLCODE )
	{
		*pRetCode = E_DB_SUBUPDATE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL OPEN subsys_cur;
	if( SQLCODE )
	{
		*pRetCode = E_DB_SUBUPDATE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	rows = 0;
	GetLogicDate(logical_date);
	while(1)
	{
		cardid = 0;
		memset(phycardid,0,sizeof(phycardid));
		memset(stuempno,0,sizeof(stuempno));
		memset(deptno,0,sizeof(deptno));
		memset(s_code,0,sizeof(s_code));
		memset(sex,0,sizeof(sex));
		cut_type = 0;
		fee_type = 0;
		memset(endtime,0,sizeof(endtime));
		memset(volume,0,sizeof(volume));
		memset(uname,0,sizeof uname);
		EXEC SQL FETCH subsys_cur INTO :cardid:ind,:phycardid:ind,:stuempno:ind,:deptno:ind,:s_code:ind
			,:sex:ind,:cut_type:ind,:fee_type:ind,:endtime:ind,:volume:ind,:uname:ind,:cardvertype:ind;
		if( SQLCODE )
		{
			ret = SQLCODE;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE subsys_cur;
			if(DB_NOTFOUND == ret)
			{
				if (rows > 0)
				{
					break;
				}
				else
				{
					*pRetCode = E_DB_SUBUPDATE_N;
				}
			}
			else
			{
				*pRetCode = E_DB_SUBUPDATE_R;
			}
			goto L_RETU;
		}
		memset(&tCutTypeFee,0,sizeof tCutTypeFee);
		memset(&tDept,0,sizeof tDept);

		ret = DB_t_cif_cuttypefee_read_by_cut_type(cut_type, &tCutTypeFee);
		if( ret )
		{
			if( DB_NOTFOUND != ret )
			{
				*pRetCode = E_DB_CUTTYPEFEE_R;
				goto L_RETU;
			}
		}
		Strncpy_t(out_pack->vsvarstr1,tCutTypeFee.type_name,sizeof out_pack->vsvarstr1);
		ret = DB_t_cif_dept_read_by_dept_code(deptno, &tDept);
		if( ret )
		{
			if( DB_NOTFOUND != ret )
			{
				*pRetCode = E_DB_DEPT_R;
				goto L_RETU;
			}
		}
		Strncpy_t(out_pack->vsvarstr0,tDept.dept_name,sizeof out_pack->vsvarstr0);
		out_pack->lvol2 = cardid;
		Strncpy_t(out_pack->sname,phycardid,sizeof(out_pack->sname));
		Strncpy_t(out_pack->sname2,stuempno,sizeof(out_pack->sname2));
		Strncpy_t(out_pack->scust_no,deptno,sizeof(out_pack->scust_no));
		Strncpy_t(out_pack->scust_auth,s_code,sizeof(out_pack->scust_auth));
		Strncpy_t(out_pack->sdate0,endtime,sizeof(out_pack->sdate0));
		Strncpy_t(out_pack->sdate1,logical_date,sizeof out_pack->sdate1);
		out_pack->lvol3 = sex[0] - '0';
		out_pack->lvol4 = cut_type;
		out_pack->lvol5 = fee_type;
        out_pack->lvol6 = cardvertype;
        switch(cardvertype)
        {
        case 1:
        case 5:
        case 6:
        case 7:
        case 9:
            out_pack->lvol7 = 1;
            break;
        case 2:
        case 3:
        case 4:
        case 8:
        default:
            out_pack->lvol7 = 0;
            break;
        }
		Strncpy_t(out_pack->sholder_ac_no,volume,sizeof(out_pack->sholder_ac_no));
		Strncpy_t(out_pack->vsvarstr2,uname,sizeof out_pack->vsvarstr2);
		rows++;
		PutRow(handle,out_pack,pRetCode,szMsg);
		// 每 20 个包发送一次
		if( rows % 20 == 0 )
		{
			AnswerDataPart(handle,*pRetCode,szMsg);
		}
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
L_RETU:
	return  -1;	
}
