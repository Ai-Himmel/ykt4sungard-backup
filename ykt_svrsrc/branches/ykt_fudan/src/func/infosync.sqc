//增加复旦会议签到系统中职务数据的同步功能 by hhd at 2007-04-29

#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#include <time.h>
#include <math.h>
#include<syslog.h>
#include<assert.h>
#include "errdef.h"
#include "pubdef.h"
#include "pubfunc.h"
#include "pubdb.h"
#include "dbfunc.h"
#include "dictionary.h"
#include "fdsqc.h"
#define DB_CHK_ERR_INVALID

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    sqlint32 ykt_cutid = 0;
	char	ykt_stuempno[30] = "";
/*	char	ykt_sex[1]="";
	char	ykt_scode[20]="";
	char	ykt_area[2]="";
	char	ykt_cuttype[60]="";
	char	ykt_nation[2]="";
	char	ykt_feetype[5]="";
*/	
	sqlint32 ykt_cuttype = 0;
	char    ykt_cuttype_flag[11] = "";
	char	ykt_deptname[50 + 1] = "";
	char	ykt_tel[20 + 1] = "";
	char	ykt_syntime[15] = "";
	

	sqlint32 photo_cutid = 0;
	sqlint32 photo_cutstate = 0;
	sqlint32 photo_nation = 0;
	sqlint32 photo_area = 0;	
	sqlint32 photo_frozenstatus = 0;
	char	photo_ishavecard[1 + 1] = "";
	char	photo_libcardid[50 + 1] = "";
	char	photo_regtime[26 + 1] = "";
	char 	photo_stuempno[30 + 1] = "";
	char	photo_stuempname[60 + 1] = "";
	char	photo_sex[1 +1] = "";
	char	photo_deptcode[10 + 1] = "";
	char	photo_deptname[100 + 1] = "";
	char	photo_scode[30 + 1] = "";
	char	photo_cuttype[60 + 1] = "";
	char	photo_indate[8 + 1] = "";
	char	photo_buildingno[10 + 1] = "";
	char	photo_floorno[10 + 1] = "";
	char	photo_roomno[10 + 1] = "";
	char	photo_medfeetype[5 + 1] = "";
	char	photo_feetype[5 + 1] = "";
	char	photo_upddate[10+ 1] = "";
	char	photo_updtime[8 + 1] = "";
	char	photo_manid[20 + 1] = "";
	char	photo_tel[60 + 1] = "";	
	char	photo_classno[10 + 1] = "";
	char	photo_address[150 + 1] = "";
	char	photo_cantime[26 + 1] = "";
	sqlint16	indicator = 0;
//	char	v_strsql[1024] = "";
	char	dbname[50] = "";
	char	user[50] = "";
	char	passwd[50] = "";	
EXEC SQL END DECLARE SECTION;

int Init()
{
	char *p=NULL;
	printf("start to initialize ykt database........................\n");
	
	p=getenv("YKT_DBNAME");
	if(p==NULL)
	{
		writelog(LOG_ERR,"get env error,env=[%s]!","YKT_DBNAME");
		goto ERR;
	}
	strcpy(dbname,p);
	
	p=getenv("YKT_USER");
	if(p==NULL)
	{
		writelog(LOG_ERR,"get env error,env=[%s]!","YKT_USER");
		goto ERR;
	}
	strcpy(user,p);
	
	p=getenv("YKT_PWD");
	if(p==NULL)
	{
		writelog(LOG_ERR,"get env error,env=[%s]!","YKT_PWD");
		goto ERR;
	}	
	strcpy(passwd,p);
	
    EXEC SQL CONNECT TO :dbname USER :user USING :passwd;
	if(SQLCODE)
	{
		writelog(LOG_ERR,"connect to datebase error,errcode=[%d]!",SQLCODE);
		goto ERR;
	}
	printf("end to initialize ykt database.............\n");
	return 0;
	
ERR:
	db_rollback();
	EXEC SQL CONNECT RESET; 
	return 1;
}


int DoWork()
{
	int ret=0;
	int uniqno = 0;
	double dUniqno = 0;
	ret=Init();

	if(ret)
	{
		writelog(LOG_ERR,"Init database failed,errcode=[%d]!",ret);
		goto ERR;
	}
	
	printf("iniatialize successfully.............\n");	

	EXEC SQL DECLARE ykt_cif_photo CURSOR WITH HOLD FOR
		SELECT STUEMP_NO,STUEMP_NAME,CUT_TYPE,SEX,DEPT_CODE,S_CODE,
		CASE WHEN AREA IS NULL THEN -1
			 ELSE AREA
		END AS AREA,
		CASE WHEN NATION IS NULL THEN -1
			 ELSE AREA
		END AS NATION,IN_DATE,LIB_CARDID,BUILDING_NO,FLOOR_NO,
		ROOM_NO,MED_FEETYPE,FEE_TYPE,UPD_DATE,UPD_TIME,TEL,MAN_ID,
		CLASS_NO,ADDRESS,CAN_TIME,
		CASE WHEN FROZEN_STATUS IS NULL THEN -1
			 ELSE FROZEN_STATUS
		END AS FROZEN_STATUS
		FROM YKT_CUR.T_CIF_PHOTO1
		WHERE UPD_STATUS = '0' and stuemp_no is not null and stuemp_no<>''
		ORDER BY STUEMP_NO
		FOR UPDATE;
	ret = SQLCODE;
	if(ret)
	{
		writelog(LOG_ERR,"Declare cursor failed,errcode=[%d]!",ret);
		goto ERR;
	}


	printf("declare ykt_cif_photo1 successfully............\n");

	EXEC SQL OPEN ykt_cif_photo;

	printf("start to open ykt_cif_photo1\n");
	ret = SQLCODE;
    	if(ret)
    	{
		writelog(LOG_ERR,"Open cursor failed,errcode=[%d]!",ret);
		goto ERR;
	}

	while(1)
	{
		memset(photo_ishavecard,0,sizeof(photo_ishavecard));
		memset(photo_libcardid,0,sizeof(photo_libcardid));
		memset(photo_regtime,0,sizeof(photo_regtime));
		memset(photo_stuempno,0,sizeof(photo_stuempno));
		memset(photo_stuempname,0,sizeof(photo_stuempname));
		memset(photo_sex,0,sizeof(photo_sex));
		memset(photo_deptcode,0,sizeof(photo_deptcode));
		memset(photo_deptname,0,sizeof(photo_deptname));
		memset(photo_scode,0,sizeof(photo_scode));
		memset(photo_cuttype,0,sizeof(photo_cuttype));
		memset(photo_indate,0,sizeof(photo_indate));
		memset(photo_buildingno,0,sizeof(photo_buildingno));
		memset(photo_floorno,0,sizeof(photo_floorno));
		memset(photo_roomno,0,sizeof(photo_roomno));
		memset(photo_medfeetype,0,sizeof(photo_medfeetype));
		memset(photo_feetype,0,sizeof(photo_feetype));
		memset(photo_updtime,0,sizeof(photo_updtime));
		memset(photo_tel,0,sizeof(photo_tel));
		memset(photo_upddate,0,sizeof(photo_upddate));
		memset(ykt_syntime,0,sizeof(ykt_syntime));
		memset(photo_manid,0,sizeof(photo_manid));
		memset(photo_classno,0,sizeof(photo_classno));
		memset(photo_address,0,sizeof(photo_address));
		memset(photo_cantime,0,sizeof(photo_cantime));
	 	ykt_cuttype = 0;
		photo_area = 0;
		photo_nation = 0;
		photo_frozenstatus = 0;
		
		EXEC SQL FETCH ykt_cif_photo INTO 
			:photo_stuempno:indicator,
			:photo_stuempname:indicator,
			:photo_cuttype:indicator,
			:photo_sex:indicator,
			:photo_deptcode:indicator,
			:photo_scode:indicator,
			:photo_area:indicator,
			:photo_nation:indicator,
			:photo_indate:indicator,
			:photo_libcardid:indicator,
			:photo_buildingno:indicator,
			:photo_floorno:indicator,
			:photo_roomno:indicator,
			:photo_medfeetype:indicator,
			:photo_feetype:indicator,
			:photo_upddate:indicator,
			:photo_updtime:indicator,
			:photo_tel:indicator,
			:photo_manid:indicator,
			:photo_classno:indicator,
			:photo_address:indicator,
			:photo_cantime:indicator,
			:photo_frozenstatus:indicator;
			
		ret=SQLCODE;
		if(ret)
		{
			EXEC SQL CLOSE ykt_cif_photo;
			if(DB_NOTFOUND==ret)
			{
				writelog(LOG_INFO,"Fetch cursor failed,errcode=[%d]!",ret);
				goto ERR;
			}
			else
			{
				writelog(LOG_INFO,"Fetch cursor failed,errcode=[%d]!",ret);
				goto ERR;
			}
		}

		photo_tel[20]= '\0';
		//dbtrim(photo_cuttype);
		printf("cuttype=[%s],stuemp_no=[%s],stuemp_name=[%s]\n",photo_cuttype,photo_stuempno,photo_stuempname);	
		EXEC SQL SELECT CUT_TYPE,CUT_FLAG INTO :ykt_cuttype:indicator,:ykt_cuttype_flag:indicator
		FROM YKT_CUR.T_CIF_CUTTYPEFEE WHERE TYPE_NAME = :photo_cuttype;
		ret = SQLCODE;
		if(ret)		
		{
			writelog(LOG_INFO,"can not find the correct type_name check if the type_name is right!type_name=[%s]",photo_cuttype);
			continue;
		}

		EXEC SQL SELECT stuemp_no,cut_id into :ykt_stuempno,:ykt_cutid FROM YKT_CUR.T_CIF_CUSTOMER
			WHERE STUEMP_NO = :photo_stuempno;
		ret = SQLCODE;
	
//		ykt_cuttype = atoi(photo_cuttype);	
//		ykt_nation = atoi(photo_nation);
//		ykt_area = atoi(photo_area);

		memset(ykt_tel,0,sizeof ykt_tel);
		//strncpy(ykt_tel,photo_tel,20);
		strncpy(ykt_deptname,photo_deptname,50);
		
		getsysdatetime(ykt_syntime);
		printf("system date time is:%s\n",ykt_syntime);
		
		if(ret)
		{
			if(DB_NOTFOUND == ret)
			{
				printf("start to insert.........");
				uniqno= getNewUniqNo(KEYTYPE_CUSTOMER,&dUniqno);
				if(uniqno)
				{
					goto ERR;
				}
				photo_cutid = dUniqno;
				photo_cutstate = CUSTSTAT_REGIST;
//				Strncpy_t(photo_ishavecard,TYPE_NO, sizeof(photo_ishavecard));
				
				printf("stuemp_no is:%s\n",photo_stuempno);
				printf("sex is:%s\n",photo_sex);
				printf("s_code is:%s\n",photo_scode);
				printf("cut_type =[%d]\n",ykt_cuttype);
				printf("cut_id=[%d]\n",photo_cutid);
				printf("photo_regtime=[%s]\n",photo_regtime);
				printf("tel=[%s]\n",photo_tel);
				
				if(ykt_cuttype_flag[0] == '1')
				{
					// 需要同步公费医疗字段
					photo_medfeetype[0] = (photo_medfeetype[0] == '1') ? '1' : '0';
				}
				else
					photo_medfeetype[0] = '0';
				EXEC SQL insert into ykt_cur.t_cif_customer(stuemp_no,cut_name,cut_id,cut_state,
							sex,classdept_no,s_code,area,cut_type,nation,in_date,lib_cardid,
							building_no,floor_no,room_no,reg_time, upd_date,upd_time,syn_time,
							tel,classdept_name,class_no,man_id,man,address,can_time,frozen_status,MED_FEETYPE)
						values(:photo_stuempno,:photo_stuempname,:photo_cutid,:photo_cutstate,
							:photo_sex,:photo_deptcode,:photo_scode, :photo_area,:ykt_cuttype,
							:photo_nation,:photo_indate,:photo_libcardid, :photo_buildingno,
							:photo_floorno,:photo_roomno,:photo_regtime,:photo_upddate,:photo_updtime,
							:ykt_syntime,:ykt_tel,:ykt_deptname,:photo_classno,:photo_manid,
							:photo_stuempname,:photo_address,:photo_cantime,:photo_frozenstatus,:photo_medfeetype);
				
				if(SQLCODE)
				{
					printf("error occurs!");
					writelog(LOG_ERR,"Insert t_cif_customer Error,pass!stuemp_no=[%s],errcode=[%d]",photo_stuempno,SQLCODE);	
					continue;
				}
				
				printf("end to insert .................\n");
				
				printf("start to commit insert..............\n");
				EXEC SQL COMMIT;
				
				if(SQLCODE)
				{
					writelog(LOG_ERR,"insert commit error!,errcode=[%d]",SQLCODE);
				}
				printf("end to commit insert........\n");
			}
			else
			{
				writelog(LOG_ERR,"fetch cur error,errcode=[%d]!",ret);	
				goto ERR;
			}
		}
		else
		{
			printf("start to update ......\n");
			printf("photo_stuempno is:%s\n",photo_stuempno);
			printf("photo s_code is:%s\n",photo_scode);

			// 需要更新公费医疗状态
			if(ykt_cuttype_flag[0] == '1')
			{
				photo_medfeetype[0] = (photo_medfeetype[0] == '1') ? '1' : '0';
				
				EXEC SQL update ykt_cur.t_cif_customer 
						set cut_name = :photo_stuempname,
							classdept_no = :photo_deptcode,
							sex = :photo_sex,
							s_code = :photo_scode,
							area = :photo_area,
							cut_type = :ykt_cuttype,
							nation = :photo_nation,
							in_date = :photo_indate,
							lib_cardid = :photo_libcardid,
							building_no = :photo_buildingno,
							floor_no = :photo_floorno,
							room_no = :photo_roomno,
							upd_date = :photo_upddate,
							upd_time = :photo_updtime,
							syn_time = :ykt_syntime,
							classdept_name = :photo_deptname,
							man_id = :photo_manid,
							man = :photo_stuempname,
							address = :photo_address,
							can_time = :photo_cantime,
							class_no = :photo_classno,
							frozen_status = :photo_frozenstatus ,
							med_feetype = :photo_medfeetype
					where stuemp_no = :photo_stuempno;
			}
			else
			{
				EXEC SQL update ykt_cur.t_cif_customer 
						set cut_name = :photo_stuempname,
							classdept_no = :photo_deptcode,
							sex = :photo_sex,
							s_code = :photo_scode,
							area = :photo_area,
							cut_type = :ykt_cuttype,
							nation = :photo_nation,
							in_date = :photo_indate,
							lib_cardid = :photo_libcardid,
							building_no = :photo_buildingno,
							floor_no = :photo_floorno,
							room_no = :photo_roomno,
							upd_date = :photo_upddate,
							upd_time = :photo_updtime,
							syn_time = :ykt_syntime,
							classdept_name = :photo_deptname,
							man_id = :photo_manid,
							man = :photo_stuempname,
							address = :photo_address,
							can_time = :photo_cantime,
							class_no = :photo_classno,
							frozen_status = :photo_frozenstatus 
					where stuemp_no = :photo_stuempno;
			}

			if(SQLCODE)
			{
				writelog(LOG_ERR,"update ykt customer error!errcode=[%d]",SQLCODE);
				continue;
			}
            // 更新卡对应的有效期
            EXEC SQL UPDATE YKT_CUR.T_PIF_CARD SET END_TIME=:photo_cantime
            WHERE COSUMER_ID=:ykt_cutid AND STATE_ID<>'2000';
            if(SQLCODE)
            {
                if(DB_NOTFOUND!=SQLCODE)
                {
                    writelog(LOG_ERR,"update ykt card error,!errcodoe=[%d]",SQLCODE);
                    continue;
                }
            }
			
			printf ("end to update .......\n");

			printf("start to commit..........\n");

			EXEC SQL COMMIT;
			
			if(SQLCODE)
			{	
				writelog(LOG_ERR,"commit ykt customer error!errcode=[%d]",SQLCODE);
				goto ERR;
			}
			
			printf("end to commit .............\n");
		}
		

		printf("start to update photo1 .............\n");

		EXEC SQL UPDATE YKT_CUR.T_CIF_PHOTO1
			SET UPD_STATUS = '1'
			WHERE STUEMP_NO = :photo_stuempno;	
		printf("stuemp_no is:%s\n",photo_stuempno);
		
		if(SQLCODE){
			writelog(LOG_ERR,"update photo error!errcode=[%d]",SQLCODE);
			goto ERR;
		}
		

		printf("end to update photo.......\n");

		ret=db_commit();
		if(ret){
			writelog(LOG_ERR,"commit error!errcode=[%d]",SQLCODE);
			goto ERR;
		}

		printf("operation successfully!\n");
	}
	return 0;
ERR:
	db_rollback();
	EXEC SQL CONNECT RESET;
	return 1;
}
//同步oa系统的职务数据,采用先删除后插入的方法.
//如果数据量大的话需要考虑分步提交数据的方法,
//目前数据在万条以内,在一个事务中
int SynchronizeOaData()
{
	int ret=0;
	int cnt=0;
	EXEC SQL 
		DELETE FROM YKT_CONF.T_DUTY WHERE 1=1;
	ret = SQLCODE;
	if(ret)
	{
		writelog(LOG_ERR,"DELETE FROM YKT_CONF.T_DUTY WHERE 1=1 failed,errcode=[%d]!",ret);
		goto ERR;
	}
	EXEC SQL
		insert into ykt_conf.t_duty 
		select t1.gh,t1.znzh,t2.xzzw 
			from 
				(SELECT gh,znzh
				FROM YKT_CUR.URP_OA_XZZW
				where  gh is not null and znzh is not null
				group by gh,znzh
				having count(*)=1 )	 t1
			left join 
			YKT_CUR.URP_OA_XZZW	 t2
			on t1.gh=t2.gh and t1.znzh=t2.znzh;
	ret = SQLCODE;
	if(ret)
	{
		writelog(LOG_ERR,"insert into ykt_conf.t_duty failed,errcode=[%d]!",ret);
		goto ERR;
	}
	ret=db_commit();
	if(ret)
	{
		writelog(LOG_ERR,"commit error!");
		goto ERR;
	}

	return 0;

ERR:
	db_rollback();
	EXEC SQL CONNECT RESET;

}
void finally(){
	EXEC SQL CONNECT RESET;
	if(SQLCODE){
		writelog(LOG_ERR,"connect reset!");
	}
}

int main()
{
	openlog("fdykt_hr",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL4);
	int ret=0;
	ret=DoWork();

	ret=Init();
	if(ret)	writelog(LOG_ERR,"Init error,errcode=[%d]!",ret);
	ret=SynchronizeOaData();
	if(ret)	writelog(LOG_ERR,"SynchronizeOaData error,errcode=[%d]!",ret);
	finally();

	closelog();

	return 0;
}
