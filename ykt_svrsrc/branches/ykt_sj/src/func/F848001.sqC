/* --------------------------------------------
 * 程序名称: F848001.c
 * 创建日期: 2005-09-19
 * 程序作者: 汤成
 * 版本信息: 1.0.0.0
 * 程序功能:门禁组管理
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"

static int Add848001(ST_PACK *in_pack)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	hi_group_id=0;
	char a_group_name[81] = "";
	EXEC SQL END DECLARE SECTION;
	T_t_door_group tGroup;
	int ret = 0;
    /*
	if(strcmp(in_pack->scust_limit,OPER_SYSTEM_KEY))
	{
		return E_OPER_NO_RIGHT_FOR_DOOR_GROUP;
	}
	*/
	des2src(a_group_name,in_pack->sall_name);
	if( strlen(a_group_name) < 1 )
	{
		return E_INPUT_GROUP_NAME;
	}
	memset(&tGroup,0,sizeof tGroup);
	ret = DB_t_door_group_read_by_group_name(a_group_name,&tGroup);
	if( ret )
	{
		if (DB_NOTFOUND != ret )
		{
			return E_DB_DOOR_GROUP_R;
		}
		
	}
	else
	{
		return E_DB_DOOR_GROUP_E;
	}
#ifdef ESQL_ORA		
	EXEC SQL 
		SELECT YKT_CUR.S_T_DOOR_GROUP.nextval into :hi_group_id  from dual;
	if( SQLCODE )
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return SQLCODE;
	}
	tGroup.group_id=hi_group_id;
#endif
	des2src(tGroup.group_name,a_group_name);
	tGroup.ref_cnt=0;
	
	ret = DB_t_door_group_add(& tGroup);
	if( ret )
	{
		return E_DB_DOOR_GROUP_I;
	}
	return 0;
	
}
static int Del848001(ST_PACK *in_pack)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32 d_group_id = 0;
	EXEC SQL END DECLARE SECTION;
	int ret = 0;
	T_t_door_group tGroup;
	d_group_id = in_pack->lvol1;
	if( d_group_id < 1 )
	{
		return E_INPUT_GROUP_ID;
	}
    /*
	if( strcmp(in_pack->scust_limit,OPER_SYSTEM_KEY))
	{
		return E_OPER_NO_RIGHT_FOR_DOOR_GROUP;
	}
	*/
	memset(&tGroup,0,sizeof tGroup);
	ret = DB_t_door_group_read_by_group_id(d_group_id,&tGroup);
	if (ret)
	{
		if(DB_NOTFOUND == ret )
		{
			return E_DB_DOOR_GROUP_N;
		}
		else
		{
			return E_DB_DOOR_GROUP_R;
		}
	}
	if( tGroup.ref_cnt > 0 )
	{
		return E_DOOR_GROUP_IN_USE;
	}
	EXEC SQL DELETE FROM YKT_CUR.T_DOOR_GROUP WHERE GROUP_ID=:d_group_id;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_DOOR_GROUP_D;
	}
	return 0;
	
}
static int Update848001(ST_PACK *in_pack)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char u_group_name[81] = "";
	sqlint32 u_group_id;
	EXEC SQL END DECLARE SECTION;
	int ret = 0;
    /*
	if( strcmp(in_pack->scust_limit,OPER_SYSTEM_KEY))
	{
		return E_OPER_NO_RIGHT_FOR_DOOR_GROUP;
	}
	*/
	des2src(u_group_name,in_pack->sall_name);
	if( strlen(u_group_name) < 1 )
	{
		return E_INPUT_GROUP_NAME;
	}
	u_group_id = in_pack->lvol1;
	if( u_group_id < 1 )
	{
		return E_INPUT_GROUP_ID;
	}
	EXEC SQL UPDATE YKT_CUR.T_DOOR_GROUP SET GROUP_NAME=:u_group_name
		WHERE GROUP_ID = :u_group_id;
	
	if( SQLCODE )
	{
		ret = SQLCODE;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		if( DB_NOTFOUND == ret )
		{
			return E_DB_DOOR_GROUP_N;
		}
		return E_DB_DOOR_GROUP_U;
	}
	return 0;
}
static int Read848001(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char r_sqlcmd[1024] = "";
	char r_sqltmp[512] = "";
	char r_group_name[81] = "";
	sqlint32 r_group_id=0;
	sqlint16 ind = 0;
	EXEC SQL END DECLARE SECTION;
	int rows = 0;
	int ret = 0;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
    /*
	if( strcmp(in_pack->scust_limit,OPER_SYSTEM_KEY))
	{
		return E_OPER_NO_RIGHT_FOR_DOOR_GROUP;
	}
	*/
	ResetNormalCPack(&aPack,0 ,1);
	SetCol(handle,0);
	SetCol(handle,F_LVOL1,F_SALL_NAME,0);
	sprintf(r_sqlcmd,"SELECT GROUP_ID,GROUP_NAME FROM YKT_CUR.T_DOOR_GROUP \
			WHERE 1=1 ");
	if( strlen(in_pack->sall_name) > 0 )
	{
		sprintf(r_sqltmp," AND GROUP_NAME LIKE '%%%s%%'  ",in_pack->sall_name);
		strcat(r_sqlcmd,r_sqltmp);
	}
	strcat(r_sqlcmd," ORDER BY GROUP_NAME ");
	EXEC SQL PREPARE query_stmt FROM :r_sqlcmd;
	if( SQLCODE )
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL  DECLARE group_cur CURSOR FOR query_stmt;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL  OPEN group_cur;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_OPEN;
	}
	while(1)
	{
		memset(r_group_name,0,sizeof r_group_name);
		r_group_id = 0;
		EXEC SQL FETCH group_cur INTO :r_group_id:ind,:r_group_name:ind;
		if (SQLCODE )
		{
			ret = SQLCODE;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE group_cur;
			if(DB_NOTFOUND == ret)
			{
				if ( rows > 0 )
				{
					break;
				}
				else
				{
					return E_DB_DOOR_GROUP_N;
				}
			}
			else
			{
				return E_DB_DOOR_GROUP_R;
			}
		}
		out_pack->lvol1 = r_group_id;
		Strncpy_t(out_pack->sall_name,r_group_name,sizeof out_pack->sall_name);
		PutRow( handle, out_pack, pRetCode, szMsg);
		rows++;
		if( rows % 20 == 0 )
		{
			AnswerDataPart(handle, *pRetCode, szMsg);
		}
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
}
int F848001(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	int ret = 0;
	ntrim(in_pack->sall_name,sizeof(in_pack->sall_name));
	switch(in_pack->sstatus0[0])
	{
		case 'A':
			ret=Add848001(in_pack);
			break;
		case 'D':
			ret = Del848001( in_pack);
			break;
		case 'R':
			ret = Read848001(handle, iRequest, in_pack,  pRetCode,  szMsg);
			break;
		case 'U':
			ret = Update848001(in_pack);
			break;
		default:
			*pRetCode=E_INPUT_DATA_INVAILD;
			goto L_RETU;
	}

	if(ret)
	{
		*pRetCode=ret;
		writelog(LOG_ERR,"AddMsgLst err[%d]",ret);
		goto L_RETU;
	}
	return 0;
L_RETU:
	return  -1;
}





