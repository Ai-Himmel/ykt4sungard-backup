/* ----------------------------------------------------------
 * 程序名称：bala.sqc
 * 创建日期：2004-10-10 14:58
 * 程序作者：韩海东
 * 版本信息：1.0.0.0
 * 程序功能：结算过程的主程序
 * ----------------------------------------------------------
 * 程序名称：bala.sqc
 * 创建日期：2005-10-27 14:58
 * 程序作者：韩海东
 * 版本信息：1.0.0.1
 * 程序功能：增加各个业务处理失败后的处理
 				   一些业务处理失败，照常运行
 * ----------------------------------------------------------

 * ----------------------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "syslog.h"
ESQL #include "errdef.h"
ESQL #include "balance.h"
ESQL #include "mypub.h"
ESQL #include "pubfunc.h"
ESQL #include "logfile.h"
ESQL #include "profile.h"
ESQL #include "dbfunc.h"
ESQL #include "dbfunc_foo.h"

#define DEBUG


long SQLConnectToServer(char *db_name,char *db_user,char *db_password);
void SQLExit();
void PrintBalaMessage(char *buffer);
int Bala_rakeoff_transfer_day();
int Bala_agio_transfer_month();

 /////////////////////////////////////////////////////////////////////////

EXEC SQL INCLUDE SQLCA;
int  UpdateAccount()
{
	int ret=0;
	SQLCODE=0;
	EXEC SQL
		update ykt_cur.t_aif_account 
		set	last_bala=cur_bala,last_freebala=cur_freebala,last_frozebala=cur_frozebala
		where  current_state=1;
	if(SQLCODE&&SQLCODE!=DB_NOTFOUND)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		writelog(LOG_ERR,"更新帐户上次余额失败!");
		return E_DB_ACCOUNT_U;
	}
	SQLCODE=0;
	EXEC SQL
		update ykt_cur.t_aif_account 
		set nobala_num=nobala_num+1
		where act_type=1 and current_state=1 and cur_freebala<>card_balance;
	if(SQLCODE&&SQLCODE!=DB_NOTFOUND)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		writelog(LOG_ERR,"更新帐户不平次数失败!");
		return E_DB_ACCOUNT_U;
	}
	SQLCODE=0;
	EXEC SQL
		update ykt_cur.t_aif_account 
		set nobala_num=0
		where act_type=1 and current_state=1 and cur_freebala=card_balance and nobala_num>0;
	if(SQLCODE&&SQLCODE!=DB_NOTFOUND)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		writelog(LOG_ERR,"重置帐户不平次数失败!");
		return E_DB_ACCOUNT_U;
	}
	ret=db_commit();
	if(ret)
	{
		db_rollback();
		writelog(LOG_ERR,"db_commit ret[%d]",ret);
		return -1;
	}
	writelog(LOG_INFO,"更新帐户表成功");
	return 0;
}

static int do_create_devmeal_01()
{
	char sqlcmd[8096] = "";
	char logic_date[9] = "";
	int ret;
	//清除当天的结算数据
	ret=GetLogicDate(logic_date);
	if(ret)
	{
		writelog(LOG_ERR,"Get logic date error,errcode=[%d]",ret);
		return 	ret;
	}
	sprintf(sqlcmd,"DELETE FROM  YKT_CUR.T_TIF_REPORT_DEVICE_MEAL_01 WHERE BALANCE_DATE='%s' ",logic_date);
	ret = dynamic_execute_sql(sqlcmd,NULL);
	if(ret)
	{
		if(DB_NOTFOUND != ret)
		{
			writelog(LOG_INFO,"删除历史设备餐次分时段表错误");
			return E_DB_T_REPORT_DEVICE_MEAL_D;
		}
	}
	sprintf(sqlcmd,"INSERT INTO YKT_CUR.T_TIF_REPORT_DEVICE_MEAL_01 ( \
					BALANCE_DATE, OPERATE_DATE, SHOP_ID, \
					DEVICE_ID, MEAL_ID, TRADE_COUNT, \
					TRADE_FEE, MNG_FEE, TOTAL_FEE, \
					DATA_SIGN, RESERVE_1, RESERVE_2, \
					DEVICE_NAME, MEAL_NAME) \
					SELECT '%s', CASE WHEN OPERATE_DATE IS NULL THEN '%s' ELSE OPERATE_DATE END, SHOP_ID, \
					DEVICE_ID, CASE WHEN MEAL_ID IS NULL THEN 0 ELSE MEAL_ID END , TRADE_COUNT, \
					TRADE_FEE, MNG_FEE, TOTAL_FEE, '', '', '', DEVICE_NAME, MEAL_NAME \
					FROM YKT_CUR.V_TIF_REPORT_DEVICE_MEAL_01",logic_date,logic_date);
	
	ret = dynamic_execute_sql(sqlcmd,NULL);
	if(ret)
	{
		if(DB_REPEAT != ret)
		{
			writelog(LOG_INFO,"生成设备餐次分时段表错误");
			return E_DB_T_REPORT_DEVICE_MEAL_I;
		}
	}
	return 0;
}


static int do_create_pos_error()
{
	char sqlcmd[8096] = "";
	char logic_date[9] = "";
	char begin_timestamp[30]="";
	char end_timestamp[30] = "";
	int ret;
	//清除当天的结算数据
	ret=GetLogicDate(logic_date);
	if(ret)
	{
		writelog(LOG_ERR,"Get logic date error,errcode=[%d]",ret);
		return 	ret;
	}
	strcpy(begin_timestamp,logic_date);
	strcpy(end_timestamp,logic_date);
	strcat(begin_timestamp,"000000000000");
	strcat(end_timestamp,  "235959999999");
	//printf("生成可疑报表[%s][%s]!\n",begin_timestamp,end_timestamp);
	sprintf(sqlcmd,"DELETE FROM  YKT_CUR.T_TIF_REPORT_POS_ERR WHERE BALANCE_DATE='%s' ",logic_date);
	ret = dynamic_execute_sql(sqlcmd,NULL);
	if(ret)
	{
		if(DB_NOTFOUND != ret)
		{
			writelog(LOG_INFO,"删除POS异常交易报表错误");
			return E_DB_T_REPORT_DEVICE_MEAL_D;
		}
	}
	sprintf(sqlcmd,"insert into ykt_cur.t_tif_report_pos_err(balance_date,operate_date,shop_id,shop_name, \
	device_id,device_name,DOUBTFUL_TOTAL,DOUBTFUL_AMT,DOUBTFUL_SUCCESS,DOUBTFUL_SUCC_AMT,BLK_TOTAL,BLK_TOTAL_AMT,OTHER_TOTAL,OTHER_AMT) \
	select '%s', t.tx_date,s.shop_id,p.shop_name,d.device_id,d.device_name, \
	count(case when tx_mark = 2 then 1 else null end),round(sum(case when tx_mark = 2 then t.amount else 0 end)/100.0,2),null,null, \
	count(case when tx_mark = 0 then 1 else null end),round(sum(case when tx_mark = 0 then t.amount else 0 end)/100.0,2), \
	count(case when tx_mark not in(0,2) then 1 else null end),round(sum(case when tx_mark not in (0,2) then t.amount else 0 end)/100.0,2) \
	from ykt_cur.t_tif_rcvdtl t,ykt_cur.t_pif_device d,ykt_cur.t_cif_shop_pos s,ykt_cur.t_cif_shop p \
	where t.col_timestamp between  '%s' and '%s' \
	and t.status !='3' and t.device_id=d.devphy999_id and d.state_id<5 \
	and s.device_id=d.device_id and s.begin_date <= t.tx_date and s.end_date >= t.tx_date \
	and s.begin_time <= t.tx_time and s.end_time >= t.tx_time and s.shop_id=p.shop_id \
	group by d.device_id,d.device_name,t.tx_date,s.shop_id,p.shop_name ",logic_date,begin_timestamp,end_timestamp);

/*
	select '%s',t.tx_date,s.shop_id,p.shop_name,d.device_id,d.device_name,count(*),round(sum(t.amount)/100.0,2) \
	from ykt_cur.t_tif_rcvdtl t,ykt_cur.t_pif_device d,ykt_cur.t_cif_shop_pos s,ykt_cur.t_cif_shop p \
	where t.col_timestamp between '%s' and '%s' \
	and t.tx_mark=2 and t.device_id=d.devphy999_id and d.state_id<5 \
	and s.device_id=d.device_id and s.begin_date <= t.tx_date and s.end_date >= t.tx_date \
	and s.begin_time <= t.tx_time and s.end_time >= t.tx_time and s.shop_id=p.shop_id \
	group by d.device_id,d.device_name,t.tx_date,s.shop_id,p.shop_name",logic_date,begin_timestamp,end_timestamp);
*/	
	ret = dynamic_execute_sql(sqlcmd,NULL);
	if(ret)
	{
		if(DB_REPEAT != ret)
		{
			writelog(LOG_INFO,"生成POS异常交易报表错误");
			return E_DB_T_REPORT_DEVICE_MEAL_I;
		}
	}
	return 0;
}
static int do_update_balance_step(int *step)
{
	int ret;
	char buffer[20] = "";
	(*step)++;
	sprintf(buffer,"%d",*step);
	ret=SetParameter(GLOBE_FLAG_BALANCE,buffer);
	if(ret)
	{
		writelog(LOG_ERR,"Write syspara err [%d]",ret);
		return E_CHANGE_FLAG;
	}
	ret=db_commit();
	if(ret)
	{
		writelog(LOG_ERR,"db_commit ret[%d]",ret);
		db_rollback();
		return ret;
	}
	//printf("balance in step [%d]\n",*step);
	return 0;
}

int  main()
{

	int ret=0;
	int balance_step = 0;
	//char buffer[50+1]="";

	openlog("bala",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL4);

	TIniFile tf;
	char db_name[32]="";
	char db_user[32]="";
	char db_password[32]="";
	char db_authtype[10] = "";
	char time[10]="";
	char date[12]="";
	char inifile[256]="";
	char *p=getenv("BIN_PATH");
	if(p==NULL)
	{
	   	writelog(LOG_ERR,"Cann't get env HOME PATH\n");
	   	return -1;
	}
	sprintf(inifile,"%s/bala.ini",p);
	if (!tf.Open(inifile))
	{
	   	writelog(LOG_ERR,"Cann't open ini file,file=[%s]\n",inifile);
	   	return -1;
	}
	if(-1 == tf.ReadString("DB","AUTH_TYPE","env",db_authtype,sizeof db_authtype))
	{
		writelog(LOG_ERR,"cann't read from ini file!");
	}
	if(strcmp(db_authtype,"env")==0)
	{
		if((p = getenv("YKT_DBNAME")) !=NULL)
		{
			strncpy(db_name,p,sizeof(db_name) -1 );
		}
		if((p = getenv("YKT_USER")) !=NULL)
		{
			strncpy(db_user,p,sizeof(db_user) - 1);
		}
		if((p = getenv("YKT_PWD")) != NULL)
		{
			strncpy(db_password,p,sizeof(db_password) - 1);
		}
		
	}
	else if(strcmp(db_authtype,"config") == 0)
	{
		if(-1==tf.ReadString("DB", "DB_NAME", "yktbase", db_name,sizeof(db_name)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
		if(-1==tf.ReadString("DB", "DB_USER", "yktinst1", db_user,sizeof(db_user)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
		if(-1==tf.ReadString("DB", "DB_PASSWORD", "fdksykt", db_password,sizeof(db_password)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
	}
	else
	{
		writelog(LOG_ERR,"unknown auth type!");
	}
	tf.Close();

	getdbtime(time);
	getdbdate(date);
	int cnt=0;
	while(1)
	{
		ret=SQLConnectToServer(db_name,db_user,db_password);
		if (ret)
	   	{
	   		writelog(LOG_ERR,"Cann't connect to database,errcode=[%d],db_name=[%s],db_user=[%s]",ret,db_name,db_user);;
			sleep(10);
			if(cnt<=3)
			{
				cnt++;
				continue;
			}
			else
			{
		   		printf("%s:",date);
		   		printf("%s bala:",time);
				printf("连接数据库失败!\n");
		      		return(-100);
			}
	   	}
		else
		{
			printf("%s:",date);
			printf("%s bala:",time);
			printf("连接数据库成功!\n");
			break;
		}

	}
     	//停止入帐，改数据库全局参数表中的入帐标志
	ret=StopInBalance(&balance_step);
	if(ret)
	{
		PrintBalaMessage("停止入帐业务失败!");
	   	writelog(LOG_ERR,"Update balance flag failed!");
		db_rollback();
		return ret;
	}
	else
	{
		PrintBalaMessage("停止入帐业务成功!");
	   	writelog(LOG_INFO,"停止入帐业务成功!");
	}
	if(balance_step == 1)
	{
		//生成 部门账户交易情况表--领导查询需要
		ret=Db_t_tif_report_depttrade_generate();
		if(ret)
		{
			PrintBalaMessage("生成部门交易情况报表失败!");
			writelog(LOG_ERR,"Generate dept trade report table failed!");
		}
		else
		{
			PrintBalaMessage("生成部门交易情况表成功!");
		   	writelog(LOG_INFO,"生成部门交易情况表成功!");
		}
		//按照操作员组进行现金的划拨工作,统计组的当天金额
		ret=PayInCashForOperateGroup();
		if(ret)
		{
			PrintBalaMessage("生成操作员组划拨表失败!");
			writelog(LOG_ERR,"生成操作员组划拨表失败!");
		}
		else
		{
			PrintBalaMessage("生成操作员组划拨表成功!");
			writelog(LOG_INFO,"生成操作员组划拨表成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
	if(balance_step == 2)
	{
		//每天结算商户的固定佣金，划拨给大学城商户
		ret=Bala_rakeoff_transfer_day();
		if(ret)
		{
			PrintBalaMessage("商户佣金划拨失败!");
			writelog(LOG_ERR,"Bala_rakeoff_transfer_day failed!");
			db_rollback();
			return ret;
		}
		else
		{
			PrintBalaMessage("商户佣金划拨成功!");
			writelog(LOG_INFO,"商户佣金划拨成功!");
		}
		//每月按照固定日期，返还提成比例给商户
		ret=Bala_agio_transfer_month();
		if(ret)
		{
			PrintBalaMessage("每月返还商户提成比例失败!");
			writelog(LOG_ERR,"每月返还商户提成比例失败!");
			db_rollback();
			return ret;
		}
		else
		{
			PrintBalaMessage("每月返还商户提成比例成功!");
			writelog(LOG_INFO,"每月返还商户提成比例成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
	if(balance_step == 3)
		{
		//批量冻结账户
		ret=DoFrozenCustomer();
		if(ret)
		{
			PrintBalaMessage("批量冻结异常客户失败!");
			writelog(LOG_ERR,"批量冻结异常客户失败!");
			//return ret;
		}
		else
		{
			PrintBalaMessage("批量冻结异常客户成功!");
			writelog(LOG_INFO,"批量冻结异常客户成功!");
		}

		//检查个人账户
		ret=CheckPersonAccount();
		if(!(ret==E_TOTAL_ACC||ret==0))
		{
			PrintBalaMessage("生成个人对帐不符报表数据失败!");
			writelog(LOG_ERR,"生成个人对帐不符报表数据失败!");
		}
		else
		{
			PrintBalaMessage("生成个人对帐不符报表数据成功!");
			writelog(LOG_INFO,"生成个人对帐不符报表数据成功!");
		}
		//检查总账是否平衡
		ret=CheckTotalAccount();
		if(!(ret==E_TOTAL_ACC||ret==0))
		{
			writelog(LOG_ERR,"Check total account failed!errcode=[%d]",ret);
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
//	
//		ret=CardDBNotBalance();
//		if(!(ret==E_DB_VIEW_DBCARD_N||ret==0))
//		{
//			PrintBalaMessage("生成卡库不平报表数据失败!");
//			writelog(LOG_ERR,"Create table that card and datebase is not equal failed!");
//		}
//		else
//		{
//			PrintBalaMessage("生成卡库不平报表数据成功!");
//		}
	}
	if(balance_step == 4)
	{
		//备份交易明细表和流水表
		ret=BackupData();
		if(ret)
		{
			PrintBalaMessage("备份交易明细/交易流水失败!");
			writelog(LOG_ERR,"Backup tradelog table and tradeserial table failed!");
			return ret;
		}
		else
		{
			PrintBalaMessage("备份交易明细/交易流水成功!");
			writelog(LOG_INFO,"备份交易明细/交易流水成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
	if(balance_step == 5)
	{
		//备份帐户表，更新前次帐户余额
		ret=UpdateAccount();
		if(ret)
		{
			PrintBalaMessage("更新账户表失败!");
			writelog(LOG_ERR,"Backup account table failed!");
			return ret;
			//return ret;
		}
		else
		{
			PrintBalaMessage("更新账户表成功!");
			writelog(LOG_INFO,"更新账户表成功!");
		}
		//生成运行情况报表
		ret=CreateActiveReport();
		if(ret)
		{
			PrintBalaMessage("生成运行情况报表数据失败!");
			writelog(LOG_ERR,"Create active report table failed!");
		}
		else
		{
			PrintBalaMessage("生成运行情况报表数据成功!");
			writelog(LOG_INFO,"生成运行情况报表数据成功!");
		}
		//生成操作情况报表
		ret=CreateOperReport();
		if(ret)
		{
			PrintBalaMessage("生成操作情况报表数据失败!");
			writelog(LOG_ERR,"Create operate report table failed!");
		}
		else
		{
			PrintBalaMessage("生成操作情况报表数据成功!");
			writelog(LOG_INFO,"生成操作情况报表数据成功!");
		}
		//生成科目交易情况报表
		ret=CreateSubjectTradeReport();
		if(ret)
		{
			PrintBalaMessage("生成科目交易情况报表失败!");
			writelog(LOG_ERR,"Create subject trade report table failed!");
		}
		else
		{
			PrintBalaMessage("生成科目交易情况报表成功!");
			writelog(LOG_INFO,"生成科目交易情况报表成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
	if(balance_step == 6)
	{
		//生成商户报表
		ret=CreateShopReport();
		if(ret)
		{
			PrintBalaMessage("生成普通商户报表数据失败!");
			writelog(LOG_ERR,"Create shop balance table failed!");
		}
		else
		{
			PrintBalaMessage("生成普通商户报表数据成功!");
			writelog(LOG_INFO,"生成普通商户报表数据成功!");
		}
		//生成商户报表
		ret=CreateShopReport_01();
		if(ret)
		{
			PrintBalaMessage("生成普通商户报表01数据失败!");
			writelog(LOG_ERR,"Create shop balance table failed!");
		}
		else
		{
			PrintBalaMessage("生成普通商户报表01数据成功!");
		}
		
		//生成分设备、餐次报表
		ret=CreateShopDevMealReport();
		if(ret)
		{
			PrintBalaMessage("生成商户分餐次报表数据失败!");
			writelog(LOG_ERR,"Create shop device meal table failed!");
		}
		else
		{
			PrintBalaMessage("生成商户分餐次报表数据成功!");
			writelog(LOG_INFO,"生成商户分餐次报表数据成功!");
		}
		ret = do_create_devmeal_01();
		if(ret)
		{
			PrintBalaMessage("生成商户分餐次01报表数据失败!");
			writelog(LOG_ERR,"Create shop device meal 01 table failed!");
		}
		else
		{
			PrintBalaMessage("生成商户分餐次01报表数据成功!");
		}
		ret = do_create_pos_error();
		if(ret)
		{
			PrintBalaMessage("生成POS可疑交易报表数据失败!");
			writelog(LOG_ERR,"Create pos_err table failed!");
		}
		else
		{
			PrintBalaMessage("生成POS可疑交易报表数据成功!");
		}
		//生成资产负债报表
		ret=CreateRichDebtReport();
		if(ret)
		{
			PrintBalaMessage("生成资产负债报表数据失败!");
			writelog(LOG_ERR,"Create balance sheet failed!");
		}
		else
		{
			PrintBalaMessage("生成资产负债报表数据成功!");
			writelog(LOG_INFO,"生成资产负债报表数据成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
	if(balance_step == 7)
	{
		ret=DelTradeDate();
		if(ret)
		{
			PrintBalaMessage("清理当日交易明细/交易流水失败!");
			writelog(LOG_ERR,"Delete tradelog and tradeserial table today failed!");
			return ret;
		}
		else
		{
			PrintBalaMessage("清理当日交易明细/交易流水成功!");
			writelog(LOG_INFO,"清理当日交易明细/交易流水成功!");
		}
		ret = do_update_balance_step(&balance_step);
		if(ret)
			return ret;
	}
	if(balance_step == 8)
	{
		ret=ChangeConfigPara();
		if(ret)
		{
			PrintBalaMessage("更新全局参数失败!");
			writelog(LOG_ERR,"Change parameter of system next day failed!");
			return ret;
		}
		else
		{
			PrintBalaMessage("更新全局参数成功!");
			writelog(LOG_INFO,"更新全局参数成功!");
		}
		ret=Startup();
		if(ret)
		{
			PrintBalaMessage("启动服务失败!");
			writelog(LOG_ERR,"System start service faild!");
			return ret;
		}
		else
		{
			PrintBalaMessage("结算完毕，启动服务成功!");
			writelog(LOG_INFO,"结算完毕，启动服务成功!");
	  		writelog(LOG_INFO,"Automatic balance success!");
		}
	}
	closelog();
	SQLExit();
	return 0;
}

long SQLConnectToServer(char *db_name,char *db_user,char *db_password)
{
   EXEC SQL BEGIN DECLARE SECTION;
	char szConnectToDatabase[32] = "";
	char szConnectToLogin[32] = "";
	char szConnectToPassword[32] = "";
   EXEC SQL END DECLARE SECTION;

	strcpy(szConnectToDatabase,db_name);
   	strcpy(szConnectToLogin,db_user);
	strcpy(szConnectToPassword,db_password);


   // attempt connection to db2-Server
#ifdef ESQL_DB2	
	EXEC SQL CONNECT TO :szConnectToDatabase USER :szConnectToLogin USING :szConnectToPassword;
#else
	EXEC SQL CONNECT :szConnectToLogin IDENTIFIED BY :szConnectToPassword USING :szConnectToDatabase;
#endif

	if (SQLCODE != 0)
	{
		return(SQLCODE);
	}
	return 0;
}


void SQLExit()
{
#ifdef ESQL_DB2
	EXEC SQL CONNECT RESET;
#else
	EXEC SQL COMMIT WORK RELEASE;
#endif
}

void PrintBalaMessage(char *buffer)
{
	char time1[10]="";
	char date1[10]="";
	getdbtime(time1);
	getdbdate(date1);

	printf("%s:",date1);
	printf("%s bala:",time1);
	printf("%s",buffer);
	printf("\n");
}

