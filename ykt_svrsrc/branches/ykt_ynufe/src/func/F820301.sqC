/* ----------------------------------------------------------
 * 程序名称：F820301.sqc
 * 创建日期：2004-8-4 09：50
 * 程序作者：黄勋章
 * 版本信息：1.0.0.0
 * 程序功能：根据输入信息进行操作员的添加、删除、修改
            返回  : int 0 表示成功处理，其他作为处理失败
            参数  : TRUSERID *handle 本请求数据的通讯请求端标识
            参数  : ST_PACK *rPack 业务处理请求数据
            参数  : int *iRetCode 处理结果的返回代码，0表示成功，其他就是处理失败，在本业务处理函数调用之前，已经被初始化为0
            参数  : char *szMsg 处理结果的返回信息，在本业务处理函数调用之前，已经被初始化为空""
 * ----------------------------------------------------------
 * 修改日期: 2004-09-08 16：20
 * 修改人员: 蔡扬
 * 修改描述: 修改规范
 * 版本信息：1.0.0.1
 * 备注信息
 */

#define _IN_SQC_				// 每个SQC源文件必须包括本定义，以激活 gmsqc.h中的 ：EXEC SQL WHENEVER SQLERROR CALL SQLErrorHandler();

ESQL #include "fdsqc.h"
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubfunc.h"
ESQL #include "dictionary.h"

EXEC SQL INCLUDE SQLCA;


int F820301(TRUSERID * handle, int iRequest, ST_PACK * rPack, int *iRetCode, char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;

		char v_oper_code[10+1] = "";
		char v_oper_name[150+1] = "";
		char v_phone[40+1] = "";
		char v_mobile[40+1] = "";
		char v_addr[150+1] = "";
		char v_zip[6+1] = "";
		char v_email[60+1] = "";
		char v_if_station[1+1] = "";
		char v_if_access[1+1] = "";
		char v_menu_set[800+1] = "";
		char v_func_set[600+1] = "";
		char v_pwd[32+1] = "";
		char v_status[1+1] = "";
		char v_tmp[20+1] = "";
	//	char c_menu_set[100+1] = "";
		char c_func_set[100+1] = "";
		char v_mpwd[32+1] = "";
		char status[2]="";
		char temp[200+1] = "";

		sqlint16 indicator=0;

	EXEC SQL END DECLARE SECTION;

		Strncpy_t(v_oper_code, rPack->scust_no, sizeof(v_oper_code));
		Strncpy_t(v_oper_name, rPack->sname, sizeof(v_oper_name));
		Strncpy_t(v_phone, rPack->sphone, sizeof(v_phone));
		Strncpy_t(v_mobile, rPack->sphone3, sizeof(v_mobile));
		Strncpy_t(v_addr, rPack->saddr, sizeof(v_addr));
		Strncpy_t(v_zip, rPack->spost_code, sizeof(v_zip));
		Strncpy_t(v_email, rPack->semail, sizeof(v_email));
		Strncpy_t(v_if_station, rPack->sstatus1, sizeof(v_if_station));
		Strncpy_t(v_if_access, rPack->sstatus2, sizeof(v_if_access));
		Strncpy_t(temp, rPack->vsvarstr0, sizeof(temp));	//geng test
		sprintf(v_menu_set, temp);
		Strncpy_t(temp, rPack->vsvarstr1, sizeof(temp));
		strcat(v_menu_set,temp);
		Strncpy_t(temp, rPack->vsvarstr2, sizeof(temp));
		strcat(v_menu_set, temp);
		Strncpy_t(temp, rPack->vsvarstr3, sizeof(temp));
		strcat(v_menu_set, temp);
		Strncpy_t(c_func_set, (char*)rPack->usset1, sizeof(c_func_set));
		Strncpy_t(v_pwd, rPack->stx_pwd, sizeof(v_pwd));
		Strncpy_t(v_status, rPack->sstatus3, sizeof(v_status));

		//加密前台传来的密码后放入数据库
		char key[17] = "";
		int ret = 0;

		Strncpy_t(key,v_oper_code,sizeof(key));
		EncodePwd(key, v_pwd, v_mpwd, 0);
		//strcpy(v_mpwd,v_pwd);

	//UssetConvert(1, c_menu_set, v_menu_set, 100, 800);
	UssetConvert(1, c_func_set, v_func_set, 100, 600);
	strcpy(status,OPERATOR_UNREG);
	if ('1' == rPack->sstatus0[0])	//添加操作员
	{

		//先检查操作员是否已存在
		EXEC SQL SELECT oper_name,status INTO :v_tmp:indicator,:v_status:indicator
            FROM YKT_CUR.T_PIF_Operator WHERE oper_code =:v_oper_code;
		if (SQLCODE)
		{						//正确，没有插入重复记录，开始插入新数据
			db_chk_err(__FILE__,__LINE__,&sqlca);
			if(DB_NOTFOUND==SQLCODE)
			{
				Strncpy_t(v_status, OPERATOR_REG, sizeof(v_status));
				EXEC SQL INSERT INTO
				YKT_CUR.T_PIF_Operator(oper_code, oper_name, phone, mobile, addr, zip, email, if_station, if_access, menu_set, func_set, pwd, status)
				VALUES(:v_oper_code,:v_oper_name,:v_phone,:v_mobile,:v_addr,:v_zip,:v_email,:v_if_station,:v_if_access,:v_menu_set,:v_func_set,:v_mpwd,:v_status);
				if( SQLCODE)
				{
					db_chk_err(__FILE__,__LINE__,&sqlca);
					*iRetCode = E_DB_OPERATOR_I;
					goto L_Ret;
				}
			}
			else
			{
	            *iRetCode = E_DB_OPERATOR_R;
				goto L_Ret;
			}

		}
		else
		{
			// 如果该操作员已经被注销则报错
			/*
            if (strcmp(status,OPERATOR_UNREG) == 0 )
            {
                *iRetCode = E_DB_OPERATOR_RE;
            }
            */
			*iRetCode = E_DB_OPERATOR_RE;
			goto L_Ret;
		}
	}
	else if ('2' == rPack->sstatus0[0])
	{							//修改操作员信息
		//先检查操作员是否存在
		EXEC SQL SELECT oper_name INTO:v_tmp FROM YKT_CUR.T_PIF_Operator WHERE oper_code =:v_oper_code and status !=:status;
		if (SQLCODE)
		{						//存在，正确，继续处理，开始修改信息
			db_chk_err(__FILE__,__LINE__,&sqlca);
			if ( DB_NOTFOUND==SQLCODE )
			{						//不存在，错误处理
				*iRetCode = E_DB_OPERATOR_N;
			}
			else
			{
				*iRetCode = E_DB_OPERATOR_R;
			}
			goto L_Ret;
		}
		EXEC SQL UPDATE YKT_CUR.T_PIF_Operator
			SET oper_name =:v_oper_name, phone =:v_phone,
			mobile =:v_mobile, addr =:v_addr, zip =:v_zip,
			email =:v_email, if_station =:v_if_station,
			if_access =:v_if_access,
			menu_set =:v_menu_set,
			func_set =:v_func_set
			WHERE oper_code =:v_oper_code and status!=:status;
		if( SQLCODE)
		{
			*iRetCode = E_DB_OPERATOR_U;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			goto L_Ret;
		}

	}
	else if (rPack->sstatus0[0] == '3')
	{							//删除操作员,只该操作员状态
		//先检查操作员是否存在
		EXEC SQL SELECT oper_name INTO:v_tmp FROM YKT_CUR.T_PIF_Operator WHERE oper_code =:v_oper_code and status !=:status;
		if (SQLCODE)
		{						//存在，正确，继续处理，开始修改信息
			db_chk_err(__FILE__,__LINE__,&sqlca);
			if ( DB_NOTFOUND==SQLCODE )
			{						//不存在，错误处理
				*iRetCode = E_DB_OPERATOR_N;
			}
			else
			{
				*iRetCode = E_DB_OPERATOR_R;
			}
			goto L_Ret;
		}
		Strncpy_t(v_status, OPERATOR_UNREG, sizeof(v_status));
		EXEC SQL UPDATE YKT_CUR.T_PIF_Operator
			SET  status=:v_status
			WHERE oper_code =:v_oper_code and status!=:status;
		if(SQLCODE)
		{
			*iRetCode = E_DB_OPERATOR_U;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			goto L_Ret;
		}
	}
	else
	{
		*iRetCode = E_NO_THIS_SYMBOL;
		goto L_Ret;
	}
	*iRetCode = 0;
	return 0;
L_Ret:
	return -1;
}
