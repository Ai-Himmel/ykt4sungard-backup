            /* --------------------------------------------
 * 程序名称: F930031.sqc
 * 创建日期: 9 17 2004
 * 程序作者: 闻剑
 * 版本信息: 1.0.0.0
 * 程序功能:  收集消费流水入账该程序只适用于单进程
 * --------------------------------------------*/

/* --------------------------------------------
 * 程序名称: F930031.sqc
 * 创建日期: 12 01 2009
 * 程序作者:xlh
 * 版本信息: 1.0.0.0
 * 程序功能:  水控流水
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <stdio.h>
ESQL #include <string.h>
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "dbfunc.h"
ESQL #include "dbfunc_foo.h"
ESQL #include "account.h"
ESQL #include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

static int process(InAcc * IA, T_t_tif_tradeserial * p)
{
    int ret = 0;
    //根据卡号和钱包号得到消费者账号(借方)
    IA->iMainDevId = p->maindevice_id;                  //工作站标示
    IA->iDevId = p->device_id;                          //设备ID号
    IA->iSerialNo = p->serial_no;                       //流水号
    IA->iTradeNo = p->serial_type;                      //交易代码
    strcpy(IA->sTxDate, p->operate_date);               //交易日期
    strcpy(IA->sTxTime, p->operate_time);               //交易时间
    strcpy(IA->sTxCollectDate, p->collect_date);        //采集日期
    strcpy(IA->sTxCollectTime, p->collect_time);        //采集时间
    strcpy(IA->sTxAccDate, p->enteract_date);           //记帐日期
    strcpy(IA->sTxAccTime, p->enteract_time);           //记帐时间
    strcpy(IA->sMdeOper,p->oper_code);			//操作员
    strcpy(IA->sChkOper,p->reserve_1);			//复核操作员

    IA->iTxCnt = p->trade_count;                        //交易次数
    IA->iUseCardFlag = IA->iUseCardFlag;                //无卡交易
    IA->dInCardBala = p->in_balance;                    //入卡值
    IA->dOutCardBala = -1;                              //出卡值

    // 修改借方和贷方的帐户余额, 记会计分录入帐
    ret = AccountProcess(IA);
    if (ret)
    {
        writelog(LOG_ERR,"AccountProcess ret[%d]",ret);
        return ret;
    }
    p->out_balance = p->in_balance - p->trade_fee;                  //出卡值
    return 0;
}


static int update_extposdtl_status()
{
    EXEC SQL BEGIN DECLARE SECTION;
    sqlint32        ho_cnt=0;
    EXEC SQL END DECLARE SECTION;
    char systime[7]="";

    getsystime(systime);
    //每日23点处理入账失败流水
    if(strncmp(systime,"23",2)!=0)
        return 0;
    writelog(LOG_DEBUG,"更新入账失败的流水");
    EXEC SQL
        select count(*) into :ho_cnt  from ykt_cur.t_extposdtl  where status='2' and errcode <>100172;
    if(SQLCODE)
    {
        db_chk_err(__FILE__,__LINE__,&sqlca);
        writelog(LOG_ERR,"select rcvdtl status err");
        return E_DB_RCVDTL_R;
    }
    if(ho_cnt==0)
        return 0;
    EXEC SQL
        update ykt_cur.t_extposdtl set status='1' where status='2'  and errcode <>100172;
    if(SQLCODE!=0&&SQLCODE!=DB_NOTFOUND)
    {
        db_chk_err(__FILE__,__LINE__,&sqlca);
        writelog(LOG_ERR,"update t_extposdtl status err");
        return E_DB_RCVDTL_U;
    }
    writelog(LOG_DEBUG,"t_extposdtl status updated rows:%d",ho_cnt);
    return 0;
}

static int getdatatTradeserial(T_t_tif_tradeserial *pTradeserial,T_t_extposdtl *extposdtl)
{
    int ret=0;
    pTradeserial->other_seri_no=extposdtl->devseqno;						//上传端流水号
    pTradeserial->tmark=extposdtl->transmark;								//999交易标记
    pTradeserial->maindevice_id = extposdtl->sysid;							//上传工作站标识(前置机注册号)
    des2src(pTradeserial->devphy999_id,extposdtl->devphyid);				//物理设备ID
    des2src(pTradeserial->dev_auth,"0");			                		//终端设备授权号
    //des2src(pTradeserial->crc,pRcvdtl->crc);								//CRC校验
    pTradeserial->card_id = extposdtl->cardno;								//交易卡号
    pTradeserial->purse_id = extposdtl->purseno;							//消费钱包号
    pTradeserial->in_balance =extposdtl->cardbefbal;						//入卡金额
    pTradeserial->out_balance = extposdtl->cardaftbal;					//出卡金额
    pTradeserial->trade_fee = extposdtl->amount;						//本次消费金额
    pTradeserial->trade_count = extposdtl->cardcnt;							//当前卡中帐户消费次数(累计使用次数)
    pTradeserial->serial_type = extposdtl->transcode;							//交易代码
    //pTradeserial->boardfee = extposdtl->manage_fee/100.0;							//搭伙费
    des2src(pTradeserial->operate_date,extposdtl->transdate);					//发生日期(格式化输入的日期)
    des2src(pTradeserial->operate_time,extposdtl->transtime);					//发生时间(格式化输入的时间)
    des2src(pTradeserial->collect_date,extposdtl->coldate);				//发生时间(格式化输入的时间)
    des2src(pTradeserial->collect_time,extposdtl->coltime);			//发生时间(格式化输入的时间)
    //pTradeserial->condition_id = extposdtl->fee_code;							// 收费科目
    des2src(pTradeserial->oper_code,"system");
    return 0;


}

int main(int argc,char *argv[])
{
    EXEC SQL BEGIN DECLARE SECTION;
    sqlint32        ho_serial_no=0;
    char    		ho_tx_date[8+1]="";
    char    		ho_tx_time[6+1]="";
    char    		ho_device_id[20+1]="";
    sqlint32        ho_card_no=0;
    sqlint32        ho_tx_code=0;
    sqlint16 	ho_idr;
    EXEC SQL END DECLARE SECTION;
    int ret=0;
    int bConnect=0;
    double dUniqno=0;
    char sysdate[11]="";
    char systime[9]="";
    int shpid=0;
    char *p=NULL;
    char dbname[256]="";
    char dbuser[256]="";
    char dbpwd[256]="";
    char emsg[256]="";
    char param[256]="";
    char expiredate[9] ="";
    int   iTime=0;
    int   iOldTime=0;
    int errcode=0;
    int i=0;
    memset(systime,0,sizeof(systime));
    T_t_tif_tradeserial		tTradeserial;					//卡操作流水表
    T_t_extposdtl		extposdtl;
    T_t_pif_card 		tCard;
    T_t_pif_device tDevice;
    InAcc IA;
    T_t_cif_shop tShop;
    T_t_aif_account tShopAcct;
	T_t_pif_errcode pif_errcode;

    // 打开日志
    openlog("extposdtlacc",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL4);
      writelog(LOG_ERR,"start extposdtlacc process.");
    //打开数据库连接
    p=getenv("YKT_DBNAME");
    if(p==NULL)
    {
        perror("get ENV VAR YKT_DBNAME ERR\n");
        writelog(LOG_ERR,"get ENV VAR YKT_DBNAME ERR");
        exit(1);
    }
    des2src(dbname,p);
    p=getenv("YKT_USER");
    if(p==NULL)
    {
        perror("get ENV VAR YKT_USER ERR\n");
        writelog(LOG_ERR,"get ENV VAR YKT_USER ERR");
        exit(2);
    }
    des2src(dbuser,p);
    p=getenv("YKT_PWD");
    if(p==NULL)
    {
        perror("get ENV VAR YKT_PWD ERR\n");
        writelog(LOG_ERR,"get ENV VAR YKT_PWD ERR");
        exit(3);
    }
    des2src(dbpwd,p);

    ret=db_connect(dbname,dbuser,dbpwd);
    if(ret)
    {
        db_chk_err(__FILE__,__LINE__,&sqlca);
        writelog(LOG_ERR,"connect to database err dbname[%s]",dbname);
        perror("connect db ERR");
        exit(1);
    }
    //交易正常则进行下面的处理
    bConnect=1;
    while(1)
    {
        ret=0;
        if(!bConnect)
        {
            ret=db_connect(dbname,dbuser,dbpwd);
            if(ret)
            {
                db_chk_err(__FILE__,__LINE__,&sqlca);
                writelog(LOG_ERR,"connect to database err dbname[%s]",dbname);
                ret=E_DB_DBCONN;
                printf("connect to %s failed\n",dbname);
                sleep(10);
                continue;
            }
            bConnect=1;
        }
        //判断是否是结帐时刻,如果是则等待处理
        ret=GetParameter(GLOBE_FLAG_BALANCE,param);
        if(ret)
        {
            writelog(LOG_ERR,"Read syspara err [%d]",ret);
            goto EXIT;
        }
        if(strncmp(param,"0",1)!=0)
        {
            sleep(30);
            continue;
        }
        //任务调度
        getsystime(systime);

        iTime=atoi(systime);
    //    iTime=iTime%10000/100+1;//计算得到分钟
        iTime=iTime/10000%100;
      if(iOldTime!=iTime)
        {
            //每次第1分钟调用一次update_rcvdtl_status
            if((6==iTime) || (23==iTime))
            {
                iOldTime=iTime;
                ret=update_extposdtl_status();
                if(ret)
                {
                    writelog(LOG_ERR,"update_status ret[%d]",ret);
                    goto EXIT;
                }
				 ret=db_commit();
                 if(ret)
                {
                ret=E_DB_COMMIT;
                writelog(LOG_ERR,"db_commit ret[%d]",ret);
                goto EXIT;
                 }
                continue;
            }

        }

        ho_serial_no=0;
        ho_card_no=0;
        ho_tx_code=0;
        memset(ho_tx_date,0,sizeof(ho_tx_date));
        memset(ho_tx_time,0,sizeof(ho_tx_time));
        memset(ho_device_id,0,sizeof(ho_device_id));
        EXEC SQL
            SELECT DEVSEQNO,TRANSDATE,TRANSTIME,DEVPHYID,CARDNO,TRANSCODE
            INTO :ho_serial_no:ho_idr,
                 :ho_tx_date:ho_idr,
                 :ho_tx_time:ho_idr,
                 :ho_device_id:ho_idr,
                 :ho_card_no:ho_idr,
                 :ho_tx_code:ho_idr
                     FROM YKT_CUR.T_EXTPOSDTL
                     WHERE STATUS='1' and rownum=1;
        if(SQLCODE)
        {
            db_chk_err(__FILE__,__LINE__,&sqlca);

            if(DB_NOTFOUND==SQLCODE)
            {
                //如果 没有数据则等待10秒钟,同时更新入账失败的流水表的状态，重新入账
                sleep(10);
                continue;
            }
            else
            {
                ret=E_DB_EXTPOSDTL_R;
                writelog(LOG_ERR,"extposdtlacc err");
                goto EXIT;
            }
        }
        trim(ho_tx_date);
        trim(ho_tx_time);
        trim(ho_device_id);
        memset(&extposdtl,0,sizeof(extposdtl));
        memset(&tTradeserial,0,sizeof(tTradeserial));
		memset(&pif_errcode,0,sizeof(pif_errcode));
        getsysdate(sysdate);
        getsystime(systime);
        des2src(tTradeserial.enteract_time,systime);
        ret=GetLogicDate(tTradeserial.enteract_date);						//业务日期
        if(ret)
        {
            writelog(LOG_ERR,"GetLogicDate  err ret[%d]",ret);
            goto EXIT;
        }
        ret=DB_t_extposdtl_read_lock_by_c1_and_devseqno_and_transdate_and_transtime_and_devphyid_and_cardno_and_transcode(ho_serial_no,ho_tx_date,ho_tx_time,ho_device_id,ho_card_no,ho_tx_code,&extposdtl);
        if(ret)
        {
            writelog(LOG_ERR,"read_lock extposdtl err ret[%d]",ret);
            if(DB_NOTFOUND==ret)
                continue;
            else
            {
                ret=E_DB_EXTPOSDTL_R;
                writelog(LOG_ERR,"extposdtlacc err");
				 DB_t_extposdtl_free_lock_c1();
                goto EXIT;
            }
        }
		 //赋值
         ret=getdatatTradeserial(&tTradeserial,&extposdtl);
        //如果状态不为'1'则不处理
        if(extposdtl.status[0]!='1')
        {
            DB_t_extposdtl_free_lock_c1();
            continue;
        }
        ret = get_devinfo_by_phyid(ho_device_id, &tDevice);
        if (ret)
        {
            writelog(LOG_ERR,"device not found, devphyid[%s]",ho_device_id);
		    extposdtl.status[0]='2';
			extposdtl.errcode=ret;
			DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			des2src(extposdtl.errmsg,pif_errcode.emsg);
            ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
            if(ret)
            {
             ret=E_DB_EXTPOSDTL_U;
             writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
             goto EXIT;
             }
			 DB_t_extposdtl_free_lock_c1();
			 ret=db_commit();
             continue;
        }
          ret =get_shpId_by_devId_date_time(&shpid,tDevice.device_id,ho_tx_date,ho_tx_time,0);
          if (ret)
          {
            writelog(LOG_ERR,"get_shpId_by_devId_date_time ret[%d] devid[%d]devphyid[%s]date[%s]time[%s]",ret,tDevice.device_id,tDevice.dev999_id,sysdate,systime);
			extposdtl.status[0]='2';
			ret=GET_SHPID_ERR;
			extposdtl.errcode=ret;
			DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			des2src(extposdtl.errmsg,pif_errcode.emsg);
            ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
            if(ret)
            {
            ret=E_DB_EXTPOSDTL_U;
            writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
            goto EXIT;
            }	
		    DB_t_extposdtl_free_lock_c1();
			ret=db_commit();
            continue;
           }


        //根据商户ID查询得到商户信息
        ret=DB_t_cif_shop_read_by_shop_id(shpid, &tShop);
        if(ret)
        {
           writelog(LOG_ERR,"read tablet_cif_shop  shpid[%d]",shpid);
          if(DB_NOTFOUND == ret)
           {
             writelog(LOG_ERR,"该商户信息不存在!");
			 extposdtl.status[0]='2';
			  ret=SHOP_REED_ERRY;
			 extposdtl.errcode=ret;
			DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			des2src(extposdtl.errmsg,pif_errcode.emsg);
             ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
             if(ret)
             {
              ret=E_DB_EXTPOSDTL_U;
              writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
              goto EXIT;
             }
		     DB_t_extposdtl_free_lock_c1();
            }
		  ret=db_commit();
          continue;
        }
        //根据客户号和商户主账号类型查询账号表，得到账号
        ret=DB_t_aif_account_read_by_customer_id_and_act_type(tShop.cut_id,ACCTYPE_SHOPMAIN,&tShopAcct);
        if(ret)
        {
            writelog(LOG_ERR,"read_by_customer_id_and_act_type ret[%d]cutid[%d]",ret,tShop.cut_id);
            if(DB_NOTFOUND != ret)
            {
               DB_t_extposdtl_free_lock_c1();
               goto EXIT;
            }
            writelog(LOG_ERR,"该商户帐户不存在!");
			ret=E_DB_SHOP_N;
            extposdtl.errcode = E_DB_SHOP_N;
            extposdtl.status[0]='2';
			DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			des2src(extposdtl.errmsg,pif_errcode.emsg);
            ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
            if(ret)
            {
                ret=E_DB_EXTPOSDTL_U;
                writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
                goto EXIT;
            }
		    ret=db_commit();
            continue;
        }
        memset(&tCard,0,sizeof tCard);
        ret = DB_t_pif_card_read_by_card_id(extposdtl.cardno,&tCard);
        if(ret)
          {
             if(DB_NOTFOUND==ret)
             {
             writelog(LOG_ERR,"交易卡号不存在card[%d]",extposdtl.cardno);
             ret = E_CARDNO_NOT_EXIST;
             }
              else
             {
              ret = E_DB_CARD_R;
             }
            extposdtl.errcode = ret;
            extposdtl.status[0]='4';
			DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			des2src(extposdtl.errmsg,pif_errcode.emsg);
            ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
            if(ret)
            {
                ret=E_DB_EXTPOSDTL_U;
                writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
                goto EXIT;
            }
			 DB_t_extposdtl_free_lock_c1();
		    ret=db_commit();
            continue;
		    
         }
         else
         {
           tTradeserial.customer_id = tCard.cosumer_id;
           //取流水号,从帐处理
           ret=getNewUniqNo(KEYTYPE_TRADESERIAL, &dUniqno);
           if(ret)
           {
             writelog(LOG_ERR,"getNewUniqNo err[%d]",ret);
             goto EXIT;
           }
           tTradeserial.serial_no=D2I(dUniqno);
         }
                //######################################################
        if(ret)
         {
            // 如果错误就不要入账了
            extposdtl.status[0]='4';
            extposdtl.errcode=ret;
			DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			des2src(extposdtl.errmsg,pif_errcode.emsg);
            ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
            if(ret)
            {
             ret=E_DB_EXTPOSDTL_U;
             writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
             goto EXIT;
            }
			 DB_t_extposdtl_free_lock_c1();
		    ret=db_commit();
            continue;
        }
        else
        {

		 	tTradeserial.device_id=tDevice.device_id;
            des2src(IA.sArrInActno[1],tShopAcct.account_id);	// 商户帐户
            IA.iFeeType = 1;
           //      tTradeserial.trade_fee = D4U5(tTradeserial - tTradeserial.last_collect_bala, 2);
            IA.dArrInAmt[0] = tTradeserial.trade_fee;
            //调用入账子模块
            ret=process(&IA,&tTradeserial);
              
           //修改交易流水处理的结果
              if(ret)
		          {	//业务处理失败处理
		          errcode=ret;  
		          db_rollback();					//回滚事务会把游标关闭
		          ret=DB_t_extposdtl_read_lock_by_c1_and_devseqno_and_transdate_and_transtime_and_devphyid_and_cardno_and_transcode(ho_serial_no,ho_tx_date,ho_tx_time,ho_device_id,ho_card_no,ho_tx_code,&extposdtl);
		          if(ret)
		           {
		             writelog(LOG_ERR,"update t_extposdtl err ret[%d]",ret);
		             if(DB_NOTFOUND==ret)
		             {
		                ret=E_DB_EXTPOSDTL_N;
		                continue;
		             }
		             else
		              {
		                ret=E_DB_EXTPOSDTL_R;
		                goto EXIT;
		              }
		           }
		          des2src(extposdtl.accdate,sysdate);
		          des2src(extposdtl.acctime,systime);
		         switch(errcode)
		          {
		            case E_CARDNO_LOST:
		            extposdtl.status[0]='4';
		            break;
		            case E_CARDNO_NOT_EXIST:
		            extposdtl.status[0] ='4';
		            break;
		            default:
		            extposdtl.status[0]='2';                 		//1-未处理2-失败3-成功
		            break;
		           }
		          extposdtl.errcode=errcode;
			    DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			    des2src(extposdtl.errmsg,pif_errcode.emsg);
		          ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
		          if(ret)
		           {
		             ret=E_DB_EXTPOSDTL_U;
		             writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
		             goto EXIT;
		           }
		           DB_t_extposdtl_free_lock_c1();
				   ret=db_commit();
		        }
                else
	            {	//业务处理成功处理
	                
			     for(i=1;i<=IA.iOutTxTypeCnt;i++)
				 {
				  switch(IA.iArrOutTxType[i])
				  {
				     case TXTYPE_TOLL_DEPOSIT:
					 case TXTYPE_TOLL_DEPOSIT_BILL:
					 case TXTYPE_TOLL_DEPOSIT_FUNDBOOK:
					 case TXTYPE_DEDUCT_DEPOSIT:
					 case TXTYPE_RETURN_DEPOSIT:
				     tTradeserial.deposit_fee=IA.dArrOutAmt[i];
				     break;
				     case TXTYPE_PRE_TOLL_BOARD:
					 case TXTYPE_PRE_TOLL_BOARD_BILL:
				     case TXTYPE_PRE_TOLL_BOARD_FUNDBOOK:
					 case TXTYPE_TOLL_BOARD:
					 case TXTYPE_DEDUCT_BOARD:
					 case TXTYPE_RETURN_BOARD:
					 case TXTYPE_RETURN_BOARD_BILL:
				     case TXTYPE_RETURN_BOARD_FUNDBOOK:
					 tTradeserial.boardfee=IA.dArrOutAmt[i];
					 break;
					 case TXTYPE_TOLL_CHARGE:
					 case TXTYPE_TOLL_CHARGE_BILL:
					 case TXTYPE_TOLL_CHARGE_FUNDBOOK:
				     tTradeserial.in_fee=IA.dArrOutAmt[i];
					 break;
				     case TXTYPE_TOLL_CARDCOST:
					 case TXTYPE_TOLL_CARDCOST_BILL:
					 case TXTYPE_TOLL_CARDCOST_FUNDBOOK:
				     tTradeserial.cost_fee=IA.dArrOutAmt[i];
				     break;
					 default:
				     break;
				   }
			     }
	             if(extposdtl.amount  == 0)
	              tTradeserial.serial_state = SERISTAT_NODEBT;
	             else
	             tTradeserial.serial_state=SERISTAT_DEBT;			//已入帐
	             tTradeserial.device_id=tDevice.device_id;
	            //添加交易流水
	            ret = DB_t_tif_tradeserial_add(&tTradeserial);
	            if (ret)
	            {
	             DB_t_extposdtl_free_lock_c1();
	             writelog(LOG_ERR,"DB_t_tif_tradeserial_add ret[%d]",ret);
	             if(DB_REPEAT==ret)
	               ret = E_DB_TRADESERIAL_E;
	             else
	               ret = E_DB_TRADESERIAL_I;
	             goto EXIT;
	            }
		        extposdtl.shopid=tShop.shop_id;
	            des2src(extposdtl.accdate,tTradeserial.enteract_date);
	            des2src(extposdtl.acctime,tTradeserial.enteract_time);
	            extposdtl.status[0]='3';          //1-未处理2-失败3-成功
	          DB_t_pif_errcode_read_by_ecode(extposdtl.errcode,&pif_errcode);
			  des2src(extposdtl.errmsg,pif_errcode.emsg);
	            ret=DB_t_extposdtl_update_lock_by_c1(&extposdtl);
	            if(ret)
	            {
	            ret=E_DB_EXTPOSDTL_U;
	            writelog(LOG_ERR,"DB_t_tif_extposdtl_update_lock_by_c1[%d]",ret);
	            goto EXIT;
	            }
	            DB_t_extposdtl_free_lock_c1();
	         }
       }
        ret=db_commit();
        if(ret)
       {
         ret=E_DB_COMMIT;
         writelog(LOG_ERR,"db_commit ret[%d]",ret);
         goto EXIT;
        }
   }
        //######################################################
EXIT:
    DB_t_extposdtl_free_lock_c1();
    get_errcode_msg(ret,emsg);
    db_rollback();
    writelog(LOG_ERR,"ecode[%d]emsg[%s]",ret,emsg);
    if(E_DB_TRADESERIAL_E==ret)
    {
        writelog(LOG_DEBUG,"getNewUniqNo ");
        ret=getNewUniqNo(KEYTYPE_TRADESERIAL, &dUniqno);
        if(ret)
        {
            writelog(LOG_ERR,"getNewUniqNo err[%d]",ret);
        }
        ret=db_commit();
        if(ret)
        {
            db_rollback();
            writelog(LOG_ERR,"db_commit err[%d]",ret);
        }
    }
    db_disconnect();
EXIT2:
    closelog();
    exit(4) ;
}
