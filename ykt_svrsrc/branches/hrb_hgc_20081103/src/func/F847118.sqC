/* --------------------------------------------
 * 程序名称: F847118sqc
 * 创建日期: Sep 29 2004
 * 程序作者: 耿刚
 * 版本信息: 1.0.0.0
 * 程序功能: 解冻卡
 * --------------------------------------------
 * 修改日期: 2004-11-29
 * 修改人员: 闻剑
 * 修改描述: 修改业务逻辑处理
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"
EXEC SQL INCLUDE SQLCA;

int F847118(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	card_id = 0;
	char		hi_Operator[33+1] = "";
	sqlint32	hi_Cut_id  = 0;
	sqlint32	maindevice_id = 0;
	sqlint32	hi_device_id = 0;
	sqlint32 	hi_state_id1=0;
	sqlint32 	hi_state_id2=0;
	char		hi_enddate[10 + 1] = "";
	char		hi_endtime[8 + 1] = "";
	EXEC SQL END DECLARE SECTION;

	int 	ret = 0;
	char logicdate[11]="";
	char sysdate[11]="";
	char systime[8]="";
	char sCardState[5] = "";
	char dbdate[9]="";
	char dbtime[7]="";
	char volume[13]="";
	char msg[128] = "";
	double	dUniqno = 0;
	int flag = 0;
	int state_normal_flag = 0;
	int webflag = rPack->lvol2;

	T_t_tif_black_sheet black_sheet;
	T_t_tif_tradeserial  tradeserial;
	T_t_tif_meslist tMesList;
	T_t_cif_customer t_cif_customer;
	T_t_tif_register_pay register_pay, register_pay_tmp;
	T_t_tif_register_schoolterm term;
	T_t_tif_registration reg;

	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	ResetNormalCPack(&aPack,0,1);		//用于根据请求包整理本CPACK包的头清空包头位图和包体中的数据

	memset(&tradeserial,0,sizeof(tradeserial));
	memset(&black_sheet,0,sizeof(black_sheet));
	memset(&tMesList,0,sizeof(tMesList));
	memset(&t_cif_customer, 0, sizeof(t_cif_customer));
	memset(&register_pay, 0, sizeof(register_pay));
	memset(&register_pay_tmp, 0, sizeof(register_pay_tmp));
	memset(&term,0,sizeof term);
	memset(&reg,0,sizeof reg);

	card_id = rPack->lvol1;													//卡标识
	hi_Cut_id = rPack->lvol0;													//客户号
	des2src(hi_Operator,rPack->scust_limit);										//操作员号
	maindevice_id = rPack->lvol6;												//上传工作站标识
	hi_device_id = rPack->lvol7;												//采集设备标识
	flag = rPack->lvol2;													// web交易标识
	writelog(LOG_ERR,"cut id =[%d]", hi_Cut_id);

	getsysdate(sysdate);
	getsystime(systime);
	ret=GetLogicDate(logicdate);								//业务日期
	if(ret)
	{
		*pRetCode=ret;
		goto L_RETU;
	}
	des2src(black_sheet.operate_date,sysdate);
	des2src(black_sheet.operate_time,systime);

	//	检查客户信息，判断是否可以冻结
	ret = GetCardState(card_id,sCardState);
	if (ret)
	{
		writelog(LOG_ERR,"card_id[%d]",sCardState);
		*pRetCode = ret;
		goto L_RETU;
	}
	if('2'==sCardState[CARDSTAT_TYPE_REG])
	{
		*pRetCode = E_CARDNO_LOGOUT;
		goto L_RETU;
	}
	if(STATE_FALSE==sCardState[CARDSTAT_TYPE_FREEZE])
	{
		if (1 == flag)	// 如果此卡正常是由其他状态改变为状态1, 则需要写卡, 更新register_pay标志				
		{
			state_normal_flag = 1;
		}
		else
		{
			*pRetCode = E_CARDNO_NOFREEZE;	
			goto L_RETU;	
		}
	}
	des2src(hi_enddate,sysdate);
	des2src(hi_endtime,systime);
	// 查询注册缴费表, 看看这个人的解冻是应该在web上解冻还是在前台解冻
	ret = DB_t_cif_customer_read_by_cut_id(hi_Cut_id, &t_cif_customer);
	if (ret)
	{
		if (DB_NOTFOUND == ret)
		{
			*pRetCode = E_DB_CUSTOMER_N;
		}
		else
		{
			*pRetCode = E_DB_CUSTOMER_R;
		}
		goto L_RETU;
	}

	if(webflag == 1)
	{
		
		ret = DB_t_tif_register_pay_read_by_stuemp_no(t_cif_customer.stuemp_no, &register_pay);
		if (ret)
		{
			if (DB_NOTFOUND == ret)
			{
				// 没有查询到, 则需要进行以下步骤
				NULL;
			}
			else
			{
				*pRetCode = E_DB_REGISTER_PAY_R;
				goto L_RETU;
			}
		}
		else	// 查询出来有结果
		{	
			if (register_pay.flag != REGISTER_ALREADY_UPDATE)			// 未有更新则需要进行web解冻
			{
				if (1 == flag)		// web解冻
				{
					// 更新register.flag标识, 让其能够解冻						
					ret = DB_t_tif_register_pay_read_lock_by_cur_and_stuemp_no(t_cif_customer.stuemp_no, &register_pay_tmp);
					if (ret)
					{
						if (DB_NOTFOUND == ret)
						{	
							writelog(LOG_ERR,"DB_t_tif_register_pay_read_lock_by_cur_and_stuemp_no not found");
							*pRetCode = E_DB_REGISTER_PAY_N;
						}
						else
						{
							writelog(LOG_ERR,"DB_t_tif_register_pay_read_lock_by_cur_and_stuemp_no errorcode=[%d]", ret);
							*pRetCode = E_DB_REGISTER_PAY_R;
						}
						goto L_RETU;
					}	

					register_pay_tmp.flag = REGISTER_ALREADY_UPDATE;
					ret = DB_t_tif_register_pay_update_lock_by_cur(&register_pay_tmp);
					if (ret)
					{
						if (DB_NOTFOUND == ret)
							*pRetCode = E_DB_REGISTER_PAY_N;
						else
							*pRetCode = E_DB_REGISTER_PAY_U;
						goto L_RETU;
					}

					DB_t_tif_register_pay_free_lock_cur();
					strcpy(msg, "注册缴费更新成功");
					des2src(out_pack->vsmess, msg);
				}
				else
				{
					*pRetCode = E_DB_REGISTER_PAY_NOTUPDATE;
					goto L_RETU;
				}
			}
		}
	}	
	else if(webflag == 2)
	{
		ret = DB_t_tif_register_schoolterm_read_by_cuttype_and_reg_flag(t_cif_customer.cut_type,1,&term);
		if(ret)
		{
			if(DB_NOTFOUND != ret)
			{
				*pRetCode = E_DB_REG_SCHOOLTERM_R;
				goto L_RETU;
			}
		}
		else
		{
			ret = DB_t_tif_registration_read_lock_by_c0_and_cust_id_and_reg_id(t_cif_customer.cut_id,term.reg_id,&reg);
			if(ret)
			{
				if(DB_NOTFOUND == ret)
				{
					// ADD 
					reg.reg_id = term.reg_id;
					reg.cust_id = t_cif_customer.cut_id;
					reg.device_id = 0;
					des2src(reg.device_name,"web");
					reg.reg_flag = IS_YES;
					getsysdate(reg.tx_date);
					getsystime(reg.tx_time);
					strcpy(reg.comments,"补报道");
					ret = DB_t_tif_registration_add(&reg);	
					if(ret)
					{
						*pRetCode = E_DB_REGISTRATION_I;
					}
				}
				else
				{
					*pRetCode = E_DB_REGISTRATION_R;
					goto L_RETU;
				}
			}
			else
			{
				if(reg.reg_flag != IS_YES)
				{
					// 更新
					reg.device_id = 0;
					des2src(reg.device_name,"web");
					reg.reg_flag = IS_YES;
					getsysdate(reg.tx_date);
					getsystime(reg.tx_time);
					strcpy(reg.comments,"补报道");
					ret = DB_t_tif_registration_update_lock_by_c0(&reg);
					if(ret)
					{
						*pRetCode = E_DB_REGISTRATION_U;
						goto L_RETU;
					}
					DB_t_tif_registration_free_lock_c0();
				}
			}
		}
	}
		
	//如果该卡号被挂失,则解冻时对黑名单不处理
	if(STATE_FALSE==sCardState[CARDSTAT_TYPE_LOST])
	{
		ret=InsertToBlkList(card_id,DELETE_BLACKLIST);
		if(ret)
		{
			*pRetCode=ret;
			writelog(LOG_ERR,"InsertToBlkList err[%d]",ret);
			goto L_RETU;
		}	
		//广播黑名单
		AddXmlItemInt(tMesList.incontent, XML_KEY_CARDID,black_sheet.card_id);
		AddXmlItemStr(tMesList.incontent, XML_KEY_VERNUM, black_sheet.volume);
		AddXmlItemInt(tMesList.incontent, XML_KEY_ADDDELSIGN,black_sheet.is_ad);	//增删标志

		tMesList.funid = 930005;
		tMesList.level = 1;
		ret=AddMsgLst(&tMesList);
		if(ret)
		{
			*pRetCode=ret;
			writelog(LOG_ERR,"AddMsgLst err[%d]",ret);
			goto L_RETU;
		}
		ret=GetCardMaxBlkVerNo(card_id,volume);
		if(ret)
		{
			*pRetCode = ret;
			goto L_RETU;
		}
	}
	else
	{
		memset(volume,'0',12);
	}
	//	修改卡状态为非冻结
	ret = UpdateCardState(card_id,CARDSTAT_TYPE_FREEZE,STATE_FALSE);
	if (ret)
	{
		*pRetCode = ret;
		goto L_RETU;
	}
	//	准备数据插入交易流水表
	ret = getNewUniqNo(KEYTYPE_TRADESERIAL,&dUniqno);  					//获得最大流水号
	if(ret)
	{
		*pRetCode = ret;
		writelog(LOG_ERR,"ERRCODE = [%d]",ret);
		goto L_RETU;
	}
	des2src(tradeserial.operate_date,sysdate);											//发生日期
	des2src(tradeserial.operate_time,systime);											//发生时间
	des2src(tradeserial.collect_date,sysdate);												//采集日期
	des2src(tradeserial.collect_time,systime);												//采集时间
	des2src(tradeserial.enteract_date,logicdate);											//处理日期
	des2src(tradeserial.enteract_time,systime);											//处理时间
	tradeserial.serial_no = D2I(dUniqno);									//流水号
	des2src(tradeserial.oper_code,hi_Operator);
	tradeserial.serial_type = TXCODE_UNFREEZE_CARD;								//解冻
	tradeserial.serial_state = SERISTAT_NONEEDDEBT;								//流水状态
	tradeserial.maindevice_id = maindevice_id;										//上传工作站标识
	tradeserial.device_id = hi_device_id;											//采集设备标识
	tradeserial.card_id = card_id;												//交易卡号
	tradeserial.customer_id = hi_Cut_id;
	des2src(tradeserial.oper_code, hi_Operator);

	//	插入交易流水表
	ret = DB_t_tif_tradeserial_add(&tradeserial);
	if (ret)
	{
		writelog(LOG_ERR,"ret [%d]",ret);
		if(DB_REPEAT==ret)
			*pRetCode = E_DB_TRADESERIAL_E;
		else
			*pRetCode = E_DB_TRADESERIAL_I;
		goto L_RETU;
	}

	SetCol(handle,0);
	SetCol(handle,F_SSERIAL0,F_VSMESS,0);
	des2src(out_pack->sserial0,volume);		//卡版本号
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
}

