/* --------------------------------------------
 * 程序名称: F847331.sqc
 * 创建日期: 2008-09-20
 * 程序作者: 李翔
 * 版本信息: 1.0.0.0
 * 程序功能: 缴费日志信息查询
 * --------------------------------------------*/

#define _IN_SQC_
ESQL #include <stdio.h>
ESQL #include <string.h>
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "dbfunc.h"
ESQL #include "account.h"
ESQL #include "fdsqc.h"
ESQL #include "dbfunc_foo.h"

EXEC SQL INCLUDE SQLCA;

int F847331(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32 ho_cardid = 0;
	char ho_stuemp_no[21] = "";
	char ho_name[51] = "";
	sqlint32 ho_register_flag = 0;
	char ho_register_info[60] = "";
	char ho_operate_date[9] = "";
	char ho_operate_time[7] = "";
	sqlint32 ho_flag = 0;
	sqlint32 ho_log_flag = 0;
	char ho_system_no[11] = "";
	char ho_modify_date[9] = "";
	char ho_modify_time[7] = "";
	char ho_begin_date[9] ="";
	char ho_end_date[9] = "";
	sqlint32 ho_last_register_flag = 0;
	char sqlcmd[2048] = "";
	sqlint16 ho_ind = 0;
	EXEC SQL END DECLARE SECTION;
	
	int ret = 0;
	int rows = 0;
	int flag = 0;
	char sqltmp[128] = "";
	ST_CPACK aPack;
	ST_PACK * out_pack = (ST_PACK*)&(aPack.pack);
	T_t_tif_register_info register_info;
	memset(&register_info, 0, sizeof(register_info));
	
	memcpy(ho_stuemp_no, in_pack->sphone, sizeof(ho_stuemp_no));
	memcpy(ho_name, in_pack->semail, sizeof(ho_name));
	memcpy(ho_begin_date, in_pack->sdate0, sizeof(ho_begin_date));
	memcpy(ho_end_date, in_pack->sdate1, sizeof(ho_end_date));
	memcpy(ho_system_no, in_pack->semail2, sizeof(ho_system_no));
	
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	SetCol(handle,F_SEMAIL,F_SDATE0,F_STIME0,F_SDATE0,F_SDATE1,F_SDATE2,F_SDATE3,F_STIME1,F_SCUSTTYPES,F_SNAME2,F_SEMAIL2,F_SCARD1,F_SORDER0,
	F_SSERIAL0,F_SSERIAL1,F_SPHONE,0);

//	writelog(LOG_ERR, "flag = [%d], card_id = [%d], stuemp_no = [%s], begin_date = [%s], end_date = [%s]", flag, ho_cardid, ho_stuemp_no, ho_begin_date, ho_end_date);

	sprintf(sqlcmd,"select c.stuemp_no, c.cut_name, c.register_flag, c.register_info, c.operate_date, c.operate_time, c.flag, c.reserver_no1, c.system_no, c.modify_date, c.modify_time, c.last_register_flag \
	from ykt_cur.t_tif_register_pay_log c where 1=1" );

	if (strlen(ho_stuemp_no) > 0)
	{
		sprintf(sqltmp," and c.stuemp_no='%s' ",ho_stuemp_no);
		strcat(sqlcmd,sqltmp);
	}

	if (strlen(ho_name) > 0)
	{
		sprintf(sqltmp," and c.cut_name='%s' ",ho_name);
		strcat(sqlcmd,sqltmp);	
	}

	if (strlen(ho_system_no) > 0)
	{
		sprintf(sqltmp," and c.system_no='%s' ",ho_system_no);
		strcat(sqlcmd,sqltmp);	
	}
	
	if (strlen(ho_begin_date) == 8)
	{
		sprintf(sqltmp," and c.operate_date >='%s' ",ho_begin_date);
		strcat(sqlcmd,sqltmp);
	}

	if (strlen(ho_end_date) == 8)
	{
		sprintf(sqltmp," and c.operate_time <='%s' ",ho_end_date);
		strcat(sqlcmd,sqltmp);
	}

	writelog(LOG_ERR, "select sql = [%s]", sqlcmd);
	EXEC SQL PREPARE register_pay_log FROM :sqlcmd;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_PREPARE;
	}
	EXEC SQL DECLARE register_pay_log_cursor CURSOR FOR register_pay_log;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return  E_DB_CURSOR_DECLARE;
	}
	EXEC SQL OPEN register_pay_log_cursor;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return  E_DB_CURSOR_OPEN;
	}
	rows = 0;
	while(1)
	{
		memset(ho_stuemp_no, 0, sizeof(ho_stuemp_no));
		memset(ho_name, 0, sizeof(ho_name));
		ho_register_flag = 0;
		memset(ho_register_info, 0, sizeof(ho_register_info));
		memset(ho_operate_date, 0, sizeof(ho_operate_date));
		memset(ho_operate_time, 0, sizeof(ho_operate_time));
		ho_flag = 0;
		ho_log_flag = 0;
		memset(ho_system_no, 0, sizeof(ho_system_no));
		memset(ho_modify_date, 0, sizeof(ho_modify_date));
		memset(ho_modify_time, 0, sizeof(ho_modify_time));
		ho_last_register_flag = 0;

		EXEC SQL FETCH register_pay_log_cursor INTO :ho_stuemp_no:ho_ind,
											 		:ho_name:ho_ind,
											 		:ho_register_flag:ho_ind,
											 		:ho_register_info:ho_ind,
											 		:ho_operate_date:ho_ind,
											 		:ho_operate_time:ho_ind,
											 		:ho_flag:ho_ind,
											 		:ho_log_flag:ho_ind,
											 		:ho_system_no:ho_ind,
											 		:ho_modify_date:ho_ind,
											 		:ho_modify_time:ho_ind,
											 		:ho_last_register_flag:ho_ind;
		ret = SQLCODE;
		if(ret)
		{
			CHECK_DB_ERR;
			EXEC SQL CLOSE register_pay_log_cursor;
			if(ret == DB_NOTFOUND)
			{
				if(rows > 0)
				{
					break;
				}
				*pRetCode = E_DB_REGISTER_PAY_LOG_N;
			}
			else
				*pRetCode = E_DB_REGISTER_PAY_LOG_R;
			goto L_RETU;
		}

		ret = DB_t_tif_register_info_read_by_register_flag(ho_register_flag, &register_info);
		if (ret)
		{
			des2src(out_pack->sserial1, "");
		}
		des2src(out_pack->sserial1, register_info.register_info);
		memset(&register_info, 0, sizeof(register_info));
		ret = DB_t_tif_register_info_read_by_register_flag(ho_last_register_flag, &register_info);
		if (ret)
		{
			des2src(out_pack->sserial0, "");
		}
		des2src(out_pack->sserial0, register_info.register_info);

		des2src(out_pack->sphone, ho_stuemp_no);
		des2src(out_pack->semail, ho_name);
		des2src(out_pack->semail2, ho_system_no);
		des2src(out_pack->sdate0, ho_modify_date);
		des2src(out_pack->sdate1, ho_modify_time);
		des2src(out_pack->sdate2, ho_operate_date);
		des2src(out_pack->sdate3, ho_operate_time);
		
		PutRow(handle,out_pack,pRetCode,szMsg);
		rows++;
		if(rows % 20 == 0)
		{
			AnswerDataPart(handle,*pRetCode,szMsg);
		}
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
  L_RETU:
	return -1;
	
	return 0;
}

