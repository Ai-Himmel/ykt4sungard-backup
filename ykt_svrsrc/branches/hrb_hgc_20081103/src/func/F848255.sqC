/* --------------------------------------------
 * 程序名称: F848255.c
 * 创建日期: 2007-04-03
 * 程序作者: 汤成
 * 版本信息: 1.0.0.0
 * 程序功能:门禁节假日管理
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"
ESQL #include "dbfunc_foo.h"

static int Read848255(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char ho_holiday_name[61]="";
	sqlint32 ho_hid = 0;
	char ho_update[15] = "";
	sqlint32 ho_flag = 0;
	sqlint16 ho_indr = 1;
	char sqlcmd[1024] = "";
	EXEC SQL END DECLARE SECTION;
	char sqltmp[128];
	int rows;
	int ret;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

	sprintf(sqlcmd,"SELECT HOLIDAY_ID,HOLIDAY_NAME,FLAG,LAST_UPDATE \
	FROM YKT_CUR.T_DOOR_HOLIDAY WHERE FLAG < %d ",DOOR_FLAG_DELETE);

	if(strlen(in_pack->semail) > 0)
	{
		sprintf(sqltmp," AND HOLIDAY_NAME LIKE '%%%s%%' ",in_pack->semail);
		strcat(sqlcmd,sqltmp);
	}

	if(!unlike_tbl_id(in_pack->lvol0))
	{
		sprintf(sqltmp," AND HOLIDAY_ID=%d ",in_pack->lvol0);
		strcat(sqlcmd,sqltmp);
	}

	EXEC SQL PREPARE stmt FROM :sqlcmd;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_PREPARE;
	}
	EXEC SQL DECLARE cur CURSOR FOR stmt;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL OPEN cur;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_OPEN;
	}

	memset(&aPack,0,sizeof aPack);
	rows=0;
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	SetCol(handle,F_SEMAIL,F_LVOL0,F_LVOL1,F_SNAME,0);
	while(1)
	{
		memset(ho_holiday_name,0,sizeof ho_holiday_name);
		memset(ho_update,0,sizeof ho_update);
		ho_hid = 0;
		ho_flag = 0;

		EXEC SQL FETCH cur INTO :ho_hid:ho_indr,:ho_holiday_name:ho_indr,:ho_flag:ho_indr,
		:ho_update:ho_indr;
		if(SQLCODE)
		{
			ret = SQLCODE;
			CHECK_DB_ERR;
			EXEC SQL CLOSE cur;
			if(DB_NOTFOUND == ret)
			{
				if(rows > 0)
					break;
				return E_DB_DOOR_HOLIDAY_N;
			}
			return E_DB_DOOR_HOLIDAY_R;
		}
		rows++;
		des2src(out_pack->semail,ho_holiday_name);
		des2src(out_pack->sname,ho_update);
		out_pack->lvol0 = ho_hid;
		out_pack->lvol1 = ho_flag;
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(rows % 20 == 0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
}

static int Add848255(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	T_t_door_holiday holiday;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	int ret;
	memset(&holiday,0,sizeof holiday);
	if(strlen(in_pack->semail) < 1)
		return E_INPUT_ERROR;
		
	ret = ora_gen_sequence(KEYTYPE_DOOR_HOLIDAY,&(holiday.holiday_id));
	if(ret)
	{
		writelog(LOG_ERR,"gen sequece value error,[%s]",KEYTYPE_DOOR_HOLIDAY);
		return ret;
	}
	des2src(holiday.holiday_name,in_pack->semail);
	getsysdatetime(holiday.last_update);
	holiday.flag = DOOR_FLAG_NORMAL;
	ret = DB_t_door_holiday_add(&holiday);
	if(ret)
	{
		if(DB_REPEAT == ret)
			return E_DB_DOOR_HOLIDAY_E;
		writelog(LOG_ERR,"[%d]",holiday.holiday_id);
		return E_DB_DOOR_HOLIDAY_I;
	}
	memset(&aPack,0,sizeof aPack);
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	SetCol(handle,F_LVOL0,0);
	out_pack->lvol0 = holiday.holiday_id;
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;
}

static int Delete848255(ST_PACK *in_pack)
{
	T_t_door_holiday holiday;
	int ret;
	memset(&holiday,0,sizeof holiday);
	
	if(unlike_tbl_id(in_pack->lvol0))
		return E_INPUT_ERROR;

	// TODO: 判断没有使用过

	ret = DB_t_door_holiday_read_by_holiday_id(in_pack->lvol0,&holiday);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_HOLIDAY_N;
		return E_DB_DOOR_HOLIDAY_R;
	}

	holiday.flag = DOOR_FLAG_DELETE;
	getsysdatetime(holiday.last_update);

	ret = DB_t_door_holiday_update_by_holiday_id(in_pack->lvol0,&holiday);
	if(ret)
	{
		writelog(LOG_ERR,"更新失败,hid[%d]",in_pack->lvol0);
		return E_DB_DOOR_HOLIDAY_U;
	}
	return 0;
}

static int Update848255(ST_PACK *in_pack)
{
	T_t_door_holiday holiday;
	int ret;
	memset(&holiday,0,sizeof holiday);

	if(unlike_tbl_id(in_pack->lvol0))
	{
		return E_INPUT_ERROR;
	}
	if(strlen(in_pack->semail) < 1)
	{
		return E_INPUT_ERROR;
	}

	ret = DB_t_door_holiday_read_by_holiday_id(in_pack->lvol0,&holiday);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_HOLIDAY_N;
		return E_DB_DOOR_HOLIDAY_R;
	}
	des2src(holiday.holiday_name,in_pack->semail);

	ret = DB_t_door_holiday_update_by_holiday_id(in_pack->lvol0,&holiday);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_HOLIDAY_N;
		writelog(LOG_ERR,"更新门禁节假日失败,hid[%d]",in_pack->lvol0);
		return E_DB_DOOR_HOLIDAY_U;
	}
	return 0;
}

static int Poll848255(ST_PACK *in_pack)
{
	T_t_door_holiday holiday;
	int ret;
	memset(&holiday,0,sizeof holiday);

	if(unlike_tbl_id(in_pack->lvol0))
	{
		return E_INPUT_ERROR;
	}

	ret = DB_t_door_holiday_read_by_holiday_id(in_pack->lvol0,&holiday);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_HOLIDAY_N;
		return E_DB_DOOR_HOLIDAY_R;
	}
	getsysdatetime(holiday.last_update);

	ret = DB_t_door_holiday_update_by_holiday_id(in_pack->lvol0,&holiday);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_HOLIDAY_N;
		writelog(LOG_ERR,"更新门禁节假日失败,hid[%d]",in_pack->lvol0);
		return E_DB_DOOR_HOLIDAY_U;
	}
	return 0;
}

int F848255(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	int ret = 0;
	switch(in_pack->sstatus0[0])
	{
		//添加
		case 'A':
			ret=Add848255(handle,iRequest,in_pack,pRetCode,szMsg);
			break;
		//删除
		case 'D':
			ret=Delete848255(in_pack);
			break;
		//查询
		case 'R':
			ret=Read848255(handle,iRequest,in_pack,pRetCode,szMsg);
			break;
		//修改
		case 'U':
			ret=Update848255(in_pack);
			break;
		case 'P':
			ret=Poll848255(in_pack);
			break;
		default:
			ret=E_INPUT_DATA_INVAILD;
			break;
	}
	if(ret)
	{
		*pRetCode=ret;
		return -1;
	}
	return 0;
}
