/* --------------------------------------------
 * 程序名称: deal_acc.sqC
 * 创建日期: 2008/08/11
 * 程序作者: 王彦兵
 * 版本信息: 1.0.0.0
 * 程序功能:  处理卡库不平
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <stdio.h>
ESQL #include <string.h>
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "dbfunc.h"
ESQL #include "dbfunc_foo.h"
ESQL #include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;	

int deal_nobalacard(int nobala_day,char *begin_date,char *end_date,int mincard,int maxcard)
{
       EXEC SQL BEGIN DECLARE SECTION;
	char 	h_sqlcmd[4096]="";
	char		h_operate_date[9] ="";
	char 	h_operate_time[9] ="";
	sqlint16	ind = 0;
	sqlint32  	h_day = 0;
	sqlint32	h_cardno = 0;
	sqlint32	h_tradecnt = 0;
	sqlint32   h_mincard = 0;
	sqlint32   h_maxcard = 0;
	double 	h_db_bala = 0;
	double 	h_card_bala = 0;
	double 	h_diffbala = 0; 	
       EXEC SQL END DECLARE SECTION;

	int 	row = 0;
	int 	deal_cnt = 0;
	int   commit_cnt = 0;
	int 	trade_cnt = 0;
	int	trade_fee = 0;
	int	in_bala = 0;
	int 	out_bala = 0;
	int 	ret = 0;
	int 	serial = 0;
	int 	seqcnt = 0;
	char begindate[9] = "";
	char enddate[9] ="";
	char systime[8] = "";
	char sysdate[11] ="";
	char sCardState[5]="";
	T_t_tif_rcvdtl tRcvdtl;
	
	h_day = nobala_day;   //不平天数
	h_mincard = mincard;
	h_maxcard = maxcard;
	des2src(begindate, begin_date);   //处理的开始日期
	des2src(enddate, end_date);	//处理的结束日期
	
	getsysdate(sysdate);
	getsystime(systime);
	memset(&tRcvdtl,0,sizeof(tRcvdtl));
	
	des2src(tRcvdtl.device_id, "00000000");
	des2src(tRcvdtl.crc,"9999");				//CRC校验
	tRcvdtl.tx_code = TXCODE_COSUME_LOG;		//当做消费流水
	tRcvdtl.tx_mark = 153;
	tRcvdtl.status[0] ='1';
	tRcvdtl.comu_ver = 0;	//商户号

	printf("开始处理卡库不平账户... \n");		

	// 首先查找卡库不平的卡号
	EXEC SQL DECLARE nobala_card CURSOR FOR
		select card_id from ykt_cur.t_aif_account where nobala_num >= :h_day and cur_freebala >card_balance and current_state=1 
		and act_type=1 and card_id >= :h_mincard and card_id <=:h_maxcard order by card_id;//and card_id not in (select cut_id  from ykt_cur.temp_cut) order by card_id;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;
	}

	EXEC SQL OPEN nobala_card;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;
	}

	while(1)
	{
		if(++commit_cnt > 100000)			//处理卡的个数超过100000
		{	
			//commit_cnt = 0;
			if(db_commit())			
				return E_DB_COMMIT;
			break;		//直接返回算了，免得报错。
		}
		
		EXEC SQL FETCH nobala_card into :h_cardno:ind;
		if(SQLCODE)
		{			
			ret = SQLCODE;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE nobala_card;
			if(DB_NOTFOUND==ret)
			 	break;

			else
				return E_DB_CURSOR_FETCH;
		}
		/*
		ret=GetCardState(h_cardno,sCardState);	//得到卡状态
		if(ret)
		{
			writelog(LOG_ERR,"GetCardState error,err[%d],card_id[%d]",ret,h_cardno);
			EXEC SQL CLOSE nobala_card;
			return -1;
		}
		if(STATE_TRUE==sCardState[CARDSTAT_TYPE_FREEZE])	
			continue;
		*/
		trade_cnt = 0;				//重置交易次数为0
		serial = 0;
		row = 0;
		seqcnt = 0;
		tRcvdtl.card_no = h_cardno;
		printf("开始处理卡号[%d] 从[%s] 到[%s]不平记录...\n",h_cardno,begindate,enddate);

		//查询卡缺失的流水
		memset(h_sqlcmd,0,sizeof(h_sqlcmd));
		sprintf(h_sqlcmd,"select p_date,p_time, o.orn+t.S-1 as TRADE_COUNT,p_out-f_in TRADE_FEE,p_out IN_BALANCE,f_in OUT_BALANCE \
	           from \
	             ( select ROW_NUMBER() over(order by ecode) as orn \
	               from YKT_CUR.T_PIF_ERRCODE where rownum<=100) o  \
	             right join   \
	              ( \
	               select s,e,p_out,f_in,p_date,p_time,TRADE_COUNT,IN_BALANCE,OUT_BALANCE,TRADE_FEE \
	               from     \
	                  ( select  \
	                   min(operate_date) over ( order by TRADE_COUNT,operate_date,operate_time rows between 1 preceding and 0 following ) as p_date, \
	                   min(operate_time) over ( order by TRADE_COUNT,operate_date,operate_time rows between 1 preceding and 0 following ) as p_time, \
	                   sum(OUT_BALANCE) over ( order by TRADE_COUNT,operate_date,operate_time rows between 1 preceding and 0 following )- OUT_BALANCE as p_out, \
	                   IN_BALANCE as f_in,\
	                   sum(TRADE_COUNT) over ( order by TRADE_COUNT rows between 1 preceding and 0 following )- TRADE_COUNT+1 as S,  \
	                     TRADE_COUNT-1 as E,operate_date,operate_time,TRADE_COUNT,IN_BALANCE,OUT_BALANCE,TRADE_FEE \
	                     from   \
	                      ( select operate_date,operate_time,trade_count,trade_fee,in_balance ,out_balance from \
                             ( select operate_date,operate_time,trade_count,trade_fee,in_balance ,out_balance from \
                                 ykt_cur.t_tif_tradeserial where card_id = %d \
                               union all  \
                               select operate_date,operate_time,trade_count,trade_fee,in_balance ,out_balance from \
	                             ykt_his.t_tif_tradeserial_his where card_id = %d ) t1, \
	                         (select min(trade_count) mincnt,max(trade_count) maxcnt from \
	                           YKT_his.t_tif_tradeserial_his where  card_id = %d and bak_date >='%s' and bak_date <='%s') t2 \
	                         where  t1.trade_count >= t2.mincnt and t1.trade_count<= t2.maxcnt order by trade_count \
	                       )    \
	                  ) t \
	                 where E-S+1>0 and E-S+1<100 and s>1 \
	               ) t     \
	             on o.orn<=e-s+1 where f_in<p_out order by trade_count,p_date,p_time", h_cardno,h_cardno,h_cardno,begindate,enddate); 
		EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
		if( SQLCODE )
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE nobala_card;
			return E_DB_CURSOR_DECLARE;		 
		}

		EXEC SQL DECLARE lack_seri_cur CURSOR FOR query_stmt;
		if( SQLCODE )
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE nobala_card;
			return E_DB_CURSOR_DECLARE;		 
		}
		EXEC SQL OPEN lack_seri_cur ;
		if(SQLCODE)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE nobala_card;
			return E_DB_CURSOR_OPEN;
		}
		
		while(1)
		{
			EXEC SQL FETCH lack_seri_cur INTO :h_operate_date:ind,:h_operate_time:ind,:h_tradecnt:ind,:h_diffbala:ind,:h_db_bala:ind,:h_card_bala:ind;
			
			if(SQLCODE)
			{
				ret = SQLCODE;
				db_chk_err(__FILE__,__LINE__,&sqlca);
				EXEC SQL CLOSE lack_seri_cur;
				if(DB_NOTFOUND==ret)
				{
					if(row)
					{
					//最后一笔进入t_tif_rcvdtl
						tRcvdtl.in_bala = in_bala;
						tRcvdtl.out_bala = out_bala;
						tRcvdtl.amount = in_bala- out_bala;
						tRcvdtl.total_cnt = trade_cnt;
						tRcvdtl.serial_no = ++serial;
						ret = DB_t_tif_rcvdtl_add(&tRcvdtl);
						 if (ret)
				        		printf("插入来帐表错误: serial_no[%d]card_no[%d]device_id[%s]tx_date[%s]tx_time[%s]\n",tRcvdtl.serial_no,tRcvdtl.card_no,tRcvdtl.device_id,tRcvdtl.tx_date,tRcvdtl.tx_time);
					}					
					break;

				}
				else
				{
					EXEC SQL CLOSE nobala_card;
					return E_DB_CURSOR_FETCH;
				}
			}	
			
			row++;
			deal_cnt++;
			printf("日期[%s],  时间[%s],  卡号[%d],  交易次数[%d]\n",h_operate_date,h_operate_time,h_cardno,h_tradecnt);

			if(trade_cnt  == 0)   //第一条,先记录下来
			{
				in_bala = D2I(h_db_bala*100); 
				out_bala= D2I(h_card_bala*100);
				trade_fee= D2I(h_diffbala*100);
			}
			else
			{
				if(h_tradecnt == trade_cnt + 1)  //下一条和上一条连续,上一条入1分钱
				{
					tRcvdtl.in_bala = in_bala;
					tRcvdtl.out_bala = --in_bala;		//消费1分钱
					tRcvdtl.amount = 1;
				}
				else
				{
					tRcvdtl.in_bala = in_bala;
					tRcvdtl.out_bala = out_bala;
					tRcvdtl.amount = in_bala- out_bala;

					//记录本次的值
					in_bala = D2I(h_db_bala*100); 
					out_bala= D2I(h_card_bala*100);
					trade_fee= D2I(h_diffbala*100);
				}
				tRcvdtl.total_cnt = trade_cnt;
				tRcvdtl.serial_no = ++serial;
				ret = DB_t_tif_rcvdtl_add(&tRcvdtl);
				 if (ret)
			    	{	    
				       printf("插入来帐表错误: serial_no[%d]card_no[%d]device_id[%s]tx_date[%s]tx_time[%s]\n",tRcvdtl.serial_no,tRcvdtl.card_no,tRcvdtl.device_id,tRcvdtl.tx_date,tRcvdtl.tx_time);
				}
			}
		
			des2src(tRcvdtl.tx_date,h_operate_date);
			des2src(tRcvdtl.tx_time, h_operate_time);
			trade_cnt = h_tradecnt;
		}
		
	}
	
	printf("处理卡库不平条数[%d]\n",deal_cnt);
	return 0;
}

int getMaxCardID(int &max_cardID)
{
	int ret = 0;
	T_t_pif_syskey syskey;
	memset(&syskey,0,sizeof(syskey));
	ret = DB_t_pif_syskey_read_by_key_code(KEYTYPE_CARD_ID, &syskey);
	if(ret)
	{
		printf("read syskey err[%d]type[%s]",ret,KEYTYPE_CARD_ID);
		if(DB_NOTFOUND==ret)
		{
			return E_DB_SYSKEY_N;
		}
		else
			return E_DB_SYSKEY_R;
	}
	max_cardID = D2I(syskey.key_value);
	return 0;
}

int getdiffday(char *begindate,char *enddate)
{
	char tmp[5] = "";
	time_t t,t1,t2;
	struct tm *ptm;

	time(&t);
	ptm = localtime(&t);
	memcpy(tmp,begindate,4);
	ptm->tm_year = atoi(tmp) - 1900;
	memset(tmp,0,sizeof(tmp));
	memcpy(tmp,begindate+4,2);
	ptm->tm_mon = atoi(tmp) -1;
	memset(tmp,0,sizeof(tmp));
	memcpy(tmp,begindate+6,2);
	ptm->tm_mday = atoi(tmp);
	
	t1 = mktime(ptm);

	memset(tmp,0,sizeof tmp);
	memcpy(tmp,enddate,4);
	ptm->tm_year = atoi(tmp) - 1900;
	memset(tmp,0,sizeof(tmp));
	memcpy(tmp,enddate+4,2);
	ptm->tm_mon = atoi(tmp) -1;
	memset(tmp,0,sizeof(tmp));
	memcpy(tmp,enddate+6,2);
	ptm->tm_mday = atoi(tmp);

	t2 = mktime(ptm);

	return (t2 - t1) / (3600*24);
}

int main(int argc,char *argv[])
{
	int ret=0;
	char *p = NULL;
	char dbname[256]="";
	char dbuser[256]="";
	char dbpwd[256]="";
	char begindate[9] = "";
	char enddate[9] = "";
	char sysdate[9]="";
	char parabuf[9]="";
	int cnt = 0;
	int nobala_day = 0;
	int diff_day = 0;
	int mincard = 0;
	int maxcard = 0;
	double second=0;


	openlog("COL_SERI",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL4);
	//打开数据库连接
	p=getenv("YKT_DBNAME");
	if(p==NULL)
	{
		perror("get ENV VAR YKT_DBNAME ERR\n");
		writelog(LOG_ERR,"get ENV VAR YKT_DBNAME ERR");
		exit(1);
	}
	des2src(dbname,p);
	p=getenv("YKT_USER");
	if(p==NULL)
	{
		perror("get ENV VAR YKT_USER ERR\n");
		writelog(LOG_ERR,"get ENV VAR YKT_USER ERR");
		exit(2);
	}
	des2src(dbuser,p);
	p=getenv("YKT_PWD");
	if(p==NULL)
	{
		perror("get ENV VAR YKT_PWD ERR\n");
		writelog(LOG_ERR,"get ENV VAR YKT_PWD ERR");
		exit(3);
	}
	des2src(dbpwd,p);

	while(1)
	{
		ret=db_connect(dbname,dbuser,dbpwd);
		if(ret)
		{
			db_chk_err(__FILE__,__LINE__,&sqlca);
			writelog(LOG_ERR,"connect to database err dbname[%s]",dbname);
			sleep(10);
			if(cnt<=3)
			{
				cnt++;
				continue;
			}
			else
			{
				printf("连接数据库失败!\n");
		      		return(-100);
			}
	   	}
		else
		{
			printf("连接数据库成功!\n");
			break;
		}
	}
	
	if(argc !=3 && argc !=1)
	{
		printf("参数格式错误\n");
		printf("usage:	deal_acc  [mincard]  [maxcard]\n");
		goto L_RET;
	}

	else 
	{
		ret = GetParameter(20, parabuf);
		if(ret)
		{
			printf("获取预留不平天数出错\n ");
			goto L_RET;
		}
		nobala_day = atoi(parabuf);
		if(nobala_day <=7)
		{
			printf("全局参数[20] 卡库不平天数小于7\n ");
			goto L_RET;
		}

		ret = GetParameter(21, begindate);
		if(ret)
		{
			printf("获取上次处理的截至日期出错\n ");
			goto L_RET;
		}
		
		if(IsInvalidDateTime(begindate,"YYYYMMDD") )
		{	
			printf("全局参数[21] 日期格式设置错误,有效格式为:	YYYYMMDD\n ");
			goto L_RET;
		}
		getsysdate(sysdate);
		
		ret=datetime2second(sysdate, "YYYYMMDD", &second);
		if(ret)
		{
			writelog(LOG_ERR,"datetime2second error,errcode=[%d]",ret);
			return 	ret;
		}

		second=second-nobala_day*24*60*60;
		ret=second2datetime(second, enddate, "YYYYMMDD");
		if(ret)
		{
			writelog(LOG_ERR,"second2datetime error,errcode=[%d]",ret);
			return 	ret;
		}

		if(strncmp(begindate,enddate,8) >0)
		{
			printf("开始日期[%s]比结束日期[%s]大\n",begindate,enddate);
			goto L_RET;
		}
		if(argc == 1)
		{
			mincard = 0;
			if(getMaxCardID(maxcard))
			{
				printf("获取最大卡号出错\n");
				goto L_RET;
			}
		}
		else
		{
			mincard = atoi(argv[1]);
			maxcard = atoi(argv[2]);
			if(mincard <=0 || maxcard <=0 || mincard > maxcard)
			{
				printf("卡号输入有误mincard[%s],maxcard[%s]\n ",argv[1],argv[2]);
				goto L_RET;
			}			
		}
	}

	printf("补流水范围:nobala_day[%d],begindate[%s],enddate[%s],mincard[%d],maxcard[%d]",nobala_day,begindate,enddate,mincard,maxcard);
	ret=deal_nobalacard(nobala_day,begindate,enddate,mincard,maxcard);
	if(!ret)
	{	
		ret = SetParameter(21, enddate);
		if(ret)
		{
			printf("设置全局参数21 出错!\n");		
			db_rollback();
		}
		else
		{
			printf("设置全局参数21 成功!\n");		
			printf("处理卡库不平执行成功!\n");
			//db_commit();   	//程序退出会自动提交事务
		}
		
	}
	else
	{
		printf("处理卡库不平执行失败!\n");
		db_rollback();
	}
	
L_RET:
	db_disconnect();
	closelog();
	return 0;
}
