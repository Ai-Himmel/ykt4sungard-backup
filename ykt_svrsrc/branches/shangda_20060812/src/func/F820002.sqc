/* --------------------------------------------
 * 程序名称: F820002.sqc
 * 创建日期: Sep 23 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: update t_pif_subsystem
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"

EXEC SQL INCLUDE SQLCA;

int F820002(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	system_id=0;                  	//子系统标识
	char    	system_name[150+1]="";         	//子系统名称
	sqlint32	system_type=0;                	//子系统类别
	sqlint32	state=0;                      	//子系统状态
	sqlint32	area=0;                       	//子系统所在区域
	sqlint32	server_id=0;                  	//工作站号（设备注册号）
	char    	ip[20+1]="";                  	//IP地址
	char    	mac_addr[20+1]="";            	//网卡物理地址
	sqlint32	version=0;                    	//子系统版本号
	char    	manager[20+1]="";             	//负责人员工号
	char    	tel[20+1]="";                 	//联系电话
	char    	address[150+1]="";            	//联系地址
	char    	comments[150+1]="";           	//备注
	sqlint32	tmp_state=0;                      	//子系统状态
	sqlint32	sport = 0;
	sqlint32	enc_type=0;
	char		funclist[256] = "";
	sqlint16	indicator=0;
	sqlint32	tmpint=0;
	EXEC SQL END DECLARE SECTION;


	int ret=0;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);

	ResetNormalCPack(&aPack,0,1);

#ifdef DEBUG
	writelog(LOG_DEBUG,"system_id      :lvol0          [%d]",rPack->lvol0);

	writelog(LOG_DEBUG,"system_name    :scust_auth     [%s]",rPack->scust_auth);
	writelog(LOG_DEBUG,"system_type    :lvol1          [%d]",rPack->lvol1);
	writelog(LOG_DEBUG,"state          :lvol2          [%d]",rPack->lvol2);
	writelog(LOG_DEBUG,"area           :lvol3          [%d]",rPack->lvol3);
	writelog(LOG_DEBUG,"server_id      :lvol4          [%d]",rPack->lvol4);
	writelog(LOG_DEBUG,"ip             :scust_auth2    [%s]",rPack->scust_auth2);
	writelog(LOG_DEBUG,"mac_addr       :sname          [%s]",rPack->sname);
	writelog(LOG_DEBUG,"version        :lvol5          [%d]",rPack->lvol5);
	writelog(LOG_DEBUG,"manager        :sname2         [%s]",rPack->sname2);
	writelog(LOG_DEBUG,"tel            :sphone         [%s]",rPack->sphone);
	writelog(LOG_DEBUG,"address        :scusttypes     [%s]",rPack->scusttypes);
	writelog(LOG_DEBUG,"comments       :ssectypes      [%s]",rPack->ssectypes);
#endif
	system_id=rPack->lvol0;

	des2src(system_name,rPack->scust_auth);
	system_type=rPack->lvol1;
	state=rPack->lvol2;
	area=rPack->lvol3;
	server_id=rPack->lvol4;
	des2src(ip,rPack->scust_auth2);
	des2src(mac_addr,rPack->sname);
	version=rPack->lvol5;
	des2src(manager,rPack->sname2);
	des2src(tel,rPack->sphone);
	des2src(address,rPack->scusttypes);
	des2src(comments,rPack->ssectypes);
	sport = rPack->lvol6;
	enc_type = rPack->lvol7;
	des2src(funclist,rPack->vsvarstr0);

	tmp_state=SUBSYSSTAT_LOGOUT;

	//子系统名称不能重复
#ifdef ESQL_DB2	
	EXEC SQL select system_id into :tmpint:indicator
	from ykt_cur.t_pif_subsystem
	where (state<>:tmp_state) and (system_id<>:system_id) and (system_name=:system_name)
	fetch first 1 rows only;
#else
	EXEC SQL select system_id into :tmpint:indicator
	from ykt_cur.t_pif_subsystem
	where (state<>:tmp_state) and (system_id<>:system_id) and (system_name=:system_name) and rownum=1;
#endif
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		if(DB_NOTFOUND!=SQLCODE)
		{
			*pRetCode=E_DB_SUBSYSTEM_R;
			goto L_RETU;
		}
	}
	else
	{
		*pRetCode=E_SYSNAME_SAME;
		goto L_RETU;
	}
	SQLCODE=0;
	//如果修改了子系统的IP或者MAC地址，则需要判断IP或MAC地址是否重复
#ifdef ESQL_DB2	
	EXEC SQL select state into :state
	from ykt_cur.t_pif_subsystem
	where (system_id<>:system_id) and (state<>:tmp_state) and (ip=:ip or mac_addr=:mac_addr)
	fetch first 1 rows only;
#else
	EXEC SQL select state into :state
	from ykt_cur.t_pif_subsystem
	where (system_id<>:system_id) and (state<>:tmp_state) and (ip=:ip or mac_addr=:mac_addr) and rownum=1;
#endif
	if(0==SQLCODE)
	{
		*pRetCode=E_SUBSYSTEM_RELOGIN;
		goto L_RETU;
	}
	else if(DB_NOTFOUND!=SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		*pRetCode=E_DB_SUBSYSTEM_R;
		goto L_RETU;
	}

	SQLCODE=0;
	//更新子系统表记录
	EXEC SQL UPDATE ykt_cur.t_pif_subsystem SET
		system_name=:system_name,
		system_type=:system_type,
		state=:state,
		area=:area,
		server_id=:server_id,
		ip=:ip,
		mac_addr=:mac_addr,
		version=:version,
		manager=:manager,
		tel=:tel,
		address=:address,
		comments=:comments,
		port=:sport,
		enc_type=:enc_type,
		func_list=:funclist
	WHERE system_id = :system_id;
	ret=SQLCODE;
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		//EXEC SQL  CLOSE subsystem_cur;
		if(DB_NOTFOUND==ret)
			*pRetCode=E_DB_SUBSYSTEM_N;
		else
			*pRetCode=E_DB_SUBSYSTEM_U;
		goto L_RETU;
	}

	//更新设备表记录
	ret=updateDevice(rPack,system_id,pRetCode,szMsg);
	if(0 != ret)
	{
		goto L_RETU;
	}
	SetCol(handle,0);
	PutRow(handle,out_pack,pRetCode,szMsg);
	return 0;
L_RETU:
	return -1;
}
int updateDevice(const ST_PACK *rPack,int Dev_id,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32	device_id=0;                  	//设备标识
	char    	device_name[150+1]="";         	//设备名称
	char    	dev999_id[8+1]="";            	//三九设备注册号
	char    	devphy999_id[8+1]="";         	//设备物理ID
	sqlint32	dev999_no=0;                  	//机号
	char    	devtype[4+1]="";              	//机型代码
	char    	devversion[8+1]="";           	//设备版本号
	char    	cardstr[2+1]="";              	//卡片结构
	char    	cardtype[64+1]="";            	//卡类
	sqlint32	portcount=0;                  	//服务器端口总数
	//char    	fdevphy_id[8+1]="";           	//上级设备物理ID
	sqlint32	fdev_id=0;
	sqlint32	portno=0;                     	//服务器端口号
	sqlint32	state_id=0;                   	//设备状态
	sqlint32	joinmode=0;                   	//链路模式
	char    	comadd[16+1]="";              	//通信地址
	char    	port[6+1]="";                 	//通讯端口
	sqlint32	baudrate=0;                   	//波特率
	sqlint32	comtype=0;                    	//数据通讯方式
	char    	bsheetvdate[12+1]="";         	//黑名单有效期
	char    	bsheetver[12+1]="";           	//黑名单版本号
	sqlint32	lasttraserno=0;               	//终端交易流水号期末值
	char    	lasttradate[20+1]="";         	//终端交易时间期末值
	sqlint32	lastshutserno=0;              	//终端轧帐流水号期末值
	char    	lastshutdate[20+1]="";        	//终端轧帐时间期末值
	char    	syspwd[6+1]="";               	//系统员密码
	char    	admpwd[6+1]="";               	//管理员密码
	sqlint32	pwdonoff=0;                   	//密码开关
	char    	puserno[3+1]="";              	//钱包代码
	char    	cardset[64+1]="";             	//终端机适用用户卡类别
	char    	funonoff[2+1]="";             	//收费机增强功能开关
	sqlint32	cardusenum=0;                 	//卡的最大使用次数
	sqlint32	maxdeposit=0;                 	//钱包最高存款限额
	sqlint32	mindeposit=0;                 	//钱包最低剩余款限额
	sqlint32	ration=0;                     	//定值收费方式使用的定值额
	sqlint32	maxtrade=0;                   	//每次交易最高额
	char    	shuttimes[64+1]="";           	//扎帐时间点
	char    	card65pwd[64+1]="";           	//三九65类卡密钥
	char    	authpwd[64+1]="";             	//设备授权密钥
	sqlint32	ftflag=0;                     	//防火防盗状态
	sqlint32	phytype=0;                    	//设备物理型号
	sqlint32	web_level=0;                  	//网络层号
	sqlint32	subsystem_id=0;               	//所属子系统
	sqlint32	area1=0;                       	//设备所在区域
	char    	init_key[32+1]="";            	//读卡密钥
	char    	manager1[20+1]="";             	//负责人员工号
	char    	tel1[20+1]="";                 	//联系电话
	char    	address1[150+1]="";            	//地址
	char    	operate_time[26+1]="";        	//操作时间
	char    	comments1[150+1]="";           	//备注
	sqlint16	indicator1=0;
	EXEC SQL END DECLARE SECTION;


	int ret=0;
	device_id=Dev_id;

	EXEC SQL DECLARE device_cur CURSOR FOR SELECT
		device_name,
		dev999_id,
		devphy999_id,
		dev999_no,
		devtype,
		devversion,
		cardstr,
		cardtype,
		portcount,
		fdev_id,
		portno,
		state_id,
		joinmode,
		comadd,
		port,
		baudrate,
		comtype,
		bsheetvdate,
		bsheetver,
		lasttraserno,
		lasttradate,
		lastshutserno,
		lastshutdate,
		syspwd,
		admpwd,
		pwdonoff,
		puserno,
		cardset,
		funonoff,
		cardusenum,
		maxdeposit,
		mindeposit,
		ration,
		maxtrade,
		shuttimes,
		card65pwd,
		authpwd,
		ftflag,
		phytype,
		web_level,
		subsystem_id,
		area,
		init_key,
		manager,
		tel,
		address,
		operate_time,
		comments
	FROM ykt_cur.t_pif_device
	WHERE 	device_id = :device_id
 	FOR UPDATE;
	if(SQLCODE)
	{
		*pRetCode=E_DB_DEVICE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  OPEN device_cur;
	if(SQLCODE)
	{
		*pRetCode=E_DB_DEVICE_R;
		db_chk_err(__FILE__,__LINE__,&sqlca);
		goto L_RETU;
	}
	EXEC SQL  FETCH device_cur INTO
		:device_name:indicator1,
		:dev999_id:indicator1,
		:devphy999_id:indicator1,
		:dev999_no:indicator1,
		:devtype:indicator1,
		:devversion:indicator1,
		:cardstr:indicator1,
		:cardtype:indicator1,
		:portcount:indicator1,
		:fdev_id:indicator1,
		:portno:indicator1,
		:state_id:indicator1,
		:joinmode:indicator1,
		:comadd:indicator1,
		:port:indicator1,
		:baudrate:indicator1,
		:comtype:indicator1,
		:bsheetvdate:indicator1,
		:bsheetver:indicator1,
		:lasttraserno:indicator1,
		:lasttradate:indicator1,
		:lastshutserno:indicator1,
		:lastshutdate:indicator1,
		:syspwd:indicator1,
		:admpwd:indicator1,
		:pwdonoff:indicator1,
		:puserno:indicator1,
		:cardset:indicator1,
		:funonoff:indicator1,
		:cardusenum:indicator1,
		:maxdeposit:indicator1,
		:mindeposit:indicator1,
		:ration:indicator1,
		:maxtrade:indicator1,
		:shuttimes:indicator1,
		:card65pwd:indicator1,
		:authpwd:indicator1,
		:ftflag:indicator1,
		:phytype:indicator1,
		:web_level:indicator1,
		:subsystem_id:indicator1,
		:area1:indicator1,
		:init_key:indicator1,
		:manager1:indicator1,
		:tel1:indicator1,
		:address1:indicator1,
		:operate_time:indicator1,
		:comments1:indicator1;
	ret=SQLCODE;
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		EXEC SQL  CLOSE device_cur;
		if(DB_NOTFOUND==ret)
			*pRetCode=E_DB_DEVICE_N;
		else
			*pRetCode=E_DB_DEVICE_R;
		goto L_RETU;
	}

	des2src(device_name,rPack->scust_auth);
	//Strncpy_t(dev999_id,rPack->sbank_pwd,sizeof(dev999_id));
	//Strncpy_t(devphy999_id,rPack->sbank_pwd2,sizeof(devphy999_id));
	//dev999_no=rPack->lvol1;
	//Strncpy_t(devtype,rPack->sbank_code,sizeof(devtype));
	sprintf(devversion,"%d",rPack->lvol5);
	//Strncpy_t(devversion,rPack->sdate0,sizeof(devversion));
	//Strncpy_t(cardstr,rPack->scurrency_type,sizeof(cardstr));
	//Strncpy_t(cardtype,rPack->saddr,sizeof(cardtype));
	//portcount=rPack->lvol2;
	//Strncpy_t(fdevphy_id,rPack->sdate1,sizeof(fdevphy_id));
	//portno=rPack->lvol3;
	//state_id=rPack->lvol4;
	//joinmode=rPack->lvol5;
	des2src(comadd,rPack->scust_auth2);
	//Strncpy_t(port,rPack->sbank_code2,sizeof(port));
	//baudrate=rPack->lvol6;
	//comtype=rPack->lvol7;
	//Strncpy_t(bsheetvdate,rPack->sserial0,sizeof(bsheetvdate));
	//Strncpy_t(bsheetver,rPack->sserial1,sizeof(bsheetver));
	//lasttraserno=rPack->lvol8;
	//Strncpy_t(lasttradate,rPack->scust_auth2,sizeof(lasttradate));
	//lastshutserno=rPack->lvol9;
	//Strncpy_t(lastshutdate,rPack->sname,sizeof(lastshutdate));
	//Strncpy_t(syspwd,rPack->schange_emp,sizeof(syspwd));
	//Strncpy_t(admpwd,rPack->scheck_emp,sizeof(admpwd));
	//pwdonoff=rPack->lvol10;
	//Strncpy_t(puserno,rPack->sbranch_code0,sizeof(puserno));
	//Strncpy_t(cardset,rPack->saddr2,sizeof(cardset));
	//Strncpy_t(funonoff,rPack->scurrency_type2,sizeof(funonoff));
	//cardusenum=rPack->lvol11;
	//maxdeposit=rPack->lvol12;
	//mindeposit=rPack->lcert_code;
	//ration=rPack->lsafe_level;
	//maxtrade=rPack->lsafe_level2;
	//Strncpy_t(shuttimes,rPack->sall_name,sizeof(shuttimes));
	//Strncpy_t(card65pwd,rPack->sbankname,sizeof(card65pwd));
	//Strncpy_t(authpwd,rPack->sbankname2,sizeof(authpwd));
	//ftflag=rPack->lwithdraw_flag;
	//phytype=rPack->lbank_acc_type;
	//web_level=rPack->lbank_acc_type2;
	//subsystem_id=rPack->lserial0;
	area1=rPack->lvol3;
	//Strncpy_t(init_key,rPack->scust_limit,sizeof(init_key));
	des2src(manager1,rPack->sname2);
	des2src(tel1,rPack->sphone);
	des2src(address1,rPack->scusttypes);
	//getsysdatetime(operate_time);
	des2src(comments1,rPack->ssectypes);


	EXEC SQL UPDATE ykt_cur.t_pif_device SET
		device_name=:device_name,
		dev999_id=:dev999_id,
		devphy999_id=:devphy999_id,
		dev999_no=:dev999_no,
		devtype=:devtype,
		devversion=:devversion,
		cardstr=:cardstr,
		cardtype=:cardtype,
		portcount=:portcount,
		fdev_id=:fdev_id,
		portno=:portno,
		state_id=:state_id,
		joinmode=:joinmode,
		comadd=:comadd,
		port=:port,
		baudrate=:baudrate,
		comtype=:comtype,
		bsheetvdate=:bsheetvdate,
		bsheetver=:bsheetver,
		lasttraserno=:lasttraserno,
		lasttradate=:lasttradate,
		lastshutserno=:lastshutserno,
		lastshutdate=:lastshutdate,
		syspwd=:syspwd,
		admpwd=:admpwd,
		pwdonoff=:pwdonoff,
		puserno=:puserno,
		cardset=:cardset,
		funonoff=:funonoff,
		cardusenum=:cardusenum,
		maxdeposit=:maxdeposit,
		mindeposit=:mindeposit,
		ration=:ration,
		maxtrade=:maxtrade,
		shuttimes=:shuttimes,
		card65pwd=:card65pwd,
		authpwd=:authpwd,
		ftflag=:ftflag,
		phytype=:phytype,
		web_level=:web_level,
		subsystem_id=:subsystem_id,
		area=:area1,
		init_key=:init_key,
		manager=:manager1,
		tel=:tel1,
		address=:address1,
		operate_time=:operate_time,
		comments=:comments1
	WHERE current of device_cur;
	ret=SQLCODE;
	if(ret)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		EXEC SQL  CLOSE device_cur;
		if(DB_NOTFOUND==ret)
			*pRetCode=E_DB_DEVICE_N;
		else
			*pRetCode=E_DB_DEVICE_U;
		goto L_RETU;
	}

	EXEC SQL  CLOSE device_cur;
	return 0;
L_RETU:
	return -1;
}

