/* ----------------------------------------------------------
 * 程序名称：statum.sqc
 * 创建日期：2011-01-17 14:58
 * 程序作者：xlh
 * 版本信息：1.0.0.0
 * 程序功能：结算过程的主程序
 * ----------------------------------------------------------

 * ----------------------------------------------------------*/	
#define _IN_SQC_
#include <string.h>
#include <stdio.h>
#include "syslog.h"
#include "errdef.h"
#include "balance.h"
#include "mypub.h"
#include "pubfunc.h"
#include "logfile.h"
#include "profile.h"
#include "dbfunc.h"

#define DEBUG
EXEC SQL INCLUDE SQLCA;

 

long SQLConnectToServer(char *db_name,char *db_user,char *db_password);
void SQLExit();
void PrintBalaMessage(char *buffer);

int statumgenerate()
{

	EXEC SQL BEGIN DECLARE SECTION;
		char 	hi_logic_date7[8+1]="";
	EXEC SQL END DECLARE SECTION;
	int ret=0;

	ret=GetLogicDate(hi_logic_date7);
	if(ret)
	{
		writelog(LOG_ERR,"GetLogicDate error,errcode=[%d]",ret);
		return ret;
	}

	EXEC SQL INSERT INTO YKT_CUR.T_TIF_REPORT_STADIUM
		select  :hi_logic_date7,FEE_NUM,AMT,FREE_NUM,VIP_NUM,CARD_NUM from 
		(select count(*) as FEE_NUM from YKT_CUR.T_STATIUM_RCVDTL where AMOUNT > 0 and STATUS = '2' and OUT_DATE=:hi_logic_date7) t1,
		(select sum(AMOUNT) as AMT  from YKT_CUR.T_STATIUM_RCVDTL where STATUS = '2' and OUT_DATE=:hi_logic_date7) t2,
          	(select count(*) as FREE_NUM from YKT_CUR.T_STATIUM_RCVDTL where AMOUNT = 0 and VIP_FLAG='0' and STATUS = '2' and OUT_DATE=:hi_logic_date7) t3,
          	(select count(*) as VIP_NUM from YKT_CUR.T_STATIUM_RCVDTL where AMOUNT = 0 and VIP_FLAG='1' and STATUS = '2' and OUT_DATE=:hi_logic_date7) t3,
          	(select  count(distinct CARD_NO)  as CARD_NUM  from YKT_CUR.T_STATIUM_RCVDTL where STATUS = '2' and OUT_DATE=:hi_logic_date7) t4;

	ret=SQLCODE;
	if(ret)
	{
		if(100 == ret )
		{
			writelog(LOG_ERR,"Record what Insert into table T_TIF_REPORT_DEPTTRADE is null");
			return 0;
		}
		else
		{
			writelog(LOG_ERR,"Insert into table T_TIF_REPORT_DEPTTRADE error,errcode=[%d]",ret);
			return(ret);
		}
	}

	ret=db_commit();
	if(ret)
	{
		writelog(LOG_ERR,"db_commit ret[%d]",ret);
		db_rollback();
		return 	ret;
	}
	return 0;

}
int BackupstatumData()
{

	EXEC SQL BEGIN DECLARE SECTION;
		char 	hi_logic_date8[8+1]="";
		char        hi_time[7];
	EXEC SQL END DECLARE SECTION;
	int ret=0;

	ret=GetLogicDate(hi_logic_date8);
	if(ret)
	{
		writelog(LOG_ERR,"GetLogicDate error,errcode=[%d]",ret);
		return ret;
	}
	getdbtime(hi_time);

	EXEC SQL INSERT INTO YKT_HIS.T_STATIUM_RCVDTL_HIS
		select :hi_logic_date8,:hi_time,DEVICE_ID,CARD_NO,SERIAL_NO,VIP_FLAG ,AMOUNT,STATUS,in_DATE,in_TIME,OUT_DATE,OUT_TIME
         from YKT_CUR.T_STATIUM_RCVDTL where STATUS='2' and OUT_DATE=:hi_logic_date8;

	ret=SQLCODE;
	if(ret)
	{
		if(100 == ret )
		{
			writelog(LOG_ERR,"Record what Insert into table T_TIF_REPORT_DEPTTRADE is null");
			return 0;
		}
		else
		{
			writelog(LOG_ERR,"Insert into table T_TIF_REPORT_DEPTTRADE error,errcode=[%d]",ret);
			return(ret);
		}
	}

	ret=db_commit();
	if(ret)
	{
		writelog(LOG_ERR,"db_commit ret[%d]",ret);
		db_rollback();
		return 	ret;
	}
	return 0;

}

int DelstatumData()
{

	 EXEC SQL BEGIN DECLARE SECTION;
		char 	hi_logic_date6[8+1]="";

	EXEC SQL END DECLARE SECTION;
	int ret=0;

	ret=GetLogicDate(hi_logic_date6);
	if(ret)
	{
		writelog(LOG_ERR,"GetLogicDate error,errcode=[%d]",ret);
		return ret;
	}
	

	EXEC SQL delete from  YKT_CUR.T_STATIUM_RCVDTL where STATUS='2' and OUT_DATE=:hi_logic_date6;

	ret=SQLCODE;
	if(ret)
	{
		if(100 == ret )
		{
			writelog(LOG_ERR,"Record what  delete  YKT_CUR.T_STATIUM_RCVDTL fails");
			return 0;
		}
		else
		{
			writelog(LOG_ERR,"delete  YKT_CUR.T_STATIUM_RCVDTL error,errcode=[%d]",ret);
			return(ret);
		}
	}

	ret=db_commit();
	if(ret)
	{
		writelog(LOG_ERR,"db_commit ret[%d]",ret);
		db_rollback();
		return 	ret;
	}
	return 0;

}



long SQLConnectToServer(char *db_name,char *db_user,char *db_password)
{
   EXEC SQL BEGIN DECLARE SECTION;
	char szConnectToDatabase[32] = "";
	char szConnectToLogin[32] = "";
	char szConnectToPassword[32] = "";
   EXEC SQL END DECLARE SECTION;

	strcpy(szConnectToDatabase,db_name);
   	strcpy(szConnectToLogin,db_user);
	strcpy(szConnectToPassword,db_password);


   // attempt connection to db2-Server
	EXEC SQL CONNECT TO :szConnectToDatabase USER :szConnectToLogin USING :szConnectToPassword;

	if (SQLCODE != 0)
	{
		return(SQLCODE);
	}
	return 0;
}


void SQLExit()
{
	EXEC SQL CONNECT RESET;
}

void PrintBalaMessage(char *buffer)
{
	char time1[10]="";
	char date1[10]="";
	getdbtime(time1);
	getdbdate(date1);

	printf("%s:",date1);
	printf("%s bala:",time1);
	printf("%s",buffer);
	printf("\n");
}

 /////////////////////////////////////////////////////////////////////////


int   main(int   argc,   char*   argv[]) 
{

	int ret=0;
	
	openlog("statum",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL4);

	TIniFile tf;
	char db_name[32]="";
	char db_user[32]="";
	char db_password[32]="";
	char time[10]="";
	char date[12]="";
	char inifile[256]="";
	char *p=getenv("BIN_PATH");
	if(p==NULL)
	{
	   	writelog(LOG_ERR,"Cann't get env HOME PATH\n");
	   	return -1;
	}
	sprintf(inifile,"%s/bala.ini",p);
	if (!tf.Open(inifile))
	{
	   	writelog(LOG_ERR,"Cann't open ini file,file=[%s]\n",inifile);
	   	return -1;
	}
	if(-1==tf.ReadString("DB", "DB_NAME", "yktbase", db_name,sizeof(db_name)))
	{
	   	writelog(LOG_ERR,"Cann't read from ini file");
	}
	if(-1==tf.ReadString("DB", "DB_USER", "yktinst1", db_user,sizeof(db_user)))
	{
	   	writelog(LOG_ERR,"Cann't read from ini file");
	}
	if(-1==tf.ReadString("DB", "DB_PASSWORD", "fdksykt", db_password,sizeof(db_password)))
	{
	   	writelog(LOG_ERR,"Cann't read from ini file");
	}

	tf.Close();
	

	getdbtime(time);
	getdbdate(date);
	int cnt=0;
	while(1)
	{
		ret=SQLConnectToServer(db_name,db_user,db_password);
		if (ret)
	   	{
	   		writelog(LOG_ERR,"Cann't connect to database,errcode=[%d],db_name=[%s],db_user=[%s]",ret,db_name,db_user);;
			sleep(10);
			if(cnt<=3)
			{
				cnt++;
				continue;
			}
			else
			{
		   		printf("%s:",date);
		   		printf("%s bala:",time);
				printf("连接数据库失败!\n");
		      		return(-100);
			}
	   	}
		else
		{
			printf("%s:",date);
			printf("%s bala:",time);
			printf("连接数据库成功!\n");
			break;
		}

	}
    
	//生成 账户交易情况表--领导查询需要
	ret=statumgenerate();
	if(ret)
	{
		PrintBalaMessage("生成交易情况报表失败!");
		writelog(LOG_ERR,"Generate dept trade report table failed!");
	}
	else
	{
		PrintBalaMessage("生成交易情况表成功!");
	}	
	//备份体育场交易明细表和流水表
	ret=BackupstatumData();
	if(ret)
	{
		PrintBalaMessage("备份体育场交易明细/交易流水失败!");
		writelog(LOG_ERR,"Backup tradelog table and tradeserial table failed!");
		return ret;
	}
	else
	{
		PrintBalaMessage("备份体育场交易明细/交易流水成功!");
	}
	

	ret=DelstatumData();
	if(ret)
	{
		PrintBalaMessage("清理当日交易明细/交易流水失败!");
		writelog(LOG_ERR,"Delete tradelog and tradeserial table today failed!");
		return ret;
	}
	else
	{
		PrintBalaMessage("清理当日交易明细/交易流水成功!");
	}	
	closelog();
	SQLExit();
	
	return 0;
}


