/* ----------------------------------------------------------
 * 程序名称：F847316
 * 创建日期：2007-07-18
 * 程序作者：何林青
 * 版本信息：1.0.0.0
 * 程序功能：多媒体手机充值业务
 * ----------------------------------------------------------
 * ----------------------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include<sys/types.h>
ESQL #include<sys/ipc.h>
ESQL #include<sys/sem.h>
ESQL #include<sys/shm.h>
ESQL #include <signal.h>
ESQL #include "errdef.h"
ESQL #include "pubdb.h"
ESQL #include "fdsqc.h"
ESQL #include "dbfunc.h"
ESQL #include "pubfunc.h"
ESQL #include "account.h"
ESQL #include "tcp.h"
ESQL #include "ext_consumer.h"
ESQL #include "rsa.h"


#ifndef	SEGSIZE
	#define 	SEGSIZE	1024
#endif
#ifndef DEBUG
	#define DEBUG
#endif


//#ifdef __cplusplus
//extern "C" {
//#endif 




/*
//写卡失败冲正(实际并不冲正，只是改写卡状态)
static int Reset_WriteErrCard(ST_PACK *in_pack,TRUSERID *handle,int *pRetCode,char *szMsg)
{
  int ret = 0;
    T_t_pif_card tCard;
    T_t_tif_tradeserial tTradeSerial;
    T_t_tif_writefailed tWriteFailed;
    char logicdate[11] = "";
    double dUniqNo = 0; 
    
    memset(&tCard, 0, sizeof tCard);
    memset(&tTradeSerial, 0, sizeof tTradeSerial);
    memset(&tWriteFailed, 0, sizeof tWriteFailed);
    

    ret = DB_t_tif_tradeserial_read_by_serial_no(in_pack->lvol1,&tTradeSerial);  //消费流水号
    if (ret)
    {
        writelog(LOG_DEBUG,"输入号不存在消费流水号[%d]",in_pack->lvol1);
        if (DB_NOTFOUND == ret)
        {
            *pRetCode = E_DB_TRADESERIAL_N;
        }
        else
        {
            *pRetCode = E_DB_TRADESERIAL_R;
        }
        goto L_RETU;
    }
    
    ret = DB_t_pif_card_read_lock_by_cur_and_card_id(tTradeSerial.card_id,&tCard);
    if (ret)
    {
        if (DB_NOTFOUND == ret)
        {
            *pRetCode = E_DB_CARD_N;
        }
        else
        {
            *pRetCode = E_DB_CARD_R;
        }
        goto L_RETU;
    }
    
    GetLogicDate(logicdate);
    tWriteFailed.card_id = tCard.card_id;
    des2src(tWriteFailed.tx_date,logicdate);
    writelog(LOG_INFO,"大钱包交易金额[%f]",tTradeSerial.trade_fee);


    tCard.state_id[CARDSTAT_TYPE_WFAIL] = STATE_TRUE;
    ret = DB_t_pif_card_update_lock_by_cur(&tCard);
    if (ret)
    {
        *pRetCode = E_DB_CARD_U;
         goto L_RETU;
    }
    DB_t_pif_card_free_lock_by_cur();

        // 大钱包写卡失败
        ret = getNewUniqNo(KEYTYPE_WRITEFAILED, &dUniqNo);              //获得写卡失败表最大ID号
        if (ret)
        {
            writelog(LOG_ERR,"ret[%d]",ret);
            *pRetCode = ret;
            goto L_RETU;
        }
        tWriteFailed.id = D2I(dUniqNo);
        tWriteFailed.serial_no = tTradeSerial.serial_no;
        tWriteFailed.serial_type = tTradeSerial.serial_type;
        tWriteFailed.purese_no = PURSE_NO_ONE;
        tWriteFailed.deal_flag[0] = CARDWFAIL_PACKET_DEAL_FLAG_Y;
        tWriteFailed.deal_bala = tTradeSerial.trade_fee;
        des2src(tWriteFailed.comments, "大钱包写卡失败");
        ret = DB_t_tif_writefailed_add(&tWriteFailed);
        if (ret)
        {
            *pRetCode = E_DB_WRITEFAILED_I;
            goto L_RETU;
        }        
    return 0;
L_RETU:
	return -1;	

}

*/



int F847316(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{

	int ret=0;
	int cardId = 0;
	int tradecode=0;
	ext_consumer_request_t request_code;
	transfer_control_t trans_ctl;
	InAcc IA;
	T_t_tif_tradeserial tradeserial;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);


	// 用于根据请求包整理本CPACK包的头清空包头位图和包体中的数据
	ResetNormalCPack(&aPack,0,1);


	//判断交易代码，进行相应处理

	SetCol(handle,0);
   	SetCol(handle,F_LVOL0,F_LVOL1,F_DAMT0,F_DAMT1,F_DAMT2,F_VSMESS,0);

	memset(&IA,0,sizeof(IA));
	memset(&tradeserial,0,sizeof tradeserial);
	tradecode = in_pack->lcert_code;
	cardId = in_pack->lvol0;
	if(amtcmp(in_pack->damt0,in_pack->damt1)<0)
	{
		writelog(LOG_ERR,"card balance[%lf] trans amt[%lf]",in_pack->damt0,in_pack->damt1);
		*pRetCode=E_BALANCE_SHORTAGE;
		goto L_RETU;

	}
	writelog(LOG_ERR,"Third part transfer business start func=847316,trade code=[%d],card_id=[%d]!",tradecode,cardId);
	ret = ext_consumer_find_trade(tradecode, &request_code);		
	if(ret){
		writelog(LOG_ERR,"unsupported function ret=[%d]",ret);
		*pRetCode=ret;
		goto L_RETU;
	}
	if(request_code.pre_check_transfer)
	{
		ret = request_code.pre_check_transfer(in_pack,&trans_ctl);
	//	writelog(LOG_ERR,"ret=[%d]",ret);
		writelog(LOG_ERR,"trade pre_check failed , trade[%d]",tradecode);
		if(ret){
			*pRetCode=ret;
			goto L_RETU;
		}
	}
	if(1==trans_ctl.check_user_pwd){
		//CheckUserPswd(in_pack->semp_pwd,
	}
	ret = request_code.search_thirdparty_account(in_pack,request_code.tx_code,&IA);
	if(ret){
		writelog(LOG_ERR,"trade search account failed , trade[%d],ret[%d]",tradecode,ret);
		*pRetCode=ret;
		goto L_RETU;
	}	
	ret = tend_to_enter_account(in_pack,&IA, request_code.tx_code,&tradeserial);
	if(ret){
		*pRetCode=ret;
		writelog(LOG_ERR,"trade tend enter account failed , trade[%d],ret[%d]",tradecode,ret);
		goto L_RETU;
	}
	ret = record_serial(in_pack, &tradeserial, out_pack);
	if(ret){
		*pRetCode=ret;
		writelog(LOG_ERR,"trade record serial failed , trade[%d],ret[%d]",tradecode,ret);
		goto L_RETU;
	}
	if(request_code.record_small_serial){
		ret=request_code.record_small_serial(in_pack,&tradeserial,out_pack);
		if(ret){
			*pRetCode=ret;
			writelog(LOG_ERR,"trade record small serial failed , trade[%d],ret[%d]",tradecode,ret);
			goto L_RETU;
		}
	}
	
	PutRow(handle,out_pack,pRetCode,szMsg);
	
	return 0;


L_RETU:

	//writelog(LOG_ERR,"Trade faild,trade code=[%s],return code=[%d]!",to_pos.TradeCode,*pRetCode);
	return -1;

}

//#ifdef __cplusplus
//}
//#endif 



