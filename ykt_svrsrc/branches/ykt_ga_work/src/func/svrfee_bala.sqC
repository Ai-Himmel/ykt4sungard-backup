/* ----------------------------------------------------------
 * 程序名称：svr_fee_bala.sqc
 * 创建日期：2009-11-23
 * 程序作者：王彦兵
 * 版本信息：1.0.0.0
 * 程序功能：服务费结算
 * ----------------------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "syslog.h"
ESQL #include "errdef.h"
ESQL #include "balance.h"
ESQL #include "mypub.h"
ESQL #include "pubfunc.h"
ESQL #include "logfile.h"
ESQL #include "profile.h"
ESQL #include "dbfunc.h"

#define DEBUG


long SQLConnectToServer(char *db_name,char *db_user,char *db_password);
void SQLExit();
void PrintBalaMessage(char *buffer);

int svr_fee_bala(char *bala_date)
{
	 EXEC SQL BEGIN DECLARE SECTION;
		char 		h_sqlcmd[1024]="";
		char 		ho_opcode[10] = "";
		sqlint32	ho_seritype=0;
		sqlint32	ho_totalcnt=0;
		sqlint16 	ind=0;
		double		ho_total_amt = 0;
     EXEC SQL END DECLARE SECTION;
	 int ret = 0;
	 int row = 0;
	 T_t_tif_report_svr_fee tSvrfee;
	 memset(&tSvrfee,0,sizeof tSvrfee);
	
	if(strlen(bala_date)>0)			// 结算历史的
 	{
		sprintf(h_sqlcmd,"select seri_type, record_oper,count(*),sum(op_fee) from ykt_his.t_tif_tradelog_his \
			where operate_date='%s' and act_id = '1051' or act_id = '2141' or act_id = '5051' \
			group by seri_type,record_oper",bala_date);	
 	}
	else
	{
		GetLogicDate(bala_date);
		strcpy(h_sqlcmd,"select seri_type, record_oper,count(*),sum(op_fee) from t_tif_tradelog \
			where act_id = '1051' or act_id = '2141' or act_id = '5051' group by seri_type,record_oper");		
	}

	printf("bala_date[%s]\n",bala_date);
	ret = DB_t_tif_report_svr_fee_del_by_balance_date(bala_date);
	if(ret!=0 && ret!= DB_NOTFOUND)
		return E_DB_RPT_SVR_FEE_D;
	
	EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
	if( SQLCODE )
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;		 
	}

	EXEC SQL DECLARE svr_fee_cur CURSOR FOR query_stmt;
	if( SQLCODE )
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_DECLARE;		 
	}
	EXEC SQL OPEN svr_fee_cur ;
	if(SQLCODE)
	{
		db_chk_err(__FILE__,__LINE__,&sqlca);
		return E_DB_CURSOR_OPEN;
	}
	
	while(1)
	{
		ho_seritype = 0;
		ho_totalcnt = 0;
		ho_total_amt = 0;
		memset(ho_opcode,0,sizeof ho_opcode);
		memset(&tSvrfee,0,sizeof tSvrfee);
		EXEC SQL FETCH svr_fee_cur INTO :ho_seritype:ind,:ho_opcode:ind,:ho_totalcnt:ind,:ho_total_amt:ind;
		
		if(SQLCODE)
		{
			ret = SQLCODE;
			db_chk_err(__FILE__,__LINE__,&sqlca);
			EXEC SQL CLOSE svr_fee_cur;
			if(DB_NOTFOUND==ret)
			{
				if(row)						
					break;
				return E_DB_TRADELOG_N;
			}
			else
			{
				return E_DB_CURSOR_FETCH;
			}
		}	
		des2src(tSvrfee.balance_date,bala_date);
		des2src(tSvrfee.op_code,ho_opcode);
		tSvrfee.seri_type = ho_seritype;
		tSvrfee.total_cnt = ho_totalcnt;
		tSvrfee.total_amt = ho_total_amt;
		ret = DB_t_tif_report_svr_fee_add(&tSvrfee);
		if(ret)
			return E_DB_RPT_SVR_FEE_I;
		row++;
	}
	
	printf("row[%d]\n",row);
	return 0;
}
 /////////////////////////////////////////////////////////////////////////

EXEC SQL INCLUDE SQLCA;
int  main(int argc,char *argv[])
{
	int ret=0;
	//char buffer[50+1]="";
	char bala_date[9]="";	
	openlog("svr_fee_bala",LOG_PID|LOG_CONS|LOG_NDELAY,LOG_LOCAL4);

	TIniFile tf;
	char db_name[32]="";
	char db_user[32]="";
	char db_password[32]="";
	char db_authtype[10] = "";
	char time[10]="";
	char date[12]="";
	char inifile[256]="";
	char *p=getenv("BIN_PATH");
	if(p==NULL)
	{
	   	writelog(LOG_ERR,"Cann't get env HOME PATH\n");
	   	return -1;
	}
	sprintf(inifile,"%s/bala.ini",p);
	if (!tf.Open(inifile))
	{
	   	writelog(LOG_ERR,"Cann't open ini file,file=[%s]\n",inifile);
	   	return -1;
	}
	if(-1 == tf.ReadString("DB","AUTH_TYPE","env",db_authtype,sizeof db_authtype))
	{
		writelog(LOG_ERR,"cann't read from ini file!");
	}
	if(strcmp(db_authtype,"env")==0)
	{
		if((p = getenv("YKT_DBNAME")) !=NULL)
		{
			strncpy(db_name,p,sizeof(db_name) -1 );
		}
		if((p = getenv("YKT_USER")) !=NULL)
		{
			strncpy(db_user,p,sizeof(db_user) - 1);
		}
		if((p = getenv("YKT_PWD")) != NULL)
		{
			strncpy(db_password,p,sizeof(db_password) - 1);
		}
		
	}
	else if(strcmp(db_authtype,"config") == 0)
	{
		if(-1==tf.ReadString("DB", "DB_NAME", "yktbase", db_name,sizeof(db_name)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
		if(-1==tf.ReadString("DB", "DB_USER", "yktinst1", db_user,sizeof(db_user)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
		if(-1==tf.ReadString("DB", "DB_PASSWORD", "fdksykt", db_password,sizeof(db_password)))
		{
		   	writelog(LOG_ERR,"Cann't read from ini file");
		}
	}
	else
	{
		writelog(LOG_ERR,"unknown auth type!");
	}
	tf.Close();

	getdbtime(time);
	getdbdate(date);
	int cnt=0;
	while(1)
	{
		ret=SQLConnectToServer(db_name,db_user,db_password);
		if (ret)
	   	{
	   		writelog(LOG_ERR,"Cann't connect to database,errcode=[%d],db_name=[%s],db_user=[%s]",ret,db_name,db_user);;
			sleep(10);
			if(cnt<=3)
			{
				cnt++;
				continue;
			}
			else
			{
		   		printf("%s:",date);
		   		printf("%s bala:",time);
				printf("连接数据库失败!\n");
		      		return(-100);
			}
	   	}
		else
		{
			printf("%s:",date);
			printf("%s bala:",time);
			printf("连接数据库成功!\n");
			break;
		}

	}

	if(argc == 2)
	{
		ret = IsInvalidDateTime(argv[1],"YYYYMMDD");
		if(ret)
		{
			printf("结算日期格式不正确\n");
			closelog();
			SQLExit();			
			return ret;
		}
		des2src(bala_date,argv[1]);
	}
	ret = svr_fee_bala(bala_date);
	if(ret)
		printf("svr_fee_bala fail,ret[%d]!\n",ret);
	closelog();
	SQLExit();
	return 0;
}

long SQLConnectToServer(char *db_name,char *db_user,char *db_password)
{
   EXEC SQL BEGIN DECLARE SECTION;
	char szConnectToDatabase[32] = "";
	char szConnectToLogin[32] = "";
	char szConnectToPassword[32] = "";
   EXEC SQL END DECLARE SECTION;

	strcpy(szConnectToDatabase,db_name);
   	strcpy(szConnectToLogin,db_user);
	strcpy(szConnectToPassword,db_password);


   // attempt connection to db2-Server
#ifdef ESQL_DB2	
	EXEC SQL CONNECT TO :szConnectToDatabase USER :szConnectToLogin USING :szConnectToPassword;
#else
	EXEC SQL CONNECT :szConnectToLogin IDENTIFIED BY :szConnectToPassword USING :szConnectToDatabase;
#endif

	if (SQLCODE != 0)
	{
		return(SQLCODE);
	}
	return 0;
}


void SQLExit()
{
#ifdef ESQL_DB2
	EXEC SQL CONNECT RESET;
#else
	EXEC SQL COMMIT WORK RELEASE;
#endif
}

void PrintBalaMessage(char *buffer)
{
	char time1[10]="";
	char date1[10]="";
	getdbtime(time1);
	getdbdate(date1);

	printf("%s:",date1);
	printf("%s bala:",time1);
	printf("%s",buffer);
	printf("\n");
}
