/* --------------------------------------------
 * 程序名称: F848257.c
 * 创建日期: 2007-04-03
 * 程序作者: 汤成
 * 版本信息: 1.0.0.0
 * 程序功能:门禁组管理
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/
#define _IN_SQC_
ESQL #include <string.h>
ESQL #include <stdio.h>
ESQL #include "pubfunc.h"
ESQL #include "pubdb.h"
ESQL #include "pubdef.h"
ESQL #include "errdef.h"
ESQL #include "dbfunc.h"
ESQL #include "fdsqc.h"
ESQL #include "dbfunc_foo.h"

static int GetDoor_Device_by_Group(int * group_id,char * device_group);

static int GetDoor_Device_by_Group(int * group_id,char * device_group)
{
	EXEC SQL BEGIN DECLARE SECTION;
	sqlint32 device_no = 0;
	char Sql_Cmd[1024] = "";
	sqlint16 ider;
	EXEC SQL END DECLARE SECTION;
	char out_device_list[255] = "";
	sqlint32 in_group_id = *group_id;
	char out_device_id[100]="";
	int ret = 0; 
	int counts = 0;
	memset(Sql_Cmd,0,sizeof(Sql_Cmd));
	memset(out_device_list,0,sizeof(out_device_list));
	sprintf(Sql_Cmd,"select b.device_id from ykt_cur.t_door_group_member a left join ykt_cur.t_pif_device b on a.device_id=b.device_id where a.group_id=%d ",in_group_id);

	EXEC SQL PREPARE stmts FROM :Sql_Cmd;
    if(SQLCODE)
    	return SQLCODE;
	EXEC SQL DECLARE DS CURSOR FOR stmts;
	if(SQLCODE)
		return	SQLCODE;
	EXEC SQL OPEN DS;
	if(SQLCODE)
		return SQLCODE;
	while(1)
	{
		device_no = 0;
		memset(out_device_id,0,sizeof(out_device_id));
		
		EXEC SQL FETCH  DS INTO
		:device_no:ider;
		if(SQLCODE)
		{
			ret = SQLCODE;
			EXEC SQL CLOSE DS;
			if(ret == DB_NOTFOUND)
			{
				if(counts)
					break;
				else
					return ret;
			}
			else
				return ret;
		}
		if(!strlen(out_device_list))		
			sprintf(out_device_id,"%d",device_no);
		else
			sprintf(out_device_id,",%d",device_no);	
		strcat(out_device_list,out_device_id);
		
		counts++;
		}
	//writelog(LOG_ERR,"GetDoor_Device_by_Group device_group=[%s]",device_group);
	des2src(device_group,out_device_list);
	return 0;	
}

static int Read848257(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char ho_grpname[61]= "";
	sqlint32 ho_grpid = 0;
	sqlint32 ho_flag = 0;
	sqlint16 ho_indr = 1;
	char sqlcmd[1024] = "";
	EXEC SQL END DECLARE SECTION;
	char sqltmp[128];
	int test_i = 0;
	char test_char[255+1] = "";
	int rows;
	int ret;
	ST_CPACK aPack;
	ST_PACK *out_pack = &(aPack.pack);
	sprintf(sqlcmd,"SELECT GROUP_ID,GROUP_NAME,FLAG \
	FROM YKT_CUR.T_DOOR_GROUP WHERE 1=1 ");

	if(strlen(in_pack->semail) > 0)
	{
		sprintf(sqltmp," AND GROUP_NAME LIKE '%%%s%%' ",in_pack->semail);
		strcat(sqlcmd,sqltmp);
	}

	if(!unlike_tbl_id(in_pack->lvol0))
	{
		sprintf(sqltmp," AND GROUP_ID=%d ",in_pack->lvol0);
		strcat(sqlcmd,sqltmp);
	}

	

	EXEC SQL PREPARE stmt FROM :sqlcmd;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_PREPARE;
	}
	EXEC SQL DECLARE cur CURSOR FOR stmt;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_DECLARE;
	}
	EXEC SQL OPEN cur;
	if(SQLCODE)
	{
		CHECK_DB_ERR;
		return E_DB_CURSOR_OPEN;
	}

	memset(&aPack,0,sizeof aPack);
	rows=0;
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,0);
	SetCol(handle,F_SEMAIL,F_LVOL0,F_LVOL1,F_VSVARSTR0,0);
	while(1)
	{
		memset(ho_grpname,0,sizeof ho_grpname);
		ho_grpid = 0;
		ho_flag = 0;
		EXEC SQL FETCH cur INTO :ho_grpid:ho_indr,:ho_grpname:ho_indr,:ho_flag:ho_indr;
		if(SQLCODE)
		{
			ret = SQLCODE;
			CHECK_DB_ERR;
			EXEC SQL CLOSE cur;
			if(DB_NOTFOUND == ret)
			{
				if(rows > 0)
					break;
				return E_DB_DOOR_GROUP_N;
			}
			return E_DB_DOOR_GROUP_R;
		}
		rows++;
		out_pack->lvol0 = ho_grpid;
		out_pack->lvol1 = ho_flag;
		des2src(out_pack->semail,ho_grpname);
		test_i = ho_grpid;
		ret=GetDoor_Device_by_Group(&test_i,test_char);
		if(!ret)
			des2src(out_pack->vsvarstr0, test_char);
		PutRow(handle,out_pack,pRetCode,szMsg);
		if(rows % 20 == 0)
			AnswerDataPart(handle,*pRetCode,szMsg);
	}
	AnswerData(handle,*pRetCode,szMsg);
	return 0;
}

static int Add848257(ST_PACK *in_pack)
{
	T_t_door_group group;
	int ret;
	memset(&group,0,sizeof group);

	if(strlen(in_pack->semail) < 1)
		return E_INPUT_ERROR;

	ret = ora_gen_sequence(KEYTYPE_DOOR_GROUP,&(group.group_id));
	if(ret)
		return ret;
	
	des2src(group.group_name,in_pack->semail);
	group.flag = DOOR_FLAG_NORMAL;
	ret = DB_t_door_group_add(&group);
	if(ret)
	{
		if(DB_REPEAT == ret)
			return E_DB_DOOR_GROUP_E;
		return E_DB_DOOR_GROUP_I;
	}
	return 0;
}

static int Delete848257(ST_PACK *in_pack)
{
	int ret;

	if(unlike_tbl_id(in_pack->lvol0))
		return E_INPUT_ERROR;

	ret = DB_t_door_group_del_by_group_id(in_pack->lvol0);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_GROUP_N;
		return E_DB_DOOR_GROUP_R;
	}
	ret = DB_t_door_group_member_del_by_group_id(in_pack->lvol0);
	if(ret)
	{
		if(ret != DB_NOTFOUND)
			return E_DB_DOOR_GROUP_MEMBER_D;
	}
	return 0;
}

static int Update848257(ST_PACK *in_pack)
{
	T_t_door_group group;
	int ret;
	memset(&group,0,sizeof group);

	if(unlike_tbl_id(in_pack->lvol0))
	{
		return E_INPUT_ERROR;
	}
	if(strlen(in_pack->semail) < 1)
		return E_INPUT_ERROR;

	ret = DB_t_door_group_read_by_group_id(in_pack->lvol0,&group);
	if(ret)
	{
		if(DB_NOTFOUND == ret)
			return E_DB_DOOR_GROUP_N;
		return E_DB_DOOR_GROUP_R;
	}
	
	des2src(group.group_name,in_pack->semail);

	ret = DB_t_door_group_update_by_group_id(in_pack->lvol0,&group);
	if(ret)
	{
		if(DB_NOTFOUND== ret)
			return E_DB_DOOR_GROUP_N;
		return E_DB_DOOR_GROUP_I;
	}
	return 0;
}


int F848257(TRUSERID *handle,int iRequest,ST_PACK *in_pack,int *pRetCode,char *szMsg)
{
	int ret = 0;
	switch(in_pack->sstatus0[0])
	{
		//添加
		case 'A':
			ret=Add848257(in_pack);
			break;
		//删除
		case 'D':
			ret=Delete848257(in_pack);
			break;
		//查询
		case 'R':
			ret=Read848257(handle,iRequest,in_pack,pRetCode,szMsg);
			break;
		//修改
		case 'U':
			ret=Update848257(in_pack);
			break;
		default:
			ret=E_INPUT_DATA_INVAILD;
			break;
	}
	if(ret)
	{
		*pRetCode=ret;
		return -1;
	}
	return 0;
}
