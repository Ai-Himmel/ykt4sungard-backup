/* --------------------------------------------
 * 创建日期: 2010-12-01
 * 程序作者: 闻剑
 * 版本信息: 3.0.0.0
 * 程序功能: 对账单明细处理
 * --------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cpack.h"
#include "errdef.h"
#include "pubdef.h"
#include "pubdb.h"
#include "pubfunc.h"
#include "dbfunc.h"
#include "dbfunc_foo.h"
#include "acctrans.h"
#include "busqc.h"
#include <string>
#include <sstream>
using namespace std;
EXEC SQL INCLUDE SQLCA;
////////////////////////////////////////////////////////////////////////////////

static int doprocessbankchkdtl(CAccTrans *pAccTrans,T_t_bankchkdtl *pbankchkdtl)
{
	int ret;
	T_t_cardbalupdlist  cardbalupdlist;
	T_t_card card;
	T_t_account account;
	T_t_refno tRefno;
	T_t_transdtl transdtl;
	memset(&transdtl,0,sizeof(transdtl));
	memset(&cardbalupdlist,0,sizeof cardbalupdlist);
	memset(&card,0,sizeof card);
	memset(&account,0,sizeof account);
	memset(&tRefno,0,sizeof tRefno);

	ret = DB_t_card_read_by_cardno(pbankchkdtl->cardno, &card);
	if(ret)
	{
		return E_DB_CARDDTL_R;
	}

	ret = DB_t_account_read_by_accno(card.accno, &account);
	if(ret)
	{
		return E_DB_ACCOUNT_R;
	}
	if(account.status[0]!=STATUS_NORMAL)
	{
		return ERRINFO(E_CARDACC_LOGOUT,account.accno);
	}

	TRANS& trans=pAccTrans->trans;

	get_random(tRefno.mac);
	ret= GetNewRefno(tRefno.refno);
	if(ret)
		return ret;
	des2src(tRefno.lastsaved,trans.sysdatetime);
	des2src(tRefno.accdate,trans.transdate);
	des2src(tRefno.reqrefno, trans.voucherno);
	tRefno.termid = trans.termid;
	tRefno.termseqno = trans.termseqno;
	ret=DB_t_refno_add(&tRefno);
	if(ret)
	{
		if(DB_REPEAT==ret)
			return E_DB_REFNO_E;
		else
			return E_DB_REFNO_I;
	}

	// 入账记流水
	pAccTrans->trans.feetype=0;
	strcpy(pAccTrans->trans.cardaccno,account.accno);
	pAccTrans->trans.usecardflag=0;
	pAccTrans->trans.custid=account.custid;
	pAccTrans->trans.inputamt=pbankchkdtl->amount;

	trans.unusedamt = trans.inputamt;
	trans.transamt = trans.unusedamt;
	ret=pAccTrans->DoTransByTransType();
	if(ret)
		return ret;
	if(pAccTrans->trans.unusedamt>0)
		return E_INPUT_AMT;
	if(pAccTrans->trans.unusedamt<0)
		return E_AMT_LACK;

	des2src(transdtl.transdate,trans.transdate);
	des2src(transdtl.transtime,trans.transtime);
	strcpy(transdtl.accdate,trans.accdate);
	strcpy(transdtl.acctime,trans.acctime);
	transdtl.termid=trans.termid;
	transdtl.termseqno=trans.termseqno;
	transdtl.transcode=trans.transcode;
	transdtl.paytype=trans.fundtype;
	des2src(transdtl.voucherno,trans.voucherno);
	transdtl.cardno=card.cardno;
	transdtl.purseno=trans.purseno;
	transdtl.cardbefbal=trans.cardbefbal;
    	transdtl.amount=trans.inputamt;
	transdtl.managefee=trans.totalfeeamt;
	transdtl.cardaftbal=trans.cardaftbal;
	transdtl.custid=account.custid;
	des2src(transdtl.refno,tRefno.refno);
	des2src(transdtl.custname,account.accname);
	des2src(transdtl.opercode,trans.opercode);
	des2src(transdtl.showcardno,card.showcardno);
	GetStuempnoByCustid(transdtl.custid,transdtl.stuempno);
	transdtl.status[0]=DTLSTATUS_SUCCESS;
	ret=DB_t_transdtl_add(&transdtl);
	if(ret)
	{
	  if(DB_REPEAT==ret)
	    return E_DB_TRANSDTL_E;
	  else
	    return E_DB_TRANSDTL_I;
	}

	// 插入补助信息
	getsysdatetime(cardbalupdlist.batchno);
	cardbalupdlist.seqno =1;
	cardbalupdlist.cardno = account.cardno;
	cardbalupdlist.status[0]= 'N';
	cardbalupdlist.amount = pbankchkdtl->amount;
	cardbalupdlist.transcode = TC_BANKTRANSADD;
	des2src(cardbalupdlist.transdate,trans.transdate);
	ret=DB_t_cardbalupdlist_add(&cardbalupdlist);
	if(ret)
	{
		return E_DB_CARDBALUPDLIST_I;
	}

	return 0;
}
int F240034(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg)
{
	int ret=0;
    	CAccTrans *pAccTrans=CAccTrans::getInstance();
	T_t_bankchkdtl bankchkdtl;
	memset(&bankchkdtl,0,sizeof(bankchkdtl));


	bankchkdtl.bankid=rPack->lbank_acc_type;
	bankchkdtl.bankdate=atoi(rPack->sdate0);
	bankchkdtl.recordno=rPack->lserial0;
	if(strlen(rPack->vsvarstr0)<4)
	{
		ERRTIP("请输入备注信息(备注不能太短)");
		return E_COMMON_ERR;
	}

	ret=DB_t_bankchkdtl_read_lock_by_c0_and_bankid_and_bankdate_and_recordno(bankchkdtl.bankid,bankchkdtl.bankdate,bankchkdtl.recordno,&bankchkdtl);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_BANKCHKDTL_N;
		else
			return E_DB_BANKCHKDTL_R;
	}
	if(CHKRESULT_OK==bankchkdtl.chkresult[0])
	{
		DB_t_bankchkdtl_free_lock_by_c0();
		ERRTIP("对账一致,不需要补帐");
		return E_COMMON_ERR;
	}
	if(CHKRESULT_INIT==bankchkdtl.chkresult[0])
	{
		DB_t_bankchkdtl_free_lock_by_c0();
		ERRTIP("对账未完成,不能处理");
		return E_COMMON_ERR;
	}
	if(RESOLVED_ACC==bankchkdtl.resolved[0])
	{
		DB_t_bankchkdtl_free_lock_by_c0();
		ERRTIP("该交易已补帐");
		return E_COMMON_ERR;
	}

	pAccTrans->trans.termid=rPack->lwithdraw_flag;
	des2src(pAccTrans->trans.opercode,rPack->semp);
	pAccTrans->trans.transcode=TC_BANKTRANSADD;
	pAccTrans->trans.transtype =TRANSTYPE_BANKCHKADD;
	ret=pAccTrans->InitTrans();
	if(ret)
		return ret;
	ret=pAccTrans->GetTermSeqno();
	if(ret)
		return ret;

	ret = doprocessbankchkdtl(pAccTrans,&bankchkdtl);
	if(ret)
	{
		DB_t_bankchkdtl_free_lock_by_c0();
		ERRTIP("补帐处理失败");
		return E_COMMON_ERR;
	}

	des2src(bankchkdtl.resolved,rPack->sorder1);
	des2src(bankchkdtl.remark,rPack->vsvarstr0);
	des2src(bankchkdtl.opercode,rPack->semp);
	ret=DB_t_bankchkdtl_update_lock_by_c0(&bankchkdtl);
	if(ret)
	{
		if(DB_NOTFOUND==ret)
			return E_DB_BANKCHKDTL_N;
		else
			return E_DB_BANKCHKDTL_U;
	}
	ST_CPACK aPack;
	ST_PACK *outPack = &(aPack.pack);
	ResetNormalCPack(&aPack,0,1);
	SetCol(handle,F_VSMESS,0);
	strcpy(outPack->vsmess,"处理完成");
	return 0;
}
