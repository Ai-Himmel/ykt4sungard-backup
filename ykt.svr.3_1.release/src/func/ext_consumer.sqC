/* --------------------------------------------
 * 程序名称: Ext_consumer.cpp
 * 创建日期: 2007-08-16
 * 程序作者: hlq
 * 版本信息: 1.0.0.0
 * 程序功能: 第三方转账通用模块
 * --------------------------------------------*/
ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "dbfunc_foo.h"
ESQL #include "busqc.h"
ESQL #include "acctrans.h"
ESQL #include "ext_consumer.h"

#define PRE_CHEDK_ENTER_ACCOUNT_MOBILE_TRANS		240200		//手机充值
#define PRE_ENTER_ACCOUNT_WATER_TRANS	240201	//水控转账
#define TERMINAL_TRADE						240202
#define PRE_LOGIN_ELECT_TRANS				240203	 //爱力德电控转账
#define CHECK_ROOMNAME_ELECT_TRANS		240204      //常州电控转账
#define TURN_OVER	240405		//海事大学考试报名

extern CSvrLink g_SvrLink;

int updateBMStudentPayStatus(char *stuempNo) {
    EXEC SQL BEGIN DECLARE SECTION;
        char bm_stuempno[21]="";	//学号
        char bm_end_daytime[20]="";//报名结束时间
    EXEC SQL END DECLARE SECTION;
    des2src(bm_stuempno,stuempNo);

    getdatetime(bm_end_daytime);


    EXEC SQL
       update ykt_bm.bm_stu_bm r
       set r.if_pay = '2'
       where
       r.id in (select a.id from ykt_bm.bm_stu_bm a,ykt_bm.bm_test b,
       ykt_bm.bm_test_cat c
       where a.test_id=b.id and b.test_cat_id=c.id
       and a.student_no=:bm_stuempno and a.if_bm='1'
       and (b.bm_end_date||' '||b.bm_end_time)>=:bm_end_daytime
       and (a.if_pay is null or a.if_pay<>'1') and c.if_fee='1' and c.fee>0);

    if(SQLCODE) {
        if(DB_NOTFOUND==SQLCODE)
            return E_TURN_OVER_N;
        else
            return E_TURN_OVER_U;
    }
    return 0;

}


int getTurnOverFeebyStuempNO(char *stuempNo,double *outFee) {
    EXEC SQL BEGIN DECLARE SECTION;
        double  to_out_fee1 ;
        char 	to_stuempno[21]="";	//学号
        sqlint16	to_idr2 ;
    EXEC SQL END DECLARE SECTION;

    des2src(to_stuempno,stuempNo);

#ifdef ESQL_DB2
    EXEC SQL select sum(s.fee) into :to_out_fee1:to_idr2
    from ykt_bm.bm_stu_bm r,ykt_bm.bm_test_cat s,ykt_bm.bm_test t
    where r.test_id=t.id and  t.test_cat_id = s.id
    and r.student_no=:to_stuempno and r.if_bm='1'
    and r.if_pay ='2' and s.if_fee='1' ;
#else
    EXEC SQL select sum(s.fee) into :to_out_fee1:to_idr2
    from ykt_bm.bm_stu_bm r,ykt_bm.bm_test_cat s,ykt_bm.bm_test t
    where r.test_id=t.id and  t.test_cat_id = s.id
    and r.student_no=:to_stuempno and r.if_bm='1'
    and r.if_pay ='2' and s.if_fee='1' ;
#endif
    if(SQLCODE) {
        return E_TO_SQL_ERR;
    }

    *outFee = to_out_fee1;

    return 0;
}

int updateBminfoByStuempNo(char *stuempNo) {

    EXEC SQL BEGIN DECLARE SECTION;
        char 	bm_stuempno1[21]="";//学号
        char    bm_time1[15]="";//时间
    EXEC SQL END DECLARE SECTION;

    des2src(bm_stuempno1,stuempNo);
    getsysdatetime(bm_time1);

    writelog(LOG_ERR,"time stamp [%s] ",bm_time1);

    EXEC SQL
       update ykt_bm.bm_stu_bm r
       set r.fee_payed = (select s.fee from ykt_bm.bm_test_cat s,ykt_bm.bm_test t where t.test_cat_id=s.id and r.test_id=t.id)
       , r.pay_time = :bm_time1
       , r.if_pay = '1'
       where r.student_no=:bm_stuempno1 and r.if_bm='1' and r.if_pay='2';

    if(SQLCODE) {
        db_chk_err(__FILE__,__LINE__,&sqlca);
        writelog(LOG_ERR,"stuempno[%s] failed to update bm table sqlcode=[%d]",bm_stuempno1,SQLCODE);
        if(DB_NOTFOUND==SQLCODE)
            return E_TURN_OVER_N;
        else
            return E_TURN_OVER_U;
    }
    return 0;

}

int SetHeadCol(ST_CPACK *in_cpack, ...) {
    va_list ap;
    int arg;
    va_start(ap, in_cpack);
    while ((arg = va_arg(ap, int)) >= 0) {
        SetParmBit(&(in_cpack->head), arg);
    }
    va_end(ap);
    return(g_SvrLink.SetCol(0, in_cpack->head.ParmBits));
}

static void dec2hex(unsigned char *sDec,int dec_len,char *sHex) {
    int i=0;
    int k=0;
    for(i=0; i<dec_len; i++) {
        k=sDec[i];
        sprintf(&sHex[2*i],"%02x",k);
    }
}

static int packege_search_data(ST_PACK *rPack,char *send_data) {
    int ret;
    ext_elect_search_req_t* elect_search_req_t;
    elect_search_req_t=(ext_elect_search_req_t*)send_data;

    unsigned char buf[68]="";
    unsigned char soutmd5[16]="";
    char outmd5[32]="";

    T_t_card	tCard;
    memset(&tCard,0,sizeof(tCard));


    memcpy(elect_search_req_t->prix,"1",1);
    memcpy(elect_search_req_t->length,"0103",4);
    memcpy(elect_search_req_t->type,"0006",4);
    memset(elect_search_req_t->bitery,'0',sizeof(elect_search_req_t->bitery));
    sprintf(elect_search_req_t->room,"%-20s",rPack->saddr);
    ret=DB_t_card_read_by_cardno(rPack->lvol0, &tCard);
    if(ret) {
        if(DB_NOTFOUND==ret)
            ret=E_NOTEXIST_CARDNO;
        else
            ret=E_DB_CARD_R;
        return ret;
    }
    sprintf(elect_search_req_t->custid,"%-22d",tCard.custid);//客户号
    memcpy(elect_search_req_t->relate,"1",1);//对应关系
    memcpy(elect_search_req_t->clientid,"0001",4);
    memset(outmd5,'0',32);

    memcpy(buf,elect_search_req_t->type,67);
    writelog(LOG_ERR,"buf data=[%s]",buf);
    CalcMD5(buf,67,soutmd5);
    dec2hex(soutmd5,16,outmd5);
    writelog(LOG_ERR,"outmd5 data=[%s]",outmd5);
    sprintf(elect_search_req_t->signcheck,"%s",outmd5);

    return 0;
}

static int packege_send_data(ST_PACK *rPack,int flag,char *send_data) {
    int ret =0;
    //char cellphone[31]="";	//充值手机号
    double money=0;			//充值金额
    char sysdate[11]="";
    char systime[9]="";
    char sysdatetime[20]="";
    char serialno[20]="";
    char sMoney[20]="";
    T_t_card	tCard;
//	ext_phone_trans_t phone_trans_struct;
    ext_phone_trans_t* phone_trans_struct;
    phone_trans_struct=(ext_phone_trans_t*)send_data;

    memset(&tCard,0,sizeof(tCard));
    memset(phone_trans_struct,0,sizeof(ext_phone_trans_t));

    phone_trans_struct->prix[0]=0x31;
    memcpy(phone_trans_struct->length,"0067",4);
    if(1==flag) {
        memcpy(phone_trans_struct->type,"0100",4);
    } else if(2==flag) {
        memcpy(phone_trans_struct->type,"0200",4);
    }
    //memcpy(phone_trans_struct->bitery,"0000000000000000",16);
    memset(phone_trans_struct->bitery,'0',sizeof(phone_trans_struct->bitery));
    ret=DB_t_card_read_by_cardno(rPack->lvol0, &tCard);
    if(ret) {
        if(DB_NOTFOUND==ret)
            ret=E_NOTEXIST_CARDNO;
        else
            ret=E_DB_CARD_R;
        return ret;
    }
    sprintf(phone_trans_struct->custid,"%-22d",tCard.custid);
    money = rPack->damt1;
    int i_money=D2I(D4U5(money*100,0));
    sprintf(sMoney,"%07d",i_money);
    memcpy(phone_trans_struct->money,sMoney,sizeof(phone_trans_struct->money));
    ret=get_datetime_from_db(sysdate,systime);
    if(ret) {
        writelog(LOG_ERR,"get_datetime_from_db error,error code=[%d]",ret);
        getsysdate(sysdate);
        getsystime(systime);
    }
    strcpy(sysdatetime,sysdate+4);
    strcat(sysdatetime,systime);
    memcpy(phone_trans_struct->datetime,sysdatetime,10);
    memcpy(phone_trans_struct->tracenum,sysdate,8);
    sprintf(serialno,"%06d",rPack->lvol6%1000000);
    memcpy(phone_trans_struct->tracenum+8,serialno,6);
    memcpy(phone_trans_struct->phone,rPack->sphone,strlen(rPack->sphone));
    memcpy(phone_trans_struct->retnum,"00",2);
    memset(phone_trans_struct->plugdata,0x20,sizeof(phone_trans_struct->plugdata));


    writelog(LOG_ERR,"package send data=[%s]",send_data);
    return 0;

}


static int packege_elec_request(ST_PACK *rPack,int flag,char *send_data) {
    int ret;
    ext_elect_req_t* elect_req_t;
    elect_req_t=(ext_elect_req_t*)send_data;
    double money=0;			//充值金额
    char serialno[10]="";
    char sysdate[11]="";
    char systime[9]="";
    char sysdatetime[20]="";
    unsigned char buf[106]="";
    unsigned char soutmd5[16]="";
    char outmd5[32]="";
    T_t_card	tCard;
    memset(&tCard,0,sizeof(tCard));
    if(flag==1) { //房间查询不加密
        memcpy(elect_req_t->prix,"0",1);
    } else {
        memcpy(elect_req_t->prix,"1",1);
    }

    memcpy(elect_req_t->length,"0141",4);

    if(flag==1) {
        memcpy(elect_req_t->type,"0001",4);

    } else if(flag==2) {
        memcpy(elect_req_t->type,"0002",4);
    }

    memset(elect_req_t->bitery,'0',sizeof(elect_req_t->bitery));
    sprintf(elect_req_t->room,"%-20s",rPack->saddr);
    ret=DB_t_card_read_by_cardno(rPack->lvol0, &tCard);
    if(ret) {
        if(DB_NOTFOUND==ret)
            ret=E_NOTEXIST_CARDNO;
        else
            ret=E_DB_CARD_R;
        return ret;
    }
    sprintf(elect_req_t->custid,"%-22d",tCard.custid);
    money = rPack->damt1;
    int i_money=D2I(D4U5(money*100,0));
    sprintf(elect_req_t->money,"%07d",i_money);
    ret=get_datetime_from_db(sysdate,systime);
    if(ret) {
        writelog(LOG_ERR,"get_datetime_from_db error,error code=[%d]",ret);
        getsysdate(sysdate);
        getsystime(systime);
    }
    strcpy(sysdatetime,sysdate+4);
    strcat(sysdatetime,systime);
    memcpy(elect_req_t->datetime,sysdatetime,10);
    memcpy(elect_req_t->tracenum,sysdate,8);
    sprintf(serialno,"%010d",rPack->lvol6);
    memcpy(elect_req_t->tracenum+8,serialno,10);
    memcpy(elect_req_t->retnum,"0000",4);
    memcpy(elect_req_t->clientid,"0001",4);
    memset(outmd5,'0',32);
    if(flag==1) {
        sprintf(elect_req_t->signcheck,"%s",outmd5);
    } else if(flag==2) {
        memcpy(buf,elect_req_t->type,105);
        writelog(LOG_ERR,"buf data=[%s]",buf);
        CalcMD5(buf,105,soutmd5);
        dec2hex(soutmd5,16,outmd5);
        writelog(LOG_ERR,"outmd5 data=[%s]",outmd5);
        sprintf(elect_req_t->signcheck,"%s",outmd5);
    }


    return 0;

}


/*

	爱立德电控房间余额查询
	2008-01-09
*/
#define elec_search_len 103
#define elec_len 141
#define TIMEOUT 180


int elec_room_deposit_search(ST_PACK *rPack,ST_PACK *out_pack) {
    int ret = 0;
    char host[16]="";		//对方机器的ip
    char portchar[10]="";
    short port=0;				//对方机器的port
    char senddata[elec_search_len+1]="";	//加密后的传送数据
    char c_drtbranch[10]="";
    char c_bccbasefuncno[10]="";
    int DRTP_BRANCH =0;
    int BCC_BASEFUNCNO =0;

    CTcpSocket tcpsocket ;

    ST_PACK ArrayPack;			// 设置返回包
    ST_CPACK aPack;				// 设置应答包
    ST_CPACK sPack;			 	// 设置发送包

    ret=GetSysParaVal(2301, host);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2302, portchar);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2303, c_drtbranch);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2304, c_bccbasefuncno);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }



    port = atoi(portchar);
    DRTP_BRANCH = atoi(c_drtbranch);
    BCC_BASEFUNCNO = atoi(c_bccbasefuncno);

    ret = packege_search_data(rPack,senddata);
    if(ret) {
        writelog(LOG_ERR,"packege send data error,error code is [%d]",ret);
        return ret;
    }
    ResetNormalCPack(&aPack, 0, 1);
    memset(&ArrayPack, 0, sizeof(ArrayPack));
    ResetNormalCPack(&sPack, 0, 1);
    SetHeadCol(&sPack, F_SSECTYPES,F_LVOL0,F_SCUST_AUTH,0);       // 设置发送windows BU的头部视图信息
    sPack.head.RequestType = 250004;
    des2src(sPack.pack.ssectypes,senddata);
    des2src(sPack.pack.scust_auth,host);
    sPack.pack.lvol0=port;

    ret = ExtCall(0, DRTP_BRANCH, BCC_BASEFUNCNO, 0, TIMEOUT, &sPack, &aPack, &ArrayPack);
    if (ret < 0||aPack.head.retCode!=0) {
        if(ret<0) {
            writelog(LOG_ERR,"Call 250004 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return ret;
        } else {
            writelog(LOG_ERR,"Call 250004 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return aPack.head.retCode;
        }
    }

    memcpy(out_pack->sstation0,aPack.pack.sstation0,17);
    memcpy(out_pack->sstation1,aPack.pack.sstation1,17);
    memcpy(out_pack->sbank_acc,aPack.pack.sbank_acc,17);
    writelog(LOG_ERR,"electrity depelemoney =[%17s]",out_pack->sstation0);
    writelog(LOG_ERR,"electrity depelect =[%17s]",out_pack->sstation1);
    writelog(LOG_ERR,"electrity depmoney =[%17s]",out_pack->sbank_acc);

    return 0;

}


static int elect_room_check(ST_PACK *rPack,ST_PACK *out_pack,transfer_control_t *trans_ctl) {
    int ret = 0;
    char host[16]="";		//对方机器的ip
    char portchar[10]="";
    short port=0;				//对方机器的port
    char senddata[elec_len+1]="";	//加密后的传送数据
    char c_drtbranch[10]="";
    char c_bccbasefuncno[10]="";
    int DRTP_BRANCH =0;
    int BCC_BASEFUNCNO =0;
    trans_ctl->check_user_pwd = 0;
    CTcpSocket tcpsocket ;

    ST_PACK ArrayPack;			// 设置返回包
    ST_CPACK aPack;				// 设置应答包
    ST_CPACK sPack;			 	// 设置发送包

    ret=GetSysParaVal(2301, host);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2302, portchar);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2303, c_drtbranch);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2304, c_bccbasefuncno);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }



    port = atoi(portchar);
    DRTP_BRANCH = atoi(c_drtbranch);
    BCC_BASEFUNCNO = atoi(c_bccbasefuncno);

    ret = packege_elec_request(rPack,1,senddata);
    if(ret) {
        writelog(LOG_ERR,"packege send data error,error code is [%d]",ret);
        return ret;
    }
    ResetNormalCPack(&aPack, 0, 1);
    memset(&ArrayPack, 0, sizeof(ArrayPack));
    ResetNormalCPack(&sPack, 0, 1);
    SetHeadCol(&sPack, F_SSECTYPES,F_LVOL0,F_SCUST_AUTH,0);       // 设置发送windows BU的头部视图信息
    sPack.head.RequestType = 250002;
    des2src(sPack.pack.ssectypes,senddata);
    des2src(sPack.pack.scust_auth,host);
    sPack.pack.lvol0=port;

    ret = ExtCall(0, DRTP_BRANCH, BCC_BASEFUNCNO, 0, TIMEOUT, &sPack, &aPack, &ArrayPack);
    if (ret < 0||aPack.head.retCode!=0) {
        if(ret<0) {
            writelog(LOG_ERR,"Call 250002 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return ret;
        } else {
            writelog(LOG_ERR,"Call 250002 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return aPack.head.retCode;
        }
    }

    memcpy(out_pack->saddr,aPack.pack.saddr,20);
    writelog(LOG_ERR,"saddr=[%s]",out_pack->saddr);

    return 0;
    /*
    	memset(&ElectTrans,0,sizeof(ElectTrans));
    	memcpy(&ElectTrans, aPack.pack.ssectypes,141);

    	if(strncmp(ElectTrans.retnum,"0001",4)==0){
    		//房间存在
    		writelog(LOG_INFO,"query success ret[%s] ",ElectTrans.retnum);
    		return 0;
    	}else if(strncmp(ElectTrans.retnum,"0400",4)){
    		writelog(LOG_ERR,"query falied ret[%s] ",ElectTrans.retnum);
    		return E_ELEC_DATA;
    	}else if(strncmp(ElectTrans.retnum,"0401",4)){
    	writelog(LOG_ERR,"query falied ret[%s] ",ElectTrans.retnum);
    		return E_ELEC_DB_CONN;
    	}else if(strncmp(ElectTrans.retnum,"0402",4)){
    		//一卡通帐号与房间不对应
    		writelog(LOG_INFO,"query success but ret[%s] ",ElectTrans.retnum);
    		sprintf(out_pack->saddr,ElectTrans.room,sizeof(ElectTrans.room));
    		return 0;
    	}else if(strncmp(ElectTrans.retnum,"0403",4)){
    	writelog(LOG_ERR,"query falied ret[%s] ",ElectTrans.retnum);
    		return E_ELEC_ROOM;
    	}else if(strncmp(ElectTrans.retnum,"0404",4)){
    	writelog(LOG_ERR,"query falied ret[%s] ",ElectTrans.retnum);
    		return E_ELEC_WORKSTAT;
    	}else if(strncmp(ElectTrans.retnum,"0406",4)){
    	writelog(LOG_ERR,"query falied ret[%s] ",ElectTrans.retnum);
    		return E_ELEC_DATA_LOSS;
    	}else if(strncmp(ElectTrans.retnum,"0407",4)){
    	writelog(LOG_ERR,"query falied ret[%s] ",ElectTrans.retnum);
    		return E_ELEC_UNKNOW;
    	}
    	*/

}


static int elect_room_check_get_name(ST_PACK *rPack,ST_PACK *out_pack,transfer_control_t *trans_ctl) {
    int ret = 0;

    char c_drtbranch[10]="";
    char c_bccbasefuncno[10]="";
    int DRTP_BRANCH =0;
    int BCC_BASEFUNCNO =0;
    trans_ctl->check_user_pwd = 0;
    CTcpSocket tcpsocket ;

    ST_PACK ArrayPack;			// 设置返回包
    ST_CPACK aPack;				// 设置应答包
    ST_CPACK sPack;			 	// 设置发送包


    ret=GetSysParaVal(2501, c_drtbranch);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2502, c_bccbasefuncno);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }

    DRTP_BRANCH = atoi(c_drtbranch);
    BCC_BASEFUNCNO = atoi(c_bccbasefuncno);

    ResetNormalCPack(&aPack, 0, 1);
    memset(&ArrayPack, 0, sizeof(ArrayPack));
    ResetNormalCPack(&sPack, 0, 1);
    SetHeadCol(&sPack, F_SSECTYPES,F_LVOL0,F_SCUST_AUTH,0);       // 设置发送windows BU的头部视图信息
    sPack.head.RequestType = 847356;
    sPack.pack.lvol0=rPack->lvol10;//房间号

    ret = ExtCall(0, DRTP_BRANCH, BCC_BASEFUNCNO, 0, TIMEOUT, &sPack, &aPack, &ArrayPack);
    if (ret < 0||aPack.head.retCode!=0) {
        if(ret<0) {
            writelog(LOG_ERR,"Call 847356 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return ret;
        } else {
            writelog(LOG_ERR,"Call 847356 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return aPack.head.retCode;
        }
    }

    memcpy(out_pack->sbankname,aPack.pack.sbankname,81);//房间名称
    out_pack->damt2=aPack.pack.damt0;//电价
    writelog(LOG_ERR,"sbankname=[%s]",out_pack->sbankname);

    return 0;


}



static int elect_request(ST_PACK *rPack,char ext_msg[256]) {
    int ret = 0;
    char host[16]="";		//对方机器的ip
    char portchar[10]="";
    short port=0;				//对方机器的port
    char senddata[elec_len+1]="";	//加密后的传送数据
    char c_drtbranch[10]="";
    char c_bccbasefuncno[10]="";
    int DRTP_BRANCH =0;
    int BCC_BASEFUNCNO =0;
    ST_PACK ArrayPack;			// 设置返回包
    ST_CPACK aPack;				// 设置应答包
    ST_CPACK sPack;			 	// 设置发送包

    ret=GetSysParaVal(2301, host);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2302, portchar);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2303, c_drtbranch);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2304, c_bccbasefuncno);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }

    port = atoi(portchar);
    DRTP_BRANCH = atoi(c_drtbranch);
    BCC_BASEFUNCNO = atoi(c_bccbasefuncno);

    ret = packege_elec_request(rPack,2,senddata);
    if(ret) {
        writelog(LOG_ERR,"packege send data error,error code is [%d]",ret);
        return ret;
    }


    ResetNormalCPack(&aPack, 0, 1);
    memset(&ArrayPack, 0, sizeof(ArrayPack));
    ResetNormalCPack(&sPack, 0, 1);
    SetHeadCol(&sPack, F_SSECTYPES,F_LVOL0,F_LVOL1,F_SCUST_AUTH,0);       // 设置发送windows BU的头部视图信息
    sPack.head.RequestType = 250002;
    des2src(sPack.pack.ssectypes,senddata);
    des2src(sPack.pack.scust_auth,host);
    sPack.pack.lvol0=port;
    sPack.pack.lvol1=1;

    ret = ExtCall(0, DRTP_BRANCH, BCC_BASEFUNCNO, 0, TIMEOUT, &sPack, &aPack, &ArrayPack);
    if (ret < 0||aPack.head.retCode!=0) {
        if(ret<0) {
            writelog(LOG_ERR,"Call 250002 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return ret;
        } else {
            writelog(LOG_ERR,"Call 250002 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return aPack.head.retCode;
        }
    }

    return 0;
    /*
    memset(&ElectTrans,0,sizeof(ElectTrans));
    memcpy(&ElectTrans, aPack.pack.ssectypes,141);

    if(strncmp(ElectTrans.retnum,"0001",4)==0){
    	//成功
    	writelog(LOG_INFO,"trans success ret[%s] ",ElectTrans.retnum);
    	return 0;
    }else if(strncmp(ElectTrans.retnum,"0400",4)){
    	writelog(LOG_ERR,"trans falied ret[%s] ",ElectTrans.retnum);
    	return E_ELEC_DATA;
    }else if(strncmp(ElectTrans.retnum,"0401",4)){
    writelog(LOG_ERR,"trans falied ret[%s] ",ElectTrans.retnum);
    	return E_ELEC_DB_CONN;
    }else if(strncmp(ElectTrans.retnum,"0403",4)){
    writelog(LOG_ERR,"trans falied ret[%s] ",ElectTrans.retnum);
    	return E_ELEC_ROOM;
    }else if(strncmp(ElectTrans.retnum,"0404",4)){
    writelog(LOG_ERR,"trans falied ret[%s] ",ElectTrans.retnum);
    	return E_ELEC_WORKSTAT;
    }else if(strncmp(ElectTrans.retnum,"0406",4)){
    writelog(LOG_ERR,"trans falied ret[%s] ",ElectTrans.retnum);
    	return E_ELEC_DATA_LOSS;
    }else if(strncmp(ElectTrans.retnum,"0407",4)){
    writelog(LOG_ERR,"trans falied ret[%s] ",ElectTrans.retnum);
    	return E_ELEC_UNKNOW;
    }

    return -1;

    */
}

static int elect_request_changzhou(ST_PACK *rPack,char ext_msg[256]) {
    int ret = 0;

    char c_drtbranch[10]="";
    char c_bccbasefuncno[10]="";
    int DRTP_BRANCH =0;
    int BCC_BASEFUNCNO =0;
    ST_PACK ArrayPack;			// 设置返回包
    ST_CPACK aPack;				// 设置应答包
    ST_CPACK sPack;			 	// 设置发送包
    int cardno;

    T_t_customer 	tCustomer;
    T_t_account	tAccount;
    T_t_card	tCard;

    memset(&tCustomer,0,sizeof(tCustomer));
    memset(&tAccount,0,sizeof(tAccount));
    memset(&tCard,0,sizeof(tCard));

    cardno=rPack->lvol0;

    ret=DB_t_card_read_by_cardno(cardno, &tCard);
    if(ret) {
        if(DB_NOTFOUND==ret)
            ret=E_NOTEXIST_CARDNO;
        else
            ret=E_DB_CARD_R;
        return ret;
    }

    ret=DB_t_customer_read_lock_by_cur_and_custid(tCard.custid, &tCustomer);
    if(ret) {
        writelog(LOG_ERR,"custid[%d]",tCard.custid);
        if(DB_NOTFOUND==ret)
            ret= E_NOTEXIST_CUSTOMER;
        else
            ret= E_DB_CUSTOMER_R;
        return ret;
    }


    ret=GetSysParaVal(2501, c_drtbranch);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2502, c_bccbasefuncno);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }

    DRTP_BRANCH = atoi(c_drtbranch);
    BCC_BASEFUNCNO = atoi(c_bccbasefuncno);

    ResetNormalCPack(&aPack, 0, 1);
    memset(&ArrayPack, 0, sizeof(ArrayPack));
    ResetNormalCPack(&sPack, 0, 1);
    SetHeadCol(&sPack, F_SSECTYPES,F_LVOL0,F_LVOL1,F_SORDER0,F_SCUST_AUTH,0);       // 设置发送windows BU的头部视图信息
    sPack.head.RequestType = 847357;
    sPack.pack.lvol0=rPack->lvol10;//房间号
    sPack.pack.lvol1=D2I(rPack->damt1*100);//转账金额(分)
    memcpy(sPack.pack.sorder0,tCustomer.custname,11);

    ret = ExtCall(0, DRTP_BRANCH, BCC_BASEFUNCNO, 0, TIMEOUT, &sPack, &aPack, &ArrayPack);
    if (ret < 0||aPack.head.retCode!=0) {
        if(ret<0) {
            writelog(LOG_ERR,"Call 847357 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return ret;
        } else {
            writelog(LOG_ERR,"Call 847357 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return aPack.head.retCode;
        }
    }

    return 0;
}


#define package_len 327


//从第三方确认手机号码的正确性
static int 	check_cellphone(ST_PACK *rPack,ST_PACK *out_pack,transfer_control_t *trans_ctl) {
    int ret = 0;
    char host[16]="";		//对方机器的ip
    char portchar[10]="";
    short port=0;				//对方机器的port
    char rcvdata[package_len+1]="";		//接收对方的传送数据
    char senddata[package_len+1]="";	//加密后的传送数据
    char tempdate[package_len+1-200]="";
    char c_drtbranch[10]="";
    char c_bccbasefuncno[10]="";
    int DRTP_BRANCH =0;
    int BCC_BASEFUNCNO =0;

    memset(tempdate,0,sizeof tempdate);
    trans_ctl->check_user_pwd = 0;
    CTcpSocket tcpsocket ;

    ST_PACK ArrayPack;			// 设置返回包
    ST_CPACK aPack;				// 设置应答包
    ST_CPACK sPack;			 	// 设置发送包


    ret=GetSysParaVal(2104, host);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2105, portchar);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2106, c_drtbranch);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2107, c_bccbasefuncno);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }



    port = atoi(portchar);
    DRTP_BRANCH = atoi(c_drtbranch);
    BCC_BASEFUNCNO = atoi(c_bccbasefuncno);

    ret = packege_send_data(rPack,1,senddata);
    if(ret) {
        writelog(LOG_ERR,"packege send data error,error code is [%d]",ret);
        return ret;
    }

    memcpy(tempdate,senddata,package_len-200);

    ResetNormalCPack(&aPack, 0, 1);
    memset(&ArrayPack, 0, sizeof(ArrayPack));
    ResetNormalCPack(&sPack, 0, 1);
    SetHeadCol(&sPack, F_SSECTYPES,F_LVOL0,F_SCUST_AUTH,0);       // 设置发送windows BU的头部视图信息
    sPack.head.RequestType = 250001;
    des2src(sPack.pack.ssectypes,tempdate);
    des2src(sPack.pack.scust_auth,host);
    sPack.pack.lvol0=port;
    ret = ExtCall(0, DRTP_BRANCH, BCC_BASEFUNCNO, 0, TIMEOUT, &sPack, &aPack, &ArrayPack);
    if (ret < 0||aPack.head.retCode!=0) {
        if(ret<0) {
            writelog(LOG_ERR,"Call 250001 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return ret;
        } else {
            writelog(LOG_ERR,"Call 250001 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return aPack.head.retCode;
        }
    }

    des2src(rcvdata,aPack.pack.ssectypes);
    /*

    	writelog(LOG_ERR,"bengin to connect the telecom's server for cellphone check\n,host=[%s],port=[%d],senddata=[%s]",host,port,senddata);
    	ret = tcpsocket.ConnectTcp(host, port);
    	if(!ret)
    	{
    		writelog(LOG_ERR,"Connect to boss system error,error code is [%d],ip_addr[%s],port[%d] ",ret,host,port);
    		return E_MOBILE_TRANS_CONNECT;
    	}
    	ret = tcpsocket.Send(senddata,326);
    	if (ret<0)
    	{
    	      	// 发送时，端口有问题，包括被关闭
    		writelog(LOG_ERR,"Send to boss system error,error code is [%d] ",ret);
    		return E_MOBILE_TRANS_REQUEST;
    	}else if(0==ret){
    		// 不应该出现这种情况
    	      	writelog(LOG_ERR,"Send to boss system error，CTcpSocket.Send should not return this error,error code is[%d]!\n",ret);
    	      	return	E_MOBILE_TRANS_REQUEST;
    	}

    	ret = tcpsocket.Recv(rcvdata, 326, 180000);
    	if (ret!=326)
    	{
    		writelog(LOG_ERR,"Receive from boss system error,error code is [%d] ",ret);
    		return	E_MOBILE_TRANS_TIME_OUT;  // 接收时候出错，或超时
    	}
    	tcpsocket.Close();
    */
    if(('0'==rcvdata[89])&&('0'==rcvdata[90])) {
        //号码正确
        return 0;
    } else if(('0'==rcvdata[89])&&('1'==rcvdata[90])) {
        //mac校验出错
        return E_MOBILE_CHECK_MAC;

    } else if(('0'==rcvdata[89])&&('2'==rcvdata[90])) {
        //失败
        return E_MOBILE_CHECK_FAIL;
    } else {
        //未知异常
        return E_MOBILE_CHECK_UNKNOW;
    }

}

//获得第三方充值业务对应的商户id
static int get_third_part_account(ST_PACK *rPack,int trade_code,TRANS* trans) {
    int ret=0;
    int cnt=0;
    char szActno[17]="";				//帐户
    int shpid=0;						//商户ID
    T_t_shop		shop;			//商户信息表
    T_t_account	account;		//帐户表
    T_t_card		tCard;
    T_t_tradecodeshop tradeshop;
    memset(&tCard,0,sizeof(tCard));
    memset(&shop,0,sizeof(shop));
    memset(&account,0,sizeof(account));
    //根据交易代码取得
    memset(&tradeshop,0,sizeof(tradeshop));

    ret =DB_t_tradecodeshop_open_select_by_c0_and_tradecode(trade_code);
    if(ret) {
        writelog(LOG_ERR,"DB_t_tradecode_shop_open_select_by_c0_and_trade_code error,errcode=[%d]",ret);
        return 	ret;
    }
    while(1) {
        memset(&tradeshop,0,sizeof(tradeshop));
        ret =DB_t_tradecodeshop_fetch_select_by_c0(&tradeshop);
        if(ret) {
            DB_t_tradecodeshop_close_select_by_c0();
            if(cnt==0) {
                writelog(LOG_ERR,"DB_t_tradecode_shop_fetch_select_by_c0 error errorcode=[%d]",ret);
                return E_NOTEXIST_SHOPID;
            }
            break;
        }
        cnt++;
        shpid = tradeshop.shopid;
    }
    //根据商户ID查询得到商户信息
    ret=DB_t_shop_read_by_shopid(shpid, &shop);
    if(ret) {
        writelog(LOG_ERR,"read tablet_cif_shop  shpid[%d]",shpid);
        if(DB_NOTFOUND==ret) {
            return E_NOTEXIST_SHOPID;
        } else
            return E_DB_CARD_R;
    }
    //根据客户号和商户主账号类型查询账号表，得到账号
    ret=DB_t_account_read_by_accno(shop.accno,&account);
    if(ret) {
        writelog(LOG_ERR,"read_by_customer_id_and_act_type ret[%d]shop accno[%d]",ret,shop.accno);
        if(DB_NOTFOUND==ret)
            return  E_NOTEXIST_SHOPACCNO;
        else
            return E_DB_ACCOUNT_R;
    }
    strcpy(szActno,account.accno);
    memset(&account,0,sizeof(account));
    ret=DB_t_account_read_by_cardno_and_purseno(rPack->lvol0,0,&account);
    if(ret) {
        writelog(LOG_ERR,"read t_account err[%d]cardid[%d]",ret,rPack->lvol0);
        if(DB_NOTFOUND==ret) {
            return E_NOTEXIST_ACCNO;
        } else
            return E_DB_ACCOUNT_R;
    }
    des2src(trans->shopaccno,shop.accno);					//借方账号
    des2src(trans->cardaccno,account.accno);							//贷方账号
    return 0;
}

//发送正式充值请求
static int trans_request(ST_PACK *rPack,char ext_msg[256]) {
    int ret = 0;
    char host[16]="";		//对方机器的ip
    char portchar[10]="";
    short port=0;				//对方机器的port
    char rcvdata[package_len+1]="";		//接收对方的传送数据
    char senddata[package_len+1]="";	//加密后的传送数据
    char tempdate[package_len+1-200]="";
    char c_drtbranch[10]="";
    char c_bccbasefuncno[10]="";
    int DRTP_BRANCH =0;
    int BCC_BASEFUNCNO =0;
//	char temp[512] = "";
//	int i,j;

    memset(tempdate,0,sizeof tempdate);
    CTcpSocket tcpsocket ;

    ST_PACK ArrayPack;			// 设置返回包
    ST_CPACK aPack;				// 设置应答包
    ST_CPACK sPack;			 	// 设置发送包

    ret=GetSysParaVal(2104, host);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return E_DB_TRADESERIALERROR_R;
    }
    ret=GetSysParaVal(2105, portchar);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return E_DB_TRADESERIALERROR_R;
    }
    ret=GetSysParaVal(2106, c_drtbranch);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }
    ret=GetSysParaVal(2107, c_bccbasefuncno);
    if(ret) {
        writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
        return ret;
    }

    port = atoi(portchar);
    DRTP_BRANCH = atoi(c_drtbranch);
    BCC_BASEFUNCNO = atoi(c_bccbasefuncno);

    ret = packege_send_data(rPack,2,senddata);
    if(ret) {
        writelog(LOG_ERR,"packege send data error,error code is [%d]",ret);
        return ret;
    }

    memcpy(tempdate,senddata,package_len-200);

    ResetNormalCPack(&aPack, 0, 1);
    memset(&ArrayPack, 0, sizeof(ArrayPack));
    ResetNormalCPack(&sPack, 0, 1);
    SetHeadCol(&sPack, F_SSECTYPES,F_LVOL0,F_LVOL1,F_SCUST_AUTH,0);       // 设置发送windows BU的头部视图信息
    sPack.head.RequestType = 250001;
    des2src(sPack.pack.ssectypes,tempdate);
    des2src(sPack.pack.scust_auth,host);
    sPack.pack.lvol0=port;
    sPack.pack.lvol1=1;

    ret = ExtCall(0, DRTP_BRANCH, BCC_BASEFUNCNO, 0, TIMEOUT, &sPack, &aPack, &ArrayPack);
    if (ret < 0||aPack.head.retCode!=0) {
        if(ret<0) {
            writelog(LOG_ERR,"Call 250001 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return ret;
        } else {
            writelog(LOG_ERR,"Call 250001 error,errcode=[%d],retCode=[%d]",ret,aPack.head.retCode);
            return aPack.head.retCode;
        }
    }

    des2src(rcvdata,aPack.pack.ssectypes);

    /*
    ret = tcpsocket.ConnectTcp(host, port);
    if(!ret)
    {
    	writelog(LOG_ERR,"Connect to boss system error,error code is [%d],ip_addr[%s],port[%d] ",ret,host,port);
    	return E_MOBILE_TRANS_CONNECT;
    }
    ret = tcpsocket.Send(senddata,326);
    if (ret<0)
    {
          	// 发送时，端口有问题，包括被关闭
    	writelog(LOG_ERR,"Send to boss system error,error code is [%d] ",ret);
    	return E_MOBILE_TRANS_REQUEST;
    }else if(0==ret){
    	// 不应该出现这种情况
          	writelog(LOG_ERR,"Send to boss system error，CTcpSocket.Send should not return this error,error code is[%d]!\n",ret);
          	return	E_MOBILE_TRANS_REQUEST;
    }
    tcpsocket.Recv(rcvdata, 326, 1000);

    tcpsocket.Close();
    */
    return 0;
}


/**************************************************
	终端消费模块
*******************************************************/
int GetShopidByDevphyid(char *devphyid,char *transdate,char *transtime,int& deviceid,int& shopid);
static int pre_check_term_trade(ST_PACK *rPack,ST_PACK *out_pack,transfer_control_t *trans_ctl) {
    T_t_device tDevice;
    char curr_date[9];
    char curr_time[7];
    int shopid;
    int deviceid=0;
    int ret;
    if(rPack->lvol4 <= 0)
        return E_INPUT_DATA_INVAILD;

    trans_ctl->check_user_pwd = 0;

    memset(&tDevice,0,sizeof tDevice);

    getsysdate(curr_date);
    getsystime(curr_time);
    if( strcmp(rPack->sdate0,curr_date) != 0) {
        return E_INPUT_DATE;
    }
    ret = GetShopidByDevphyid(tDevice.devphyid,rPack->sdate0,curr_time,deviceid,shopid);
    if(ret) {
        return ret;
    }
    // 保存商户号
    rPack->lvol12 = shopid;
    ret = DB_t_device_read_lock_by_c0_and_deviceid(rPack->lvol4,&tDevice);
    if(ret) {
        if(DB_NOTFOUND == ret)
            return E_DB_DEVICE_N;
        else
            return E_DB_DEVICE_R;
    }
    ret = 0;
    if(tDevice.status[0]!=STATUS_NORMAL) {
        ret = E_NOTEXIST_DEVICE;
    } else if(tDevice.lastseqno!= rPack->lvol5) {
        writelog(LOG_ERR,"中断流水号不符,devid[%d]input serial[%d]"
                 ,rPack->lvol4,rPack->lvol5);
        ret = E_NOTEXIST_SERIALNO;
    }
    DB_t_device_free_lock_by_c0();
    return ret;
}


static int pre_check_fee(ST_PACK *rPack,ST_PACK *out_pack,transfer_control_t *trans_ctl) {
    int ret;
    double check_fee;
    char stuempno[21]="";

    trans_ctl->check_user_pwd = 0;


    ret = get_stuempno_by_cardno(rPack->lvol0,stuempno);
    if (ret) {
        return ret;
    }
    writelog(LOG_ERR,"stuempno got =[%s]!",stuempno);


    ret = updateBMStudentPayStatus(stuempno);
    if (ret) {
        return ret;
    }

    ret = getTurnOverFeebyStuempNO(stuempno,&check_fee);
    if (ret) {
        return ret;
    }

    if(amtcmp(check_fee,0)<=0) {
        return E_TURN_OVER_N;
    }
    writelog(LOG_ERR,"check_fee got =[%f]!",check_fee);
    rPack->damt1 = check_fee;


    ret = db_commit();
    if(ret) {
        writelog(LOG_ERR,"db_commit error,errcode=[%d]",ret);
        return E_DB_COMMIT;
    }

    return 0;

}

static int write_turn_over_fee(ST_PACK *rPack,char ext_msg[256]) {

    int ret;
    char stuempno[21]="";



    ret = get_stuempno_by_cardno(rPack->lvol0,stuempno);
    if (ret) {
        return ret;
    }

    writelog(LOG_ERR,"17 stuempno got =[%s]!",stuempno);

    ret = updateBminfoByStuempNo(stuempno);
    if (ret) {
        return ret;
    }

    return 0;

}


static int search_account_from_term_id(ST_PACK *rPack,int trade_code,TRANS* trans) {
    T_t_device tDevice;
    T_t_account tAccount;
    T_t_shop tShop;
    int shopid;
    char curr_time[7] = "";
    int ret;
    int deviceid=0;
    if(rPack->lvol4 <= 0)
        return E_INPUT_DATA_INVAILD;

    memset(&tDevice,0,sizeof tDevice);

    ret = DB_t_device_read_by_deviceid(rPack->lvol4,&tDevice);
    if(ret) {
        if(DB_NOTFOUND == ret)
            return E_DB_DEVICE_N;
        else
            return E_DB_DEVICE_R;
    }
    getsystime(curr_time);
    ret = GetShopidByDevphyid(tDevice.devphyid,rPack->sdate0,curr_time,deviceid,shopid);
    if(ret) {
        return ret;
    }
    // 保存商户号
    memset(&tShop,0,sizeof tShop);
    ret = DB_t_shop_read_by_shopid(shopid,&tShop);
    if(ret) {
        if(DB_NOTFOUND == ret)
            return E_DB_SHOP_N;
        return E_DB_SHOP_R;
    }
    memset(&tAccount,0,sizeof tAccount);
    ret=DB_t_account_read_by_accno(tShop.accno,&tAccount);
    if(ret) {
        writelog(LOG_ERR,"DB_t_account_read_by_accno ret[%d]accno[%d]",ret,tShop.accno);
        if(DB_NOTFOUND==ret)
            return  E_NOTEXIST_SHOPACCNO;
        else
            return E_DB_ACCOUNT_R;
    }
    des2src(trans->shopaccno,tShop.accno);
    return 0;

}

static int do_term_trade(ST_PACK *rPack,char ext_msg[256]) {
    T_t_device tDevice;
    int ret;
    if(rPack->lvol4 <= 0)
        return E_INPUT_DATA_INVAILD;

    ret = DB_t_device_read_lock_by_c0_and_deviceid(rPack->lvol4,&tDevice);
    if(ret) {
        if(DB_NOTFOUND == ret)
            return E_DB_DEVICE_N;
        else
            return E_DB_DEVICE_R;
    }

    ret = 0;
    if(tDevice.status[0]!=STATUS_NORMAL) {
        ret = E_DEVICE_LOGOUT;
    } else if(tDevice.lastseqno!= rPack->lvol5) {
        writelog(LOG_ERR,"中断流水号不符,devid[%d]input serial[%d]"
                 ,rPack->lvol4,rPack->lvol5);
        ret = E_NOTEXIST_SERIALNO;
    } else if(!ret) {
        tDevice.lastseqno = rPack->lvol5+1;
        ret = DB_t_device_update_lock_by_c0(&tDevice);
        if(ret) {
            writelog(LOG_DEBUG,"更新中断流水号失败devid[%d]",rPack->lvol4);
            return E_DB_DEVICE_N;
        }
    }
    return 0;
}
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
//系统模拟入账
int tend_to_enter_account(ST_PACK *rPack,int trade_code) {
    int ret = 0;
    CAccTrans *pAccTrans=CAccTrans::getInstance();
    TRANS& trans=pAccTrans->trans;
    ret=pAccTrans->checkCfgUpdate();
    if(ret)
        return ret;
    pAccTrans->clear();
    pAccTrans->trans.transcode=TC_SUBSIDYGET;
    ret=pAccTrans->initOperDtl(rPack->scust_no);
    if(ret)
        return ret;
    GetCpackDataString(rPack,pAccTrans->cpackdata);

    ret=pAccTrans->addOperDtl();
    if(ret)
        return ret;

    T_t_account	tAccount;
    T_t_card	tCard;

    memset(&tAccount,0,sizeof(tAccount));
    memset(&tCard,0,sizeof(tCard));

    trans.cardno=rPack->lvol0;

    ret=DB_t_card_read_by_cardno(trans.cardno, &tCard);
    if(ret) {
        if(DB_NOTFOUND==ret)
            ret=E_NOTEXIST_CARDNO;
        else
            ret=E_DB_CARD_R;
        return ret;
    }
    if(tCard.status[0]!=STATUS_NORMAL) {
        return ERRINFO(E_CARD_LOGOUT,trans.cardno);
    }
    if('1'==tCard.frozeflag[0]) {
        return ERRINFO(E_CARD_FREEZE,trans.cardno);
    }
    if('1'==tCard.lossflag[0]) {
        return ERRINFO(E_CARD_LOST,trans.cardno);
    }
    if('1'==tCard.badflag[0]) {
        return ERRINFO(E_CARD_BADRECORD,trans.cardno);
    }
    trans.custid=tCard.custid;
    trans.feetype=tCard.feetype;
    trans.cardflag=1;
    trans.usecardflag=1;
    trans.cardno=rPack->lvol0;
    trans.purseno=PURSE_NO_ONE;
    trans.cardcnt=rPack->lvol1+1;
    trans.cardbefbal=rPack->damt0;
    trans.inputamt==rPack->damt1;

    ret=UpdateCardBitmap(trans.cardno,trans.cardcnt,CARDBITMAPTYPE_DEC,0);
    if(ret)
        return ret;
    T_t_account tCardAccount;
    memset(&tCardAccount,0,sizeof(tCardAccount));
    ret=DB_t_account_read_by_cardno_and_purseno(trans.cardno,trans.purseno,&tCardAccount);
    if(ret) {
        if(DB_NOTFOUND==ret)
            return E_NOTEXIST_CARDACCNO;
        else
            return E_DB_ACCOUNT_R;
    }
    if(tCardAccount.status[0]!=STATUS_NORMAL) {
        return E_CARDACC_LOGOUT;
    }
    if(tCardAccount.lastcardcnt>trans.cardcnt) {
        return E_CARDCNT_LT_LASTCARDCNT;
    }
    if(amtcmp(trans.inputamt,trans.cardbefbal)>=0)
        return ERRINFO(E_CARD_BALANCE_SHORTAGE,trans.cardbefbal-trans.inputamt);
    trans.custid=tCard.custid;
    des2src(trans.craccno,tCardAccount.accno);
//	ret=pAccTrans->doFeeTrans();
//	if(ret)
//		return ret;
    ret=pAccTrans->doMainTrans();
    if(ret)
        return ret;
    if(amtcmp(trans.unusedamt,0)>0)
        return E_INPUT_AMT;
    if(amtcmp(trans.unusedamt,0)<0)
        return E_AMT_LACK;

    T_t_transdtl transdtl;
    memset(&transdtl,0,sizeof(transdtl));

    des2src(transdtl.transdate,trans.transdate);
    des2src(transdtl.transtime,trans.transtime);
    strcpy(transdtl.accdate,trans.accdate);
    strcpy(transdtl.acctime,trans.acctime);
    transdtl.termid=trans.termid;
    transdtl.termseqno=trans.termseqno;
    transdtl.transcode=trans.transcode;
    transdtl.paytype=trans.fundtype;
    transdtl.cardno=trans.cardno;
    transdtl.purseno=trans.purseno;
    transdtl.cardcnt=trans.cardcnt;
    transdtl.cardbefbal=trans.cardbefbal;
    transdtl.amount=trans.totaltransamt;
    transdtl.cardaftbal=trans.cardaftbal;
    transdtl.custid=trans.custid;
    des2src(transdtl.custname,tCardAccount.accname);
    des2src(transdtl.opercode,trans.opercode);
    transdtl.status[0]=DTLSTATUS_SUCCESS;

    ret=DB_t_transdtl_add(&transdtl);
    if(ret) {
        if(DB_REPEAT==ret)
            return E_DB_TRANSDTL_E;
        else
            return E_DB_TRANSDTL_I;
    }
    ret = db_rollback();
    if(ret) {
        writelog(LOG_ERR,"db_roll_back error,errcode=[%d]",ret);
        return E_DB_ROLLBACK;
    }
    return 0;
}
int record_serial(ST_PACK *rPack,ST_PACK *out_pack) {
    int ret =0;
    int iSeqNo = 0;
    char sMsg[256]="";
#if 0
    //	准备数据插入交易流水表
    ret = getNewUniqNo(KEYTYPE_TRADESERIAL,&iSeqNo);  					//获得最大流水号
    if(ret) {
        writelog(LOG_ERR,"getNewUniqNo error,errcode=[%d]",ret);
        return ret;
    }
    tradeserial->serial_no = iSeqNo;			//流水号
    out_pack->damt1=tradeserial->trade_fee;		//充值金额
    out_pack->damt0=tradeserial->cardaftbal;	//出卡值
    out_pack->lvol0=tradeserial->serial_no;//流水号

    sprintf(sMsg,"交易前卡余额:%.2lf元 卡当前余额:%.2lf元",tradeserial->cardbefbal,tradeserial->cardaftbal);
    strcat(out_pack->vsmess,sMsg);
    writelog(LOG_DEBUG,out_pack->vsmess);

    ret = DB_t_tif_tradeserial_add(tradeserial);
    if (ret) {
        writelog(LOG_ERR,"ret[%d]",ret);
        if(DB_REPEAT==ret)
            ret = E_DB_TRADESERIAL_E;
        else
            ret = E_DB_TRADESERIAL_I;
        return ret;
    }
    ret=db_commit();
    if(ret) {
        writelog(LOG_ERR,"db_commit error,errcode=[%d]",ret);
        return E_DB_COMMIT;
    }
#endif
    return 0;
}

static int record_small_serial(ST_PACK *rPack,ST_PACK *out_pack) {
#if 0
    int ret =0;
    int iSeqNo = 0;
    T_t_tif_tradeserial  tPacketSerial;

    //保存充值流水
    memset(&tPacketSerial, 0, sizeof tPacketSerial);
    memcpy(&tPacketSerial, tradeserial, sizeof tPacketSerial);
    ret = getNewUniqNo(KEYTYPE_TRADESERIAL,&iSeqNo);  						//获得最大流水号
    if(ret) {
        writelog(LOG_ERR,"ret [%d]",ret);
        return ret;
    }
    tPacketSerial.serial_no = iSeqNo;
    tPacketSerial.serial_state = SERISTAT_NONEEDDEBT;
    tPacketSerial.serial_type = TXCODE_SAVING_SMALL_PACKET;
    tPacketSerial.purseno = 33;//33扇区钱包
    tPacketSerial.cardbefbal = rPack->damt2;
    tPacketSerial.trade_fee = rPack->damt1;
    tPacketSerial.cardaftbal = tPacketSerial.cardbefbal + tPacketSerial.trade_fee;

    ret = DB_t_tif_tradeserial_add(&tPacketSerial);
    if (ret) {
        writelog(LOG_ERR,"ret[%d]",ret);
        if(DB_REPEAT==ret)
            ret = E_DB_TRADESERIAL_E;
        else
            ret = E_DB_TRADESERIAL_I;
        return ret;
    }

    out_pack->damt2=tPacketSerial.cardaftbal;
    out_pack->lvol1= iSeqNo;			//流水号
#endif
    return 0;

}






//系统正式入账
int enter_account(ST_PACK *rPack,ST_PACK *out_pack) {

    return 0;
}

static int deal_water_ctl_out_pack(ST_PACK *rPack,ST_PACK *out_pack) {
    int ret = 0;
    /*
    char price1[16]="";
    char price2[16]="";
    char price3[16]="";
    double d_price1 = 0;
    double d_price2 = 0;
    double d_price3 = 0;
    */
    T_t_transdtl tPacketSerial;
    memset(&tPacketSerial, 0, sizeof tPacketSerial);
    /*
    ret=GetSysParaVal(2201, price1);
    if(ret){
    	writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
    	return ret;
    }
    ret=GetSysParaVal(2202, price2);
    if(ret){
    	writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
    	return ret;
    }
    ret=GetSysParaVal(2203, price3);
    if(ret){
    	writelog(LOG_ERR,"get_parameter error,error code=[%d]",ret);
    	return ret;
    }
    d_price1 = atof(price1);
    d_price2 = atof(price2);
    d_price3 = atof(price3);

    out_pack->damt10 = D4U5(d_price1/600,4);
    out_pack->damt11 = D4U5(d_price2/600,4);
    out_pack->damt12 = D4U5(d_price3/600,4);
    */
    ret = DB_t_transdtl_read_by_accdate_and_termid_and_termseqno("",rPack->lvol7,0, &tPacketSerial);  //消费流水号
    if (ret) {
        writelog(LOG_DEBUG,"输入号不存在消费流水号[%d]",rPack->lvol7);
        if (DB_NOTFOUND == ret) {
            ret = E_DB_TRADESERIAL_N;
        } else {
            ret = E_DB_TRADESERIAL_R;
        }
        return ret;
    }
    out_pack->damt2=tPacketSerial.cardaftbal;
    out_pack->lvol1=tPacketSerial.termseqno;
    return 0;

}


static const ext_consumer_request_t  g_transfer_process[] = {
    {PRE_CHEDK_ENTER_ACCOUNT_MOBILE_TRANS, TXCODE_MOBILE_TRANS,check_cellphone,get_third_part_account,trans_request,NULL,NULL},
    {PRE_ENTER_ACCOUNT_WATER_TRANS,TXCODE_CONSUME, NULL,get_third_part_account,NULL,deal_water_ctl_out_pack,record_small_serial},
    {TERMINAL_TRADE,TXCODE_COSUME_LOG,pre_check_term_trade,search_account_from_term_id,do_term_trade,NULL,NULL},
    {PRE_LOGIN_ELECT_TRANS,TXCODE_ELECT_TRANS,elect_room_check,get_third_part_account,elect_request,NULL,NULL},
    {CHECK_ROOMNAME_ELECT_TRANS,TXCODE_ELECT_TRANS,elect_room_check_get_name,get_third_part_account,elect_request_changzhou,NULL,NULL},
    {TURN_OVER,TXCODE_TURNOVER,pre_check_fee,get_third_part_account,write_turn_over_fee,NULL,NULL},
    {-1,-1,NULL,NULL,NULL,NULL,NULL}
};


int ext_consumer_find_trade(int request_type,ext_consumer_request_t *transfer) {
    int i = 0;
    //writelog(LOG_DEBUG,"请求功能号[%d]",request_type);
    while(g_transfer_process[i].request_type != -1) {
        //writelog(LOG_DEBUG,"功能号[%d]",g_transfer_process[i].request_type);
        if(g_transfer_process[i].request_type == request_type) {
            *transfer = g_transfer_process[i];
            return 0;
        }
        i++;
    }
    return E_TRANS_FUNC_NONSUPPORT;
}

