/* --------------------------------------------
 * 程序名称: F800712.sqc
 * 创建日期: Sep 29 2004
 * 程序作者: auto creat by wen jian
 * 版本信息: 1.0.0.0
 * 程序功能: query t_mif_consume
 * --------------------------------------------
 * 修改日期:
 * 修改人员:
 * 修改描述:
 * 版本信息:
 * 备注信息:
 * --------------------------------------------*/

ESQL #include <stdio.h>
ESQL #include <stdlib.h>
ESQL #include <string.h>
ESQL #include "cpack.h"
ESQL #include "errdef.h"
ESQL #include "pubdef.h"
ESQL #include "pubdb.h"
ESQL #include "pubfunc.h"
ESQL #include "dbfunc.h"
ESQL #include "busqc.h"

EXEC SQL INCLUDE SQLCA;

int F800712(TRUSERID *handle,int iRequest,ST_PACK *rPack,int *pRetCode,char *szMsg) {
    EXEC SQL BEGIN DECLARE SECTION;
        sqlint32	serial_no2=0;                 	//异常流水号
        sqlint32	serial_state2=0;              	//异常流水状态
        char    	op_time[26+1]="";             	//心跳时间
        sqlint32	alarmno=0;                    	//警戒号
        sqlint32	concount=0;                   	//定长时间消费次数
        sqlint32	serial_no=0;                  	//流水号
        sqlint32	other_seri_no=0;              	//上传端流水号
        sqlint32	serial_type=0;                	//交易代码
        sqlint32	serial_state=0;               	//流水状态
        char    	operate_date[10+1]="";        	//发生日期
        char    	operate_time[8+1]="";         	//发生时间
        char    	collect_date[10+1]="";        	//采集日期
        char    	collect_time[8+1]="";         	//采集时间
        char    	enteract_date[10+1]="";       	//入帐日期
        char    	enteract_time[8+1]="";        	//入帐时间
        sqlint32	maindeviceid=0;              	//上传工作站标识
        sqlint32	deviceid=0;                  	//消费设备标识
        char    	devphyid[8+1]="";         	//三九设备物理ID
        sqlint32	consume_count=0;              	//当前卡中帐户消费次数
        double  	cardaftbal=0;                	//出卡金额
        double  	cardbefbal=0;                 	//入卡金额
        sqlint32	cardno=0;                    	//消费卡号
        sqlint32	purseno=0;                   	//消费钱包号
        double  	consume_fee=0;                	//本次消费金额
        char    	is_online[1+1]="";            	//是否联机
        sqlint32	tmark=0;                      	//交易标记
        char    	dev_auth[8+1]="";             	//终端设备授权号
        sqlint32	comu_ver=0;                   	//通信版本号
        sqlint32	run_reason=0;                 	//启动原因
        char    	crc[5+1]="";                  	//CRC校验
        sqlint32	ecode=0;                      	//返回码
        char    	reserve_1[20+1]="";           	//预留字段1
        char    	reserve_2[20+1]="";           	//预留字段2
        char    	reserve_3[20+1]="";           	//
        sqlint16	indicator=0;
        char    	h_sqlcmd[1024]="";
    EXEC SQL END DECLARE SECTION;

    int    ret=0;
    int    row=0;
    int    first=0;
    char sqltmp[500]="";
    ST_CPACK aPack;
    ST_PACK *out_pack = &(aPack.pack);

#ifdef DEBUG
    writelog(LOG_DEBUG,"serial_no2     :lvol0          [%d]",rPack->lvol0);
    writelog(LOG_DEBUG,"serial_state2  :lvol1          [%d]",rPack->lvol1);
    writelog(LOG_DEBUG,"op_time        :spager         [%s]",rPack->spager);
    writelog(LOG_DEBUG,"alarmno        :lvol2          [%d]",rPack->lvol2);
    writelog(LOG_DEBUG,"concount       :lvol3          [%d]",rPack->lvol3);
#endif

    ResetNormalCPack(&aPack,0,1);
    serial_no2=rPack->lvol0;
    serial_state2=rPack->lvol1;
    Strncpy_t(op_time,rPack->spager,sizeof(op_time));
    alarmno=rPack->lvol2;
    concount=rPack->lvol3;

    strcpy(h_sqlcmd,"select  serial_no2, serial_state2, op_time, alarmno, concount, serial_no, other_seri_no, serial_type, serial_state, operate_date, operate_time, collect_date, collect_time, enteract_date, enteract_time, maindeviceid, deviceid, devphyid, consume_count, cardaftbal, cardbefbal, cardno, purseno, consume_fee, is_online, tmark, dev_auth, comu_ver, run_reason, crc, ecode, reserve_1, reserve_2, reserve_3  from ykt_cur.t_mif_consume ");
    if(serial_no2!=0) {
        if(!first) {
            first=1;
            sprintf(sqltmp," where  serial_no2 =%d ",serial_no2);
            strcat(h_sqlcmd,sqltmp);
        } else {
            sprintf(sqltmp," and serial_no2 =%d ",serial_no2);
            strcat(h_sqlcmd,sqltmp);
        }
    }
    if(serial_state2!=0) {
        if(!first) {
            first=1;
            sprintf(sqltmp," where  serial_state2 =%d ",serial_state2);
            strcat(h_sqlcmd,sqltmp);
        } else {
            sprintf(sqltmp," and serial_state2 =%d ",serial_state2);
            strcat(h_sqlcmd,sqltmp);
        }
    }
    if(strlen(op_time)) {
        if(!first) {
            first=1;
            sprintf(sqltmp," where  op_time ='%s' ",op_time);
            strcat(h_sqlcmd,sqltmp);
        } else {
            sprintf(sqltmp," and op_time ='%s' ",op_time);
            strcat(h_sqlcmd,sqltmp);
        }
    }
    if(alarmno!=0) {
        if(!first) {
            first=1;
            sprintf(sqltmp," where  alarmno =%d ",alarmno);
            strcat(h_sqlcmd,sqltmp);
        } else {
            sprintf(sqltmp," and alarmno =%d ",alarmno);
            strcat(h_sqlcmd,sqltmp);
        }
    }
    if(concount!=0) {
        if(!first) {
            first=1;
            sprintf(sqltmp," where  concount =%d ",concount);
            strcat(h_sqlcmd,sqltmp);
        } else {
            sprintf(sqltmp," and concount =%d ",concount);
            strcat(h_sqlcmd,sqltmp);
        }
    }

    EXEC SQL PREPARE query_stmt FROM :h_sqlcmd;
    if(SQLCODE) {
        *pRetCode=E_DB_CONSUME_R;
        db_chk_err(__FILE__,__LINE__,&sqlca);
        goto L_RETU;
    }
    EXEC SQL  DECLARE consume_cur CURSOR FOR query_stmt;
    if(SQLCODE) {
        *pRetCode=E_DB_CONSUME_R;
        db_chk_err(__FILE__,__LINE__,&sqlca);
        goto L_RETU;
    }
    EXEC SQL  OPEN consume_cur;
    if(SQLCODE) {
        *pRetCode=E_DB_CONSUME_R;
        db_chk_err(__FILE__,__LINE__,&sqlca);
        goto L_RETU;
    }
    SetCol(handle,0);
    SetCol(handle,F_LVOL0,F_LVOL1,F_SPAGER,F_LVOL2,F_LVOL3,F_LVOL4,F_LVOL5,F_LVOL6,F_LVOL7,F_SCUST_NO,F_SBANK_PWD,F_SCUST_NO2,F_SBANK_PWD2,F_SORDER0,F_SDATE0,F_LVOL8,F_LVOL9,F_SDATE1,F_LVOL10,F_DAMT0,F_DAMT1,F_LVOL11,F_LVOL12,F_DAMT2,F_SMAIN_FLAG,F_LCERT_CODE,F_SDATE2,F_LSAFE_LEVEL,F_LSAFE_LEVEL2,F_SBANK_CODE,F_LWITHDRAW_FLAG,F_SCUST_AUTH,F_SCUST_AUTH2,F_SNAME,0);
    while(1) {
        serial_no2=0;
        serial_state2=0;
        memset(op_time,0,sizeof(op_time));
        alarmno=0;
        concount=0;
        serial_no=0;
        other_seri_no=0;
        serial_type=0;
        serial_state=0;
        memset(operate_date,0,sizeof(operate_date));
        memset(operate_time,0,sizeof(operate_time));
        memset(collect_date,0,sizeof(collect_date));
        memset(collect_time,0,sizeof(collect_time));
        memset(enteract_date,0,sizeof(enteract_date));
        memset(enteract_time,0,sizeof(enteract_time));
        maindeviceid=0;
        deviceid=0;
        memset(devphyid,0,sizeof(devphyid));
        consume_count=0;
        cardaftbal=0;
        cardbefbal=0;
        cardno=0;
        purseno=0;
        consume_fee=0;
        memset(is_online,0,sizeof(is_online));
        tmark=0;
        memset(dev_auth,0,sizeof(dev_auth));
        comu_ver=0;
        run_reason=0;
        memset(crc,0,sizeof(crc));
        ecode=0;
        memset(reserve_1,0,sizeof(reserve_1));
        memset(reserve_2,0,sizeof(reserve_2));
        memset(reserve_3,0,sizeof(reserve_3));

        EXEC SQL  FETCH consume_cur INTO
        :serial_no2:indicator,
        :serial_state2:indicator,
        :op_time:indicator,
        :alarmno:indicator,
        :concount:indicator,
        :serial_no:indicator,
        :other_seri_no:indicator,
        :serial_type:indicator,
        :serial_state:indicator,
        :operate_date:indicator,
        :operate_time:indicator,
        :collect_date:indicator,
        :collect_time:indicator,
        :enteract_date:indicator,
        :enteract_time:indicator,
        :maindeviceid:indicator,
        :deviceid:indicator,
        :devphyid:indicator,
        :consume_count:indicator,
        :cardaftbal:indicator,
        :cardbefbal:indicator,
        :cardno:indicator,
        :purseno:indicator,
        :consume_fee:indicator,
        :is_online:indicator,
        :tmark:indicator,
        :dev_auth:indicator,
        :comu_ver:indicator,
        :run_reason:indicator,
        :crc:indicator,
        :ecode:indicator,
        :reserve_1:indicator,
        :reserve_2:indicator,
        :reserve_3:indicator;
        ret=SQLCODE;
        if(ret) {
            db_chk_err(__FILE__,__LINE__,&sqlca);
            EXEC SQL  CLOSE consume_cur;
            if(DB_NOTFOUND==ret) {
                if(row)
                    break;
                else
                    *pRetCode=E_DB_CONSUME_N;
            } else
                *pRetCode=E_DB_CONSUME_R;
            goto L_RETU;
        }

        out_pack->lvol0=serial_no2;
        out_pack->lvol1=serial_state2;
        Strncpy_t(out_pack->spager,op_time,sizeof(out_pack->spager));
        out_pack->lvol2=alarmno;
        out_pack->lvol3=concount;
        out_pack->lvol4=serial_no;
        out_pack->lvol5=other_seri_no;
        out_pack->lvol6=serial_type;
        out_pack->lvol7=serial_state;
        Strncpy_t(out_pack->scust_no,operate_date,sizeof(out_pack->scust_no));
        Strncpy_t(out_pack->sbank_pwd,operate_time,sizeof(out_pack->sbank_pwd));
        Strncpy_t(out_pack->scust_no2,collect_date,sizeof(out_pack->scust_no2));
        Strncpy_t(out_pack->sbank_pwd2,collect_time,sizeof(out_pack->sbank_pwd2));
        Strncpy_t(out_pack->sorder0,enteract_date,sizeof(out_pack->sorder0));
        Strncpy_t(out_pack->sdate0,enteract_time,sizeof(out_pack->sdate0));
        out_pack->lvol8=maindeviceid;
        out_pack->lvol9=deviceid;
        Strncpy_t(out_pack->sdate1,devphyid,sizeof(out_pack->sdate1));
        out_pack->lvol10=consume_count;
        out_pack->damt0=cardaftbal;
        out_pack->damt1=cardbefbal;
        out_pack->lvol11=cardno;
        out_pack->lvol12=purseno;
        out_pack->damt2=consume_fee;
        Strncpy_t(out_pack->smain_flag,is_online,sizeof(out_pack->smain_flag));
        out_pack->lcert_code=tmark;
        Strncpy_t(out_pack->sdate2,dev_auth,sizeof(out_pack->sdate2));
        out_pack->lsafe_level=comu_ver;
        out_pack->lsafe_level2=run_reason;
        Strncpy_t(out_pack->sbank_code,crc,sizeof(out_pack->sbank_code));
        out_pack->lwithdraw_flag=ecode;
        Strncpy_t(out_pack->scust_auth,reserve_1,sizeof(out_pack->scust_auth));
        Strncpy_t(out_pack->scust_auth2,reserve_2,sizeof(out_pack->scust_auth2));
        Strncpy_t(out_pack->sname,reserve_3,sizeof(out_pack->sname));
        row++;
        PutRow(handle,out_pack,pRetCode,szMsg);
        if(row%9==0)
            AnswerDataPart(handle,*pRetCode,szMsg);
    }
    AnswerData(handle,*pRetCode,szMsg);
    return 0;
L_RETU:
    return -1;
}
